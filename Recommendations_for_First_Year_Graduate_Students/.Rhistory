w[, 1] = 2 * mid.slice - w[,1]
w = w[ w[, 1] > 0 & w[, 1] < max.slice, ]
img[w] = 1
img = (img > 0)*1
img = newnii(img)
}
# allres = allres
make.pvalimg = function(pvalimg, runlist = NULL){
pvalimg.tab = llply(runlist, function(x) {
x = area_pct(pvalimg, ind.list=x, keepall=TRUE)
x$nvox = x$nvox/sum(x$nvox) * 100
x$roi_pct_any = x$roi_pct_any * 100
x$roi_mean_pct = x$roi_mean_pct * 100
x = x[order(x$nvox, decreasing=TRUE), , drop=FALSE]
x$area = rownames(x)
x
}, .progress= "text")
names(pvalimg.tab) = names(runlist)
return(pvalimg.tab)
}
atfile = file.path(atlasdir, "All_FSL_Atlas_Labels.Rda")
# atfile = file.path(atlasdir, "All_FSL_Atlas_Labels_Filled.Rda")
x = load(file=atfile)
lists = list(mni.list, jhut1.list, jhut2.list)
names(lists) = c("MNI", "EVE_1", "EVE_2")
sublists = list(jhut1.list, jhut2.list)
sublists = lapply(sublists, function(x) {
area = names(x)
x[grep("GLOBUS_PALLIDUS|THALAMUS|PUTAMEN", area)]
})
sublists = lapply(sublists, function(x) {
xx = unlist(x)
area = names(xx)
area = gsub("_left\\d*", "", area)
area = gsub("_right\\d*", "", area)
uarea = unique(area)
x = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx[ind]
})
names(x) = uarea
x
})
col.lists = list(jhut1.list, jhut2.list)
names(col.lists) = c("EVE_1", "EVE_2")
col.lists = lapply(col.lists, function(x) {
area = names(x)
area = gsub("_left", "", area)
area = gsub("_right", "", area)
uarea = unique(area)
res = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx = sort(unlist(x[ind]))
names(xx) = NULL
# print(ind)
xx
# xx[ind]
})
names(res) = uarea
res
})
rm(list=x)
area_pct = function(img, ind.list, keepall) {
## get overlap of indices
raw.mat = sapply(ind.list, function(x) sum(img[x]))
any.mat = sapply(ind.list, function(x) mean(img[x] > 0))
mn.mat = sapply(ind.list, function(x) mean(img[x]))
names(raw.mat) = names(ind.list)
## cs is sum of indices of overlap
cs.raw = data.frame(nvox=raw.mat, roi_pct_any = any.mat,
roi_mean_pct = mn.mat)
rownames(cs.raw) = names(ind.list)
if (!keepall) cs.raw = cs.raw[rowSums(cs.raw) != 0, ,
drop=FALSE]
return(cs.raw)
}
eve = col.lists[[2]]
ind = eve[[which(names(eve) == "Background")]]
whichdir = "reoriented"
outcome = "NIHSS"
get.id = function(x){
ss = strsplit(x, "_")
ss = sapply(ss, head, 1)
ss = gsub(".*(\\d\\d\\d-.*)", "\\1", ss)
ss
}
id_to_pname = function(x){
as.numeric(gsub("-", "", x))
}
nkeeps = c(1000, 2000, 3000, .001, 0.01, 0.05)
demog = read.csv(file=file.path(basedir, "Demog_NIHSS_Mask.csv"),
stringsAsFactors=FALSE)
demog$Base_ICH_10 = demog$Diagnostic_ICH /10
demog$Clot_Location_RC = gsub("Palidus", "Pallidus",
demog$Clot_Location_RC )
demog$Clot_Location_RC = factor(demog$Clot_Location_RC,
levels=
c("Lobar", "Globus Pallidus",
"Putamen", "Thalamus"))
demog$LOC = demog$Clot_Location_RC
all.demog = demog
###############################################
# Load and subset matrix
###############################################
outfile = file.path(outdir, "Voxel_Matrix.Rda")
load( file=outfile )
all.mat = mat
all.rs = rs
# ncut = 0.1
ncut = 10
outcome = "NIHSS"
icut = 0.01
ncut = 6
file = file.path(figdir,
paste0(outcome, "_NoIVH_", icut,
"_keep", ncut,"_Results.Rda")
)
load(file)
csf.ind = col.lists[["EVE_1"]][["Background"]]
img.ind = which(img > 0)
img.ind
img.ind %in% csf.ind
mean(img.ind %in% csf.ind)
img.ind = which(img > 0)
img2 = img
csf.and.img = img.ind[img.ind %in% csf.ind]
img2[img.ind] = 2
img2= cal_img(img2)
img2[img2 == 0] = NA
ortho2(temp.t1, img2, col.y=c("red", "green"))
template = file.path(tempdir, "scct_unsmooth.nii.gz")
temp = readNIfTI(template)
dtemp = dim(temp)
t.t1 = file.path(tempdir, "sct1_unsmooth.nii.gz")
temp.t1 = readNIfTI(t.t1)
ortho2(temp.t1, img2, col.y=c("red", "green"))
img.ind = which(img > 0)
img2 = img
csf.and.img = img.ind[img.ind %in% csf.ind]
img2[csf.and.img] = 2
img2= cal_img(img2)
img2[img2 == 0] = NA
ortho2(temp.t1, img2, col.y=c("red", "green"), window=c(300, 1000))
cog(img)
ortho2(temp.t1, img2, col.y=c("red", "green"),
window=c(300, 1000), xyz=cog(img, ceil = TRUE))
ortho2(temp.t1,
window=c(300, 1000), xyz=cog(img, ceil = TRUE))
ortho2(temp.t1, img2, col.y=alpha(c("red", "green"), 0.5),
window=c(300, 1000), xyz=cog(img, ceil = TRUE))
cog(img, ceil = TRUE)
ortho2(temp.t1, img2, col.y=alpha(c("red", "green"), 0.5),
window=c(300, 1000), xyz=c(115, 126, 70))
ortho2(temp.t1, img2, col.y=alpha(c("red", "green"), 0.5),
window=c(300, 1000), xyz=c(115, 126, 60))
#################################
# Regressions with % of ROI
# Author: John Muschelli
#################################
rm(list=ls())
library(cttools)
library(scales)
library(RColorBrewer)
library(data.table)
library(ggplot2)
library(grid)
library(plyr)
library(fslr)
homedir = "/Applications"
rootdir = "~/CT_Registration"
basedir = file.path(rootdir, "data")
outdir = basedir
figdir = file.path(rootdir, "CT_Pipeline", "figure")
if (Sys.info()[["user"]] %in% "jmuschel") {
homedir = "~"
rootdir = "/dexter/disk2/smart/stroke_ct/ident"
basedir = file.path(rootdir, "Registration")
outdir = file.path(basedir, "results")
}
progdir = file.path(rootdir, "programs")
tempdir = file.path(rootdir, "Template")
atlasdir = file.path(tempdir, "atlases")
img_cut = function(img, breaks, ...){
cuts = cut(img, breaks=breaks, ...)
# cuts = factor(cuts, levels)
levs = levels(cuts)
cuts = as.numeric(cuts)
# res.p[ rs > ncut ] = cuts
img = niftiarr(img, array(cuts, dim=dim(img)))
return(list(img=img, levs=levs))
}
lr_symm = function(img){
dimg = dim(img)
max.slice = dimg[1]
mid.slice = (max.slice+1)/2
w = which(img > 0, arr.ind=TRUE)
## 20 - then 160, 90 - 20 + 90
## if 160 then 90 - 160 + 90
w[, 1] = 2 * mid.slice - w[,1]
w = w[ w[, 1] > 0 & w[, 1] < max.slice, ]
img[w] = 1
img = (img > 0)*1
img = newnii(img)
}
# allres = allres
make.pvalimg = function(pvalimg, runlist = NULL){
pvalimg.tab = llply(runlist, function(x) {
x = area_pct(pvalimg, ind.list=x, keepall=TRUE)
x$nvox = x$nvox/sum(x$nvox) * 100
x$roi_pct_any = x$roi_pct_any * 100
x$roi_mean_pct = x$roi_mean_pct * 100
x = x[order(x$nvox, decreasing=TRUE), , drop=FALSE]
x$area = rownames(x)
x
}, .progress= "text")
names(pvalimg.tab) = names(runlist)
return(pvalimg.tab)
}
atfile = file.path(atlasdir, "All_FSL_Atlas_Labels.Rda")
# atfile = file.path(atlasdir, "All_FSL_Atlas_Labels_Filled.Rda")
x = load(file=atfile)
lists = list(mni.list, jhut1.list, jhut2.list)
names(lists) = c("MNI", "EVE_1", "EVE_2")
sublists = list(jhut1.list, jhut2.list)
sublists = lapply(sublists, function(x) {
area = names(x)
x[grep("GLOBUS_PALLIDUS|THALAMUS|PUTAMEN", area)]
})
sublists = lapply(sublists, function(x) {
xx = unlist(x)
area = names(xx)
area = gsub("_left\\d*", "", area)
area = gsub("_right\\d*", "", area)
uarea = unique(area)
x = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx[ind]
})
names(x) = uarea
x
})
col.lists = list(jhut1.list, jhut2.list)
names(col.lists) = c("EVE_1", "EVE_2")
col.lists = lapply(col.lists, function(x) {
area = names(x)
area = gsub("_left", "", area)
area = gsub("_right", "", area)
uarea = unique(area)
res = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx = sort(unlist(x[ind]))
names(xx) = NULL
# print(ind)
xx
# xx[ind]
})
names(res) = uarea
res
})
rm(list=x)
area_pct = function(img, ind.list, keepall) {
## get overlap of indices
raw.mat = sapply(ind.list, function(x) sum(img[x]))
any.mat = sapply(ind.list, function(x) mean(img[x] > 0))
mn.mat = sapply(ind.list, function(x) mean(img[x]))
names(raw.mat) = names(ind.list)
## cs is sum of indices of overlap
cs.raw = data.frame(nvox=raw.mat, roi_pct_any = any.mat,
roi_mean_pct = mn.mat)
rownames(cs.raw) = names(ind.list)
if (!keepall) cs.raw = cs.raw[rowSums(cs.raw) != 0, ,
drop=FALSE]
return(cs.raw)
}
eve = col.lists[[2]]
ind = eve[[which(names(eve) == "Background")]]
whichdir = "reoriented"
outcome = "NIHSS"
get.id = function(x){
ss = strsplit(x, "_")
ss = sapply(ss, head, 1)
ss = gsub(".*(\\d\\d\\d-.*)", "\\1", ss)
ss
}
id_to_pname = function(x){
as.numeric(gsub("-", "", x))
}
nkeeps = c(1000, 2000, 3000, .001, 0.01, 0.05)
demog = read.csv(file=file.path(basedir, "Demog_NIHSS_Mask.csv"),
stringsAsFactors=FALSE)
demog$Base_ICH_10 = demog$Diagnostic_ICH /10
demog$Clot_Location_RC = gsub("Palidus", "Pallidus",
demog$Clot_Location_RC )
demog$Clot_Location_RC = factor(demog$Clot_Location_RC,
levels=
c("Lobar", "Globus Pallidus",
"Putamen", "Thalamus"))
demog$LOC = demog$Clot_Location_RC
all.demog = demog
###############################################
# Load and subset matrix
###############################################
outfile = file.path(outdir, "Voxel_Matrix.Rda")
load( file=outfile )
all.mat = mat
all.rs = rs
# ncut = 0.1
ncut = 10
template = file.path(tempdir, "scct_unsmooth.nii.gz")
temp = readNIfTI(template)
dtemp = dim(temp)
t.t1 = file.path(tempdir, "sct1_unsmooth.nii.gz")
temp.t1 = readNIfTI(t.t1)
#############################################
# Overall desnity image
##############################################
noivh = demog$IVH_Dx_10 == 0 & demog$patientName != 131316
noivh.mat = mat[, which(noivh), drop=FALSE]
ivhvox = colSums(noivh.mat[ind, ])
rs = rowSums(noivh.mat)
csf.ind = col.lists[["EVE_1"]][["Background"]]
csfmask = array(0, dim = dtemp)
csfmask[csf.ind] = 1
csfmask = niftiarr(temp, csfmask)
csf.true = colSums(mat[csf.ind, ])
true = colSums(mat)
rat = csf.true/true
rat
sum(noivh.mat[csf.ind, ])/sum(noivh.mat)
sum(all.mat[csf.ind, ])/sum(all.mat)
mean(rat)
csf.true
dim(noivh.mat[csf.ind, ])
mean(dim(noivh.mat[csf.ind, ]))
mean(noivh.mat[csf.ind, ])
colMeans(noivh.mat[csf.ind, ])
rowMeans(noivh.mat[csf.ind, ])
mean(rowMeans(noivh.mat[csf.ind, ]))
noivh.csf.true = colSums(noivh.mat[csf.ind, ])
noivh.true = colSums(noivh.mat)
noivh.rat = noivh.csf.true/noivh.true
noivh.rat
hist(rowMeans(noivh.mat[csf.ind,]))
hist(rowMeans(all.mat[csf.ind,]))
mean(rowMeans(all.mat[csf.ind,]))
mean(all.mat[csf.ind,])
mean(noivh.mat[csf.ind,])
colSums(mat)
any = rowSums(all.mat) > 0
any.hem = rowSums(all.mat) > 0
any.noivh.hem = rowSums(noivh.mat) > 0
dim(any)
length(any)
csf.true
any.hem = rowSums(all.mat) > 0
any.noivh.hem = rowSums(noivh.mat) > 0
any.hem = rowSums(all.mat[csf.ind, ]) > 0
any.noivh.hem = rowSums(noivh.mat[csf.ind,]) > 0
any.hem
mean(all.mat[csf.ind, ][any.hem,])
mean(all.mat[csf.ind, ][any.hem,])
mean(noivh.mat[csf.ind, ][any.noivh.hem,])
mean(all.mat[csf.ind, ][any.hem,])
mean(noivh.mat[csf.ind, ][any.noivh.hem,])
mean(noivh.mat[csf.ind, ][any.hem,])
length(csf.ind)
mean(noivh.mat[csf.ind, ])
hist(colMeans[csf.ind, ])
hist(colMeans(noivh.mat[csf.ind, ])
()
)
hist(colMeans(noivh.mat[csf.ind, ]))
colMeans(noivh.mat[csf.ind, ])
hist(colMeans(noivh.mat[csf.ind, ]))
mean(colMeans(noivh.mat[csf.ind, ]))
mean(noivh.mat[csf.ind, ])
mean(all.mat[csf.ind, ])
any.hem = rowSums(all.mat) > 0
any.noivh.hem = rowSums(noivh.mat[csf.ind,]) > 0
any.hem = rowSums(all.mat) > 0
any.noivh.hem = rowSums(noivh.mat) > 0
dim(any.noivh)
dim(any.noivh.hem)
length(any.noivh.hem)
length(all.mat)
length(any.hem)
any.hem = which(rowSums(all.mat) > 0)
any.noivh.hem = which(rowSums(noivh.mat) > 0)
mean(csf.ind %in% any.hem)
mean(csf.ind %in% any.noivh.hem)
any.hem = which(rowSums(all.mat) > 10)
any.noivh.hem = which(rowSums(noivh.mat) > 6)
mean(csf.ind %in% any.hem)
mean(csf.ind %in% any.noivh.hem)
sum(noivh.mat[csf.ind, ])/sum(noivh.mat)
sum(all.mat[csf.ind, ])/sum(all.mat)
mean(noivh.mat[csf.ind,])
dim(noivh)
dim(noivh.mat)
mean(noivh.mat[csf.ind,][rowSums(noivh.mat) > 0, ])
noivh.keep = rowSums(noivh.mat) > 0
noivh.keep = which(rowSums(noivh.mat) > 0)
noivh.keep
library(knitr)
knit_hooks$set(webgl = hook_webgl)
opts_chunk$set(echo=FALSE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
## ----label=setup, echo=FALSE---------------------------------------------
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
library(gridExtra)
library(qdap)
library(ICC)
library(xtable)
options(matlab.path='/Applications/MATLAB_R2014b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
progdir = file.path(basedir, "programs")
new.ids = readLines(file.path(progdir, "newid_list.txt"))
homedir <- file.path(basedir, study)
rdas = list.files(path=homedir, pattern=".*_CT_.*Header_Info.Rda",
full.names = TRUE, recursive = TRUE)
gant = rdas[grepl("antry", rdas)]
gant = gsub("_ungantry", "", gant)
rdas = rdas[ ! (rdas %in% gant)]
# stopifnot(!any(grepl("antry", rdas)))
rdas = rdas[grepl("Sorted", rdas)]
rda = data.frame(rda=rdas, stringsAsFactors = FALSE)
rda$id = basename(rda$rda)
rda$id = gsub("(.*)_Header_Info.*", "\\1", rda$id)
rda$id = gsub("_ungantry", "", rda$id)
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "Recommendations for First Year Graduate Students"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
end = 10000
