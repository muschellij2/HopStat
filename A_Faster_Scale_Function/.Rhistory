all_ind = which(mask, arr.ind = TRUE)
i = 1
for (i in seq(nrow(all_ind))) {
irow = all_ind[i, ]
new_ind = ind + irow
ok = colAlls(new_ind > c(0, 0, 0) & new_ind <= img_dim)
good = t(new_ind[,ok])
vals = rep(NA, ncol(ind))
vals[ok] = img[good]
# cbind()
print(i)
}
rm(list = ls())
library(matrixStats)
img = readnii("~/Desktop/Desktop/scratch/VSD.Brain.XX.O.MR_Flair.70614_SyN.nii.gz")
mask = img > 0
# sigma = rep(5, 3) # in mm
sigma = c(1,5,4)
cutoff = 3
pdim = voxdim(img)
img_dim = dim(img)
vox_sigma = sigma/pdim
# pdim = rep(0.5, 3)
s = ceiling(vox_sigma * cutoff)*2 + 1;
vals = lapply(s, function(x) {
seq(ceiling(-x/2), floor(x/2), by = 1)
})
ind = expand.grid(vals)
colnames(ind) = paste0("dim", 1:3)
ind = t(ind)
scale = 1/sqrt(2 * pi * sigma ^ 2)
scale = prod(scale)
eg = ind * pdim
eg = -eg ^ 2 / (2 * sigma ^ 2)
eg = colSums(eg)
eg = exp(eg)
eg = scale * eg
sum(eg)
rm(list = ls())
library(matrixStats)
img = readnii("~/Desktop/Desktop/scratch/VSD.Brain.XX.O.MR_Flair.70614_SyN.nii.gz")
mask = img > 0
# sigma = rep(5, 3) # in mm
sigma = c(1,5,4)
cutoff = 3
pdim = voxdim(img)
img_dim = dim(img)
vox_sigma = sigma/pdim
# pdim = rep(0.5, 3)
s = ceiling(vox_sigma * cutoff)*2 + 1;
vals = lapply(s, function(x) {
seq(ceiling(-x/2), floor(x/2), by = 1)
})
ind = expand.grid(vals)
colnames(ind) = paste0("dim", 1:3)
ind = t(ind)
scale = 1/sqrt(2 * pi * sigma ^ 2)
scale = prod(scale)
eg = ind * pdim
eg = -eg ^ 2 / (2 * sigma ^ 2)
eg = colSums(eg)
eg = exp(eg)
eg = scale * eg
sum(eg)
eg = eg / sum(eg)
all_ind = which(mask, arr.ind = TRUE)
i = 1
for (i in seq(nrow(all_ind))) {
irow = all_ind[i, ]
new_ind = ind + irow
ok = colAlls(new_ind > c(0, 0, 0) & new_ind <= img_dim)
good = t(new_ind[,ok])
vals = rep(NA, ncol(ind))
vals[ok] = img[good]
# cbind()
print(i)
}
rm(list = ls())
library(matrixStats)
library(fslr)
# for example read in an image
img = mni_img(brain = TRUE)
mask = img > 0
# sigma = rep(5, 3) # in mm
sigma = c(1,5,4)
cutoff = 3
img
ortho2(img)
rm(list = ls())
library(matrixStats)
library(fslr)
# for example read in an image
img = mni_img(brain = TRUE)
mask = img > 0
# sigma = rep(5, 3) # in mm
sigma = c(1,5,4)
cutoff = 3
#########################
# Get voxel dimensions (in mm)
# and image dimensions (voxels)
#########################
pdim = voxdim(img)
img_dim = dim(img)
#########################
# Get sigma in terms of voxels
#########################
vox_sigma = sigma/pdim
#########################
# s is the radius required for at least cutoff standard deviations
#########################
s = ceiling(vox_sigma * cutoff)*2 + 1;
#########################
# Get the distances from the voxel,
# each represent # voxels going in the
# left/right up/down from the current voxel
#########################
vals = lapply(s, function(x) {
seq(ceiling(-x/2), floor(x/2), by = 1)
})
vals
sigma
library(AnalyzeFMRI)
?SmoothEst
?GaussSmoothKernel
GaussSmoothKernel()
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "A Faster Scale Function"
categories = c("bmorebiostats", "rbloggers")
# categories = "rbloggers"
# categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file = rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
colMeans
?colMeans
?colSds
colSds
colVars
scale
?scale
rowSds
rowVars
library(microbenchmark)
source('~/.active-rstudio-document', echo=TRUE)
system("open ./")
library(rmarkdown)
render("A_Faster_Scale_Function.Rmd")
plot(mb)
ggplot(mb)
library(ggplto2)
library(ggplot2)
ggplot(mb)
ggplot(mb, mapping=aes_string(x = "run", y = "value", colour = "expr"))
ggplot(mb, aes_string(x = "run", y = "value", colour = "expr"))
ggplot(data = mb, aes_string(x = "run", y = "value", colour = "expr"))
mb$expr
mb$time
ggplot(data = mb, aes_string(y = "value", colour = "expr"))
ggplot(data = mb, aes_string(y = "time", colour = "expr"))
ggplot(data = mb, aes_string(y = "time", x = "expr"))
ggplot(data = mb, aes_string(y = "time", x = "expr")) + geom_boxplot()
ggplot(data = mb, aes_string(y = "time", x = "expr")) + geom_violin()
g + theme_grey(base_size = 20)
g = ggplot(data = mb, aes_string(y = "time", x = "expr")) + geom_violin()
g + theme_grey(base_size = 20)
g = ggplot(data = mb, aes_string(y = "time"/100, x = "expr")) + geom_violin()
mb$time
?microbenchmark
mb = microbenchmark(colScale(mat), scale(mat), times = 20, unit = "seconds")
print(mb)
mb$time
mb = microbenchmark(colScale(mat), scale(mat), times = 20, unit = "s")
print(mb)
mb
mb$time
g = ggplot(data = mb, aes_string(y = time / 1000, x = "expr")) + geom_violin()
g + theme_grey(base_size = 20)
g = ggplot(data = mb, aes(y = time / 1000, x = expr)) + geom_violin()
g + theme_grey(base_size = 20)
?microbenchmark
g = ggplot(data = mb, aes(y = time / 1e9, x = expr)) + geom_violin()
g + theme_grey(base_size = 20) + xlab("Method") + ylab("Time")
rscaled = t( scale(t(mat)) )
all(rowMeans(rscaled == 0))
rscaled = t( scale(t(mat)) )
all(rowMeans(rscaled == 0))
rscaled
all(rowMeans(rscaled) == 0)
rowMeans(rscaled)
all(abs(rowMeans(rscaled)) < 1e-15)
colscaled_row = t( colScale(t(mat)) )
system.time({
scaled_row = t( scale(t(mat)) )
})
all(abs(rowMeans(scaled_row)) < 1e-15)
system.time({
colscaled_row = t( colScale(t(mat)) )
})
all(abs(rowMeans(colscaled_row)) < 1e-15)
all.equal(colscaled_row, scaled_row)
scale
scale.default
colVars
scale
scale.default()
base::scale.default
help(package = "matrixStats")
?v
?knit2wp
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "A Faster Scale Function"
categories = c("bmorebiostats", "rbloggers")
# categories = "rbloggers"
# categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo = TRUE, ",
"prompt = FALSE, message = FALSE, warning = FALSE, ",
'comment = "", ', 'results = "hide")\n', "```")
cat(addtxt, file = rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
######### Send it to the Website
if (wp) {
#   if (!require('RWordPress'))
#     install.packages('RWordPress',
#                      repos = 'http://www.omegahat.org/R',
#                      type = 'source')
#   library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'https://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = file.path(wpdir, folname))
#     opts_knit$set(
#       base.url = paste0(
#         'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                   base.dir = wpdir)
opts_knit$set(upload.fun = function(file) {
print("Hey")
imgur_upload(file, key = "9f3460e67f308f6")
})
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
#   input = rmdname
#   title = mytitle
#   shortcode= TRUE
#   encoding = getOption("encoding")
#   debug({
knit2wp(rmdname,
shortcode = TRUE,
action = "newPost",
title = mytitle,
categories = categories,
publish = publish)
#     })
#   x = knit2wp2(input = rmdname,
#           title = "Using Tables for Statistics on Large Vectors", categories = categories,
#           shortcode=c(TRUE, TRUE),
#           publish=publish)
# #
#   x$content = gsub("&gt;", ">", x$content, fixed=TRUE)
#   x$content = gsub("&lt;", "<", x$content, fixed=TRUE)
#   x$content = gsub("&quot;", '"', x$content, fixed=TRUE)
#   x$content = gsub("&#39;", "'", x$content, fixed=TRUE)
#   x$content = gsub("&rsquo;", "'", x$content, fixed=TRUE)
#   x$content = gsub("&rdquo;", '"', x$content, fixed=TRUE)
#   x$content = gsub("&ldquo;", '"', x$content, fixed=TRUE)
#   x$content = gsub("&amp;", '"', x$content, fixed=TRUE)
#
#   x$content = gsub("\\(", "ZZZZZZZ", x$content, fixed=TRUE)
#   x$content = gsub("\\)", "$", x$content, fixed=TRUE)
#   x$content = gsub("ZZZZZZZ", "$latex ",
#                    x$content, fixed=FALSE)
#
#   writeLines(text =x$content, con=gsub("[.]Rmd$", "_text.html", rmdname))
purl(rmdname)
}
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "A Faster Scale Function"
categories = c("bmorebiostats", "rbloggers")
# categories = "rbloggers"
# categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo = TRUE, ",
"prompt = FALSE, message = FALSE, warning = FALSE, ",
'comment = "", ', 'results = "hide")\n', "```")
cat(addtxt, file = rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
######### Send it to the Website
if (wp) {
#   if (!require('RWordPress'))
#     install.packages('RWordPress',
#                      repos = 'http://www.omegahat.org/R',
#                      type = 'source')
#   library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'https://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = file.path(wpdir, folname))
#     opts_knit$set(
#       base.url = paste0(
#         'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                   base.dir = wpdir)
opts_knit$set(upload.fun = function(file) {
print("Hey")
imgur_upload(file, key = "9f3460e67f308f6")
})
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
#   input = rmdname
#   title = mytitle
#   shortcode= TRUE
#   encoding = getOption("encoding")
#   debug({
knit2wp(rmdname,
shortcode = TRUE,
action = "newPost",
title = mytitle,
categories = categories,
publish = publish)
#     })
#   x = knit2wp2(input = rmdname,
#           title = "Using Tables for Statistics on Large Vectors", categories = categories,
#           shortcode=c(TRUE, TRUE),
#           publish=publish)
# #
#   x$content = gsub("&gt;", ">", x$content, fixed=TRUE)
#   x$content = gsub("&lt;", "<", x$content, fixed=TRUE)
#   x$content = gsub("&quot;", '"', x$content, fixed=TRUE)
#   x$content = gsub("&#39;", "'", x$content, fixed=TRUE)
#   x$content = gsub("&rsquo;", "'", x$content, fixed=TRUE)
#   x$content = gsub("&rdquo;", '"', x$content, fixed=TRUE)
#   x$content = gsub("&ldquo;", '"', x$content, fixed=TRUE)
#   x$content = gsub("&amp;", '"', x$content, fixed=TRUE)
#
#   x$content = gsub("\\(", "ZZZZZZZ", x$content, fixed=TRUE)
#   x$content = gsub("\\)", "$", x$content, fixed=TRUE)
#   x$content = gsub("ZZZZZZZ", "$latex ",
#                    x$content, fixed=FALSE)
#
#   writeLines(text =x$content, con=gsub("[.]Rmd$", "_text.html", rmdname))
purl(rmdname)
}
source('~/Dropbox/My_Website/WordPresser.R')
