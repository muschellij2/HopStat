cs = names(cs)[cs]
for (icol in cs){
ddf[, icol] = unlist(ddf[, icol])
}
d = ddf
d$truevol = d$estvol = NULL
makeint = function(data){
data$scen = gsub(".*_SS_(.*)_Mask.*", "\\1", data$ssimg )
data$smooth = !grepl("nopresmooth", data$scen)
data$smooth = revalue(as.character(data$smooth),
c("TRUE"="smoothed", "FALSE"="unsmoothed"))
data$int = gsub("_nopresmooth", "", data$scen)
data
}
ddf = makeint(ddf)
ddf$diffvol = (ddf$truevol - ddf$estvol) / 1000
ddf$absdiff = abs(ddf$diffvol)
long = melt(d, id.vars = c("id", "img", "rimg",
"ssimg"))
long = makeint(long)
long$id = as.numeric(factor(long$id))
runcols =  c("dice", "jaccard", "sens", "spec", "accur", "absdiff")
rc = runcols[ !runcols %in% c("absdiff")]
# res = ddply(ddf, .(id), function(x){
# 	cmin = colMins(x[, runcols])
# 	cmax = colMaxs(x[, runcols])
# 	cmean = colMeans(x[, runcols])
# 	xx = data.frame(t(cbind(cmin, cmax, cmean)))
# 	xx$run = c("min", "max", "mean")
# 	xx
# })
wmax = function(x){
which(x == max(x))
}
x = ddf[ ddf$img == ddf$img[1], ]
res = ddply(ddf, .(img), function(x){
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
print(xx)
names(xx) = rc
xx
})
results= sapply(res[, rc], table)
maxtab = sapply(results, function(x) {
names(sort(x, decreasing=TRUE)[1])
})
res = ddply(ddf, .(scen), function(x){
cmin = colMins(x[, runcols])
cmax = colMaxs(x[, runcols])
cmean = colMeans(x[, runcols])
cmed = colMedians(as.matrix(x[, runcols]))
xx = data.frame(t(cbind(cmin, cmax, cmean, cmed)))
xx$run = c("min", "max", "mean", "median")
xx
})
nospec = long[ long$variable %in% c("accur", "sens"),]
long = long[ long$variable != "jaccard", ]
long$variable = revalue(long$variable, c("sens" = "Sensitivity",
"spec" = "Specificity",
"accur" = "Accuracy",
"dice" = "Dice Similarity Index"))
g = qplot(x = id, y = value, facets = smooth ~ variable , data = long,
colour=int)
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot"))
g
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
homedir <- file.path(basedir, study)
#basedir <- file.path("/Volumes/CT_Data/MISTIE")
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
cs =  sapply(ddf, class) == "list"
cs = names(cs)[cs]
for (icol in cs){
ddf[, icol] = unlist(ddf[, icol])
}
d = ddf
d$truevol = d$estvol = NULL
makeint = function(data){
data$scen = gsub(".*_SS_(.*)_Mask.*", "\\1", data$ssimg )
data$smooth = !grepl("nopresmooth", data$scen)
data$smooth = revalue(as.character(data$smooth),
c("TRUE"="Smoothed", "FALSE"="Unsmoothed"))
data$int = gsub("_nopresmooth", "", data$scen)
data
}
ddf = makeint(ddf)
ddf$diffvol = (ddf$truevol - ddf$estvol) / 1000
ddf$absdiff = abs(ddf$diffvol)
long = melt(d, id.vars = c("id", "img", "rimg",
"ssimg"))
long = makeint(long)
long$id = as.numeric(factor(long$id))
runcols =  c("dice", "jaccard", "sens", "spec", "accur", "absdiff")
rc = runcols[ !runcols %in% c("absdiff")]
# res = ddply(ddf, .(id), function(x){
# 	cmin = colMins(x[, runcols])
# 	cmax = colMaxs(x[, runcols])
# 	cmean = colMeans(x[, runcols])
# 	xx = data.frame(t(cbind(cmin, cmax, cmean)))
# 	xx$run = c("min", "max", "mean")
# 	xx
# })
wmax = function(x){
which(x == max(x))
}
x = ddf[ ddf$img == ddf$img[1], ]
res = ddply(ddf, .(img), function(x){
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
print(xx)
names(xx) = rc
xx
})
results= sapply(res[, rc], table)
maxtab = sapply(results, function(x) {
names(sort(x, decreasing=TRUE)[1])
})
res = ddply(ddf, .(scen), function(x){
cmin = colMins(x[, runcols])
cmax = colMaxs(x[, runcols])
cmean = colMeans(x[, runcols])
cmed = colMedians(as.matrix(x[, runcols]))
xx = data.frame(t(cbind(cmin, cmax, cmean, cmed)))
xx$run = c("min", "max", "mean", "median")
xx
})
nospec = long[ long$variable %in% c("accur", "sens"),]
long = long[ long$variable != "jaccard", ]
long$variable = revalue(long$variable, c("sens" = "Sensitivity",
"spec" = "Specificity",
"accur" = "Accuracy",
"dice" = "Dice Similarity Index"))
g = qplot(x = id, y = value, facets = smooth ~ variable , data = long,
colour=int)
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("")
g
?scale_color_discrete
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete(label="hey")
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete(title="hey")
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete(guide="hey")
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("hey")
g
?scale_color_discrete
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete(scale_name="FA")
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("FA")
g
g = qplot(x = variable, y = value, data = long[ long$smooth == "Smoothed"],
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("FA")
g
g = qplot(x = variable, y = value, data = long[ long$smooth == "Smoothed",],
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("FA")
g
g = qplot(x = variable, y = value, data = long[ long$smooth == "Smoothed",],
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("FA") + scale_y_continuous(limits=c(.95, 1))
g
head(ssdf)
head(df)
head(ddf)
dd = ddf[ ddf$smooth == "Smoothed" ,]
g = qplot(x = 1-spec, y = sens, data = dd, facets = int ~ .)
g
dd = ddf[ ddf$smooth == "Smoothed" ,]
g = qplot(x = 1-spec, y = sens, data = dd, facets = int ~ .,
colour=id) + guides(colour=FALSE)
xlab("1 - Specificity") + ylab("Sensitivity") +
scale_y_continuous(limits=c(.95, 1))
g
dd = ddf[ ddf$smooth == "Smoothed" ,]
g = qplot(x = 1-spec, y = sens, data = dd, facets = int ~ .,
colour=id) + guides(colour=FALSE) +
xlab("1 - Specificity") + ylab("Sensitivity") +
scale_y_continuous(limits=c(.95, 1))
g
dd = ddf[ ddf$smooth == "Smoothed" & ddf$int %in% c("0.01", "0.1") ,]
g = qplot(x = 1-spec, y = sens, data = dd, facets = int ~ .,
colour=id) + guides(colour=FALSE) +
xlab("1 - Specificity") + ylab("Sensitivity") +
scale_y_continuous(limits=c(.95, 1))
g
plot(dd$accur[ddf$int== "0.01"], dd$accur[ddf$int== "0.1"])
plot(dd$accur[ddf$int== "0.01"], dd$accur[ddf$int== "0.1"])
abline(a=0, b=1)
install.packages("tidyr")
library(tidyr)
update.packages(ask=FALSE)
library(plyr)
library(dplyr)
library(data.table)
library(flr)
library(fslr)
library(smallPDF)
library(ggis)
library(ggvis)
library(shiny)
devtools::install_github("rstudio/shinyapps")
?demo
demo(package="ggvis")
demo("brush")
demo("brush", package="ggvis")
example(brush)
?demo
install.packages("ggvis")
install.packages("ggvis")
library(ggvis)
demo(brush)
library(lme4)
?glmer
data(ChickWeight)
ChickWeight
library(ggplot2)
ChickWeight
head(ChickWeight)
ggplot(ChickWeight, aes(x=Time, y=weight))
ggplot(ChickWeight, aes(x=Time, y=weight)) + geom_point()
ggplot(ChickWeight, aes(x=Time, y=weight)) + geom_point() + geom_smooth()
ggplot(ChickWeight, aes(x=Time, y=weight)) + geom_point() + geom_smooth(method="lm")
head(ChickWeight)
g = ggplot(ChickWeight, aes(x=Time, y=weight, colour=Chick)) + geom_line()
g
g + facet_wrap(~ Diet)
g = ggplot(ChickWeight, aes(x=Time, y=weight, group=Chick)) + geom_line()
g + facet_wrap(~ Diet)
g + facet_wrap(~ Diet) + geom_smooth()
g = ggplot(ChickWeight, aes(x=Time, y=weight, colour=Chick)) + geom_line()
g + facet_wrap(~ Diet) + geom_smooth()
ggplot(ChickWeight, aes(x=Time, y=weight)) + geom_point() + geom_smooth(method="lm")
g = ggplot(ChickWeight, aes(x=Time, y=weight, group=Chick)) + geom_line() + geom_point()
g
g = ggplot(ChickWeight, aes(x=Time, y=weight, colour=Chick)) + geom_line() + geom_point()
g
g = ggplot(ChickWeight, aes(x=weight, colour=Diet)) + geom_histogram()
g
g = ggplot(ChickWeight, aes(x=weight, fill=Diet)) + geom_histogram()
g
g = ggplot(ChickWeight, aes(x=weight, fill=Diet)) + geom_density()
g
g = ggplot(ChickWeight, aes(x=weight, colour=Diet)) + geom_density()
g
g = ggplot(ChickWeight, aes(x=weight, colour=Diet)) + geom_line(stat="density")
g
g = ggplot(ChickWeight, aes(x=weight, fill=Diet)) + geom_histogram(alpha=I(.5))
g
?ggsave
q()
q('no')
dir()
R.Version()
q('no')
source('~/.active-rstudio-document', echo=TRUE)
require(faraway)
data(beetle)
# two ways of fitting
ans1 <- glm(cbind(affected, exposed-affected) ~ conc, data=beetle, family=binomial)
ans2 <- glm(affected/exposed ~ conc, weights=exposed, data=beetle, family=binomial)
summary(ans1)
confint(ans2)
c(-1, 1) * qnorm(.025)
modsum = summary(ans2)
modsum$coefficients[, "Estimate"] + c(-1, 1) * qnorm(.025) * modsum$coefficients[, "Std. Error"]
modsum = summary(ans2)
t(modsum$coefficients[, "Estimate"]) + c(-1, 1) * qnorm(.025) * t(modsum$coefficients[, "Std. Error"])
modsum$coefficients[, "Estimate"] + c(-1, 1) * qnorm(.025) * t(modsum$coefficients[, "Std. Error"])
modsum$coefficients[, "Estimate"] + c(-1, 1) %*% qnorm(.025) * t(modsum$coefficients[, "Std. Error"])
modsum = summary(ans2)
modsum$coefficients[, "Estimate"] + c(-1, 1) * qnorm(.025) %*% modsum$coefficients[, "Std. Error"]
modsum$coefficients[, "Estimate"] + c(-1, 1) * qnorm(.025) %o% modsum$coefficients[, "Std. Error"]
c(-1, 1) * qnorm(.025) * modsum$coefficients[, "Std. Error"]
c(-1, 1) * qnorm(.025)
(c(-1, 1) * qnorm(.025)) %o% modsum$coefficients[, "Std. Error"]
modsum$coefficients[, "Estimate"] + (c(-1, 1) * qnorm(.025)) %o% modsum$coefficients[, "Std. Error"]
confint(ans2)
modsum = summary(ans2)
modsum$coefficients[, "Estimate"] + t((c(-1, 1) * qnorm(.025)) %o% modsum$coefficients[, "Std. Error"])
confint(ans2)
modsum = summary(ans2)
modsum$coefficients[, "Estimate"] + t((c(1, -1) * qnorm(.025)) %o% modsum$coefficients[, "Std. Error"])
?confint
confint(ans2)
confint.default(ans2)
confint.default(ans2)
confint(ans2)
confint
confint.lm
exp(confint.default(ans2))
ans2
summary(ans2)
sqrt(2)
?geeglm
library(geepac)
library(geepack)
?geeglm
citation("geepack")
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Sorted_HTML_Tables_and_Javascript_Libraries"
folname = gsub(" ", "_", folname)
mytitle <- folname
#   categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", rmdname))
}
require(SortableHTMLTables)
openWAR<-read.csv("https://dl.dropboxusercontent.com/u/35094868/openWAR.csv", stringsAsFactors = FALSE);
openWAR<-read.csv("http://dl.dropboxusercontent.com/u/35094868/openWAR.csv", stringsAsFactors = FALSE);
?v
?download.file
setwd(file.path(wpdir, folname))
download.file("http://dl.dropboxusercontent.com/u/35094868/openWAR.csv")
download.file("http://dl.dropboxusercontent.com/u/35094868/openWAR.csv", "openWAR.csv")
require(SortableHTMLTables)
download.file("https://dl.dropboxusercontent.com/u/35094868/openWAR.csv", "openWAR.csv", method="wget")
require(SortableHTMLTables)
myfile = "openWAR.csv"
if (!file.exists(myfile)) {
download.file("https://dl.dropboxusercontent.com/u/35094868/openWAR.csv", myfile, method="wget")
}
openWAR<-read.csv(myfile, stringsAsFactors = FALSE);
sortable.html.table(openWAR,"openWAR2014.HTML")
browseURL("openWar2014.html")
sortable.html.table(openWAR,"openWAR2014.html")
sortable.html.table(openWAR,"openWAR2014.html")
sortable.html.table(openWAR,"openWAR2014.html")
install.packages("SortableHTMLTables")
install.packages("SortableHTMLTables")
install.packages("SortableHTMLTables")
require(SortableHTMLTables)
myfile = "openWAR.csv"
if (!file.exists(myfile)) {
download.file("https://dl.dropboxusercontent.com/u/35094868/openWAR.csv", myfile, method="wget")
}
openWAR<-read.csv(myfile, stringsAsFactors = FALSE);
sortable.html.table(openWAR,"openWAR2014.html")
sortable.html.table
system.file("assets", package = "SortableHTMLTables")
system.file("assets/jquery.tablesorter.js", package = "SortableHTMLTables")
cat(system.file("assets/jquery.tablesorter.js", package = "SortableHTMLTables"))
head(readLines((system.file("assets/jquery.tablesorter.js", package = "SortableHTMLTables"))))
sortable.html.table
require(SortableHTMLTables)
outfile = "openWAR2014_fixed.html"
sortable.html.table(openWAR,outfile)
f = outfile
x = readLines(f)
x
head(x)
require(SortableHTMLTables)
outfile = "openWAR2014_fixed.html"
sortable.html.table(openWAR,outfile)
change_js = function(f, newjs = "jquery.tablesorter_v2.0.5.js"){
x = readLines(f)
x = gsub("jquery.tablesorter.js", newjs, x, fixed=TRUE)
writeLines(x, con = f)
}
change_js(outfile)
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Sorted_HTML_Tables_and_Javascript_Libraries"
folname = gsub(" ", "_", folname)
mytitle <- folname
#   categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", rmdname))
setwd(file.path(wpdir, folname))
}
######### Send it to the Website
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#   opts_knit$set(
#     base.url = paste0(
#       'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                 base.dir = wpdir)
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
#   input = rmdname
#   title = mytitle
#   shortcode= TRUE
#   encoding = getOption("encoding")
knit2wp(rmdname,
title = mytitle, categories = categories,
shortcode=TRUE,
publish=publish)
}
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Sorted_HTML_Tables_and_Javascript_Libraries"
folname = gsub(" ", "_", folname)
mytitle <- gsub("_", " ", folname)
#   categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", rmdname))
setwd(file.path(wpdir, folname))
}
mytitle
?gunzip
??unzip
?unzip
?gzip
??gzip
foo<-c("stuff, "more stuff", "more")
