library(ROCR)
?prediction
?performance
?prediction
library(ROCR)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions,ROCR.simple$labels)
head(ROCR.simple)
head(cbind(ROCR.simple$predictions, ROCR.simple$labels)
)
library(ROCR)
data(ROCR.simple)
head(cbind(ROCR.simple$predictions, ROCR.simple$labels), 5)
pred <- prediction(ROCR.simple$predictions,ROCR.simple$labels)
library(ROCR)
data(ROCR.simple)
head(cbind(ROCR.simple$predictions, ROCR.simple$labels), 5)
pred <- prediction(ROCR.simple$predictions,ROCR.simple$labels)
class(pred)
slotNames(pred)
class(pred@predictions)
sapply(pred, lenght)
sapply(pred, length)
lapply(pred, length)
sapply(sn, function(x) length(pred[[x]]))
sn = slotNames(pred)
sapply(sn, function(x) length(pred[[x]]))
getSlots(pred)
?getSlots(pred)
sapply(sn, function(x) length(slot, x))
sapply(sn, function(x) length(slot(pred, x)))
sapply(sn, function(x) class(slot(pred, x)))
help(package="ROCR")
data(ROCR.hiv)
ROCR.hiv
manypred = prediction(ROCR.hiv$hiv.nn$predictions, ROCR.hiv$hiv.nn$labels)
data(ROCR.hiv)
manypred = prediction(ROCR.hiv$hiv.nn$predictions, ROCR.hiv$hiv.nn$labels)
sapply(sn, function(x) length(slot(manypred, x)))
sapply(sn, function(x) class(slot(manypred, x)))
data(ROCR.hiv)
L = length(ROCR.hiv$hiv.nn$predictions)
?prediction
?performance
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf)
plot(roc.perf)
many.roc.perf = performance(manypred, measure = "tpr", x.measure = "fpr")
many.roc.perf = performance(manypred, measure = "tpr", x.measure = "fpr")
plot(manyroc.perf)
many.roc.perf = performance(manypred, measure = "tpr", x.measure = "fpr")
plot(manyroc.perf)
plot(many.roc.perf)
plot(many.roc.perf, col=1:10)
ROCR:::plot
getMethods("plot", "performance")
findMethods("plot", "performance")
showMethods("plot")
findMethod("plot", "performance")
?MethodsList
selectMethod("plot", "performance")
findMethod("plot", "performance")
getMethod("plot", "performance")
ROCR:::plot.performance
MethodsList("plot")
methods("plot")
methods(class="performance")
showMethods(classes="performance")
?showMethods(classes="performance")
?getMethod
findMethod("plot", "performance")
ROCR:::plot
showMethods("plot")
findMethod("plot", signature = c("performance","missing"))
findMethod("plot", signature = c(x="performance",y="missing"))
findMethods("plot", signature = c(x="performance",y="missing"))
getMethod("plot", signature = c(x="performance",y="missing"))
ROCR:::.plot.performance
getMethod("plot", signature = c(x="performance",y=""))
getMethod("plot", signature = c(x="performance"))
acc.perf = performance(pred, measure = "acc")
acc.perf
plot(acc.perf)
ind = which.max( slot(acc.perf, "y.values") )
ind = which.max( slot(acc.perf, "y.values")[[1]] )
ind
ind = which.max( slot(acc.perf, "y.values")[[1]] )
acc = slot(acc.perf, "y.values")[[1]][ind]
cutoff = slot(acc.perf, "x.values")[[1]][ind]
print(c(accuracy= acc, cutoff = cutoff))
many.acc.perf = performance(manypred, measure = "acc")
mapply(function(x, y){
ind = which.max( y )
acc = y[ind]
cutoff = x[ind]
return(c(accuracy= acc, cutoff = cutoff))
}, slot(acc.perf, "x.values"), slot(acc.perf, "y.values"))
slot(acc.perf, "x.values")
many.acc.perf = performance(manypred, measure = "acc")
mapply(function(x, y){
ind = which.max( y )
acc = y[ind]
cutoff = x[ind]
return(c(accuracy= acc, cutoff = cutoff))
}, slot(many.acc.perf, "x.values"), slot(many.acc.perf, "y.values"))
proc.perf = pROC(pred, fpr.stop=0.1)
pROC = function(pred, fpr.stop){
perf <- performance(pred,"tpr","fpr")
for (iperf in seq_along(perf@x.values)){
ind = which(perf@x.values[[iperf]] <= fpr.stop)
perf@y.values[[iperf]] = perf@y.values[[iperf]][ind]
perf@x.values[[iperf]] = perf@x.values[[iperf]][ind]
}
return(perf)
}
proc.perf = pROC(pred, fpr.stop=0.1)
proc.perf = pROC(pred, fpr.stop=0.1)
plot(proc.perf)
abline(a=0, b= 1)
auc.perf = performance(pred, measure = "auc")
plot(acc.perf)
plot(auc.perf)
auc.perf = performance(pred, measure = "auc")
auc.perf@y.values
pauc.perf = performance(pred, measure = "auc", fpr.stop=0.1)
auc.perf@y.values
pauc.perf = performance(pred, measure = "auc", fpr.stop=0.1)
pauc.perf@y.values
pauc.perf = performance(pred, measure = "auc", fpr.stop=0.1)
pauc.perf@y.values
pauc.perf@y.values = lapply(pauc.perf@y.values, function(x) x / 0.1)
pauc.perf = performance(pred, measure = "auc", fpr.stop=0.1)
pauc.perf@y.values
pauc.perf = performance(pred, measure = "auc", fpr.stop=0.1)
pauc.perf@y.values
pauc.perf@y.values = lapply(pauc.perf@y.values, function(x) x / 0.1)
pauc.perf@y.values
?performance
cost.perf = performance(pred, "cost")
cost.perf
which.min(cost.perf@y.values)
which.min(cost.perf@y.values[[1]])
pred@cutoffs[[1]][which.min(cost.perf@y.values[[1]])]
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf@x.values, perf@y.values, pred@cutoffs)
}
cost.perf = performance(pred, "cost")
pred@cutoffs[[1]][which.min(cost.perf@y.values[[1]])]
opt.cut(roc.perf, pred)
)
x = opt.cut(roc.perf, pred)
x
cost.perf = performance(pred, "cost", cost.fp = 2, cost.fn = 1)
pred@cutoffs[[1]][which.min(cost.perf@y.values[[1]])]
library(knitr)
wp = TRUE
knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
encoding = getOption("encoding"), publish = TRUE)
{
out = knit(input, encoding = encoding)
on.exit(unlink(out))
con = file(out, encoding = encoding)
on.exit(close(con), add = TRUE)
content = knitr:::native_encode(readLines(con, warn = FALSE))
content = paste(content, collapse = "\n")
content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
shortcode = rep(shortcode, length.out = 2L)
if (shortcode[1]) {
content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
"[sourcecode language=\"\\1\"]\\2[/sourcecode]",
content)
}
content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
if (shortcode[2])
"[sourcecode]\\2[/sourcecode]"
else "<pre>\\2</pre>", content)
content = knitr:::native_encode(content, "UTF-8")
title = knitr:::native_encode(title, "UTF-8")
return(list(content = content, title=title))
}
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "Adding Cost Functions to ROCR"
mytitle <- folname <- "A small introduction to ROCR"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = FALSE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", shQuote(rmdname)))
}
setwd(file.path(wpdir, folname))
library(pROC)
data(aSAH)
plot.roc(aSAH$outcome, aSAH$s100b, print.thres = my.cutoff)
my.cutoff <- 0.6
library(pROC)
data(aSAH)
plot.roc(aSAH$outcome, aSAH$s100b, print.thres = my.cutoff)
library(knitr)
wp = TRUE
knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
encoding = getOption("encoding"), publish = TRUE)
{
out = knit(input, encoding = encoding)
on.exit(unlink(out))
con = file(out, encoding = encoding)
on.exit(close(con), add = TRUE)
content = knitr:::native_encode(readLines(con, warn = FALSE))
content = paste(content, collapse = "\n")
content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
shortcode = rep(shortcode, length.out = 2L)
if (shortcode[1]) {
content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
"[sourcecode language=\"\\1\"]\\2[/sourcecode]",
content)
}
content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
if (shortcode[2])
"[sourcecode]\\2[/sourcecode]"
else "<pre>\\2</pre>", content)
content = knitr:::native_encode(content, "UTF-8")
title = knitr:::native_encode(title, "UTF-8")
return(list(content = content, title=title))
}
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "Adding Cost Functions to ROCR"
mytitle <- folname <- "A small introduction to ROCR"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = FALSE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", shQuote(rmdname)))
}
setwd(file.path(wpdir, folname))
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#     opts_knit$set(
#       base.url = paste0(
#         'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                   base.dir = wpdir)
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
#   input = rmdname
#   title = mytitle
#   shortcode= TRUE
#   encoding = getOption("encoding")
#   debug({knit2wp(rmdname,
#           title = mytitle, categories = categories,
#           publish=FALSE)})
x = knit2wp2(input = rmdname,
title = mytitle, categories = categories,
shortcode=c(TRUE, TRUE),
publish=publish)
#
writeLines(text =x$content, con=gsub("[.]Rmd$", ".html", rmdname))
}
library(knitr)
wp = TRUE
knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
encoding = getOption("encoding"), publish = TRUE)
{
out = knit(input, encoding = encoding)
on.exit(unlink(out))
con = file(out, encoding = encoding)
on.exit(close(con), add = TRUE)
content = knitr:::native_encode(readLines(con, warn = FALSE))
content = paste(content, collapse = "\n")
content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
shortcode = rep(shortcode, length.out = 2L)
if (shortcode[1]) {
content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
"[sourcecode language=\"\\1\"]\\2[/sourcecode]",
content)
}
content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
if (shortcode[2])
"[sourcecode]\\2[/sourcecode]"
else "<pre>\\2</pre>", content)
content = knitr:::native_encode(content, "UTF-8")
title = knitr:::native_encode(title, "UTF-8")
return(list(content = content, title=title))
}
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "Adding Cost Functions to ROCR"
mytitle <- folname <- "A small introduction to ROCR"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = FALSE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", shQuote(rmdname)))
}
setwd(file.path(wpdir, folname))
######### Send it to the Website
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#     opts_knit$set(
#       base.url = paste0(
#         'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                   base.dir = wpdir)
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
#   input = rmdname
#   title = mytitle
#   shortcode= TRUE
#   encoding = getOption("encoding")
#   debug({knit2wp(rmdname,
#           title = mytitle, categories = categories,
#           publish=FALSE)})
x = knit2wp2(input = rmdname,
title = mytitle, categories = categories,
shortcode=c(TRUE, TRUE),
publish=publish)
#
writeLines(text =x$content, con=gsub("[.]Rmd$", ".html", rmdname))
}
dir("figure")
system("open ./")
knit("A_small_introduction_to_ROCR.Rmd")
knit("A_small_introduction_to_ROCR.Rmd")
