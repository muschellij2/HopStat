r2 = round2.sp[, list(spid, hc2disescn8)]
rounds = r1[r2]
rounds
rounds[, table(hc1disescn8, hc2disescn8)]
dim(r1)
dim(t2)
dim(r2)
rounds = merge(r1, r2, all=TRUE)
head(rounds)
rounds
rounds[, table(hc1disescn8, hc2disescn8, useNA = "ifany")]
rounds[, table(hc1disescn8, useNA = "ifany")]
rounds[, table(hc2disescn8, useNA = "ifany")]
head(round1.op)
head(rounds)
round1.sp = data$NHATS_Round_1_SP_File
round2.sp = data$NHATS_Round_2_SP_File_v2
round1.sp.labels = data$NHATS_Round_1_SP_File_labels
round2.sp.labels = data$NHATS_Round_2_SP_File_v2_labels
round1.op = data$NHATS_Round_1_OP_File_v2
round2.op = data$NHATS_Round_2_OP_File_v2
round1.op.labels = data$NHATS_Round_1_OP_File_v2_labels
round2.op.labels = data$NHATS_Round_2_OP_File_v2_labels
round1.sp.labels[grep("STROKE", round1.sp.labels$varlab),]
round2.sp.labels[grep("STROKE", round2.sp.labels$varlab),]
r1 = round1.sp[, list(spid, hc1disescn8)]
r2 = round2.sp[, list(spid, hc2disescn8, fl2spdied)]
rounds = merge(r1, r2, all=TRUE)
head(rounds)
head(rounds, 20)
dim(rounds)
rounds = rounds[order(spid),]
head(rounds)
head(rounds, 20)
(72-52.1)/sqrt(25)
(72-52.1)/sqrt(25/100)
(72-52.1)/sqrt(25)
pnorm((72-52.1)/sqrt(25))
pnorm((72-52.1)/sqrt(25), lower.tail = FALSE)
pnorm((72-52.1)/sqrt(25), lower.tail = FALSE)* 100
pnorm((72-52.1)/25, lower.tail = FALSE)* 100
pnorm((72-52.1)/25, lower.tail = FALSE)* 100
(72-52.1)/25
pnorm((72-52.1)/25, lower.tail = FALSE)
pnorm(0.8, lower.tail =FALSE)
pnorm(0.8, lower.tail =FALSE)*100
rounds
77-52.1
(77-52.1)/25
pnorm((77-52.1)/25, lower.tail=FALSE)
pnorm((77-52.1)/25, lower.tail=FALSE)*100
rounds
data$NHATS_Round_1_Tracker_File_labels
head(data$NHATS_Round_2_Tracker_File_v2)
table(data$NHATS_Round_2_Tracker_File_v2$yearsample)
table(data$NHATS_Round_2_Tracker_File_v2$yearsample, useNA = "ifany")
table(data$NHATS_Round_1_Tracker_File$r1status)
table(data$NHATS_Round_1_Tracker_File$r1status, useNA = "ifany")
sum(grepl("Complete", data$NHATS_Round_1_Tracker_File$r1status))
r1 = round1.sp[, list(spid, hc1disescn8, r1status)]
r2 = round2.sp[, list(spid, hc2disescn8, r2status, fl2spdied)]
round1.sp = data$NHATS_Round_1_SP_File
round1.sp.labels = data$NHATS_Round_1_SP_File_labels
round2.sp = data$NHATS_Round_2_SP_File_v2
round2.sp.labels = data$NHATS_Round_2_SP_File_v2_labels
round1.op = data$NHATS_Round_1_OP_File_v2
round1.op.labels = data$NHATS_Round_1_OP_File_v2_labels
round2.op = data$NHATS_Round_2_OP_File_v2
round2.op.labels = data$NHATS_Round_2_OP_File_v2_labels
round1.t = data$NHATS_Round_1_Tracker_File
round1.t.labels = data$NHATS_Round_1_Tracker_File_labels
round2.t = data$NHATS_Round_2_Tracker_File_v2
round2.t.labels = data$NHATS_Round_2_Tracker_File_v2_labels
round1.sp.labels[grep("STROKE", round1.sp.labels$varlab),]
round2.sp.labels[grep("STROKE", round2.sp.labels$varlab),]
r1 = round1.sp[, list(spid, hc1disescn8)]
r1.status = round2.t[list(spid, r1status)]
r2 = round2.sp[, list(spid, hc2disescn8, fl2spdied)]
r2.status = round2.t[list(spid, r2status)]
round1.sp = data$NHATS_Round_1_SP_File
round1.sp.labels = data$NHATS_Round_1_SP_File_labels
round2.sp = data$NHATS_Round_2_SP_File_v2
round2.sp.labels = data$NHATS_Round_2_SP_File_v2_labels
round1.op = data$NHATS_Round_1_OP_File_v2
round1.op.labels = data$NHATS_Round_1_OP_File_v2_labels
round2.op = data$NHATS_Round_2_OP_File_v2
round2.op.labels = data$NHATS_Round_2_OP_File_v2_labels
round1.t = data$NHATS_Round_1_Tracker_File
round1.t.labels = data$NHATS_Round_1_Tracker_File_labels
round2.t = data$NHATS_Round_2_Tracker_File_v2
round2.t.labels = data$NHATS_Round_2_Tracker_File_v2_labels
round1.sp.labels[grep("STROKE", round1.sp.labels$varlab),]
round2.sp.labels[grep("STROKE", round2.sp.labels$varlab),]
r1 = round1.sp[, list(spid, hc1disescn8)]
r1.status = round2.t[list(spid, r1status)]
r2 = round2.sp[, list(spid, hc2disescn8, fl2spdied)]
r2.status = round2.t[list(spid, r2status)]
r1.status
r1.status = round1.t[list(spid, r1status)]
r2 = round2.sp[, list(spid, hc2disescn8, fl2spdied)]
r2.status = round2.t[list(spid, r2status)]
r2.status
r1.status = round1.t[, list(spid, r1status)]
round1.sp = data$NHATS_Round_1_SP_File
round1.sp.labels = data$NHATS_Round_1_SP_File_labels
round2.sp = data$NHATS_Round_2_SP_File_v2
round2.sp.labels = data$NHATS_Round_2_SP_File_v2_labels
round1.op = data$NHATS_Round_1_OP_File_v2
round1.op.labels = data$NHATS_Round_1_OP_File_v2_labels
round2.op = data$NHATS_Round_2_OP_File_v2
round2.op.labels = data$NHATS_Round_2_OP_File_v2_labels
round1.t = data$NHATS_Round_1_Tracker_File
round1.t.labels = data$NHATS_Round_1_Tracker_File_labels
round2.t = data$NHATS_Round_2_Tracker_File_v2
round2.t.labels = data$NHATS_Round_2_Tracker_File_v2_labels
round1.sp.labels[grep("STROKE", round1.sp.labels$varlab),]
round2.sp.labels[grep("STROKE", round2.sp.labels$varlab),]
r1 = round1.sp[, list(spid, hc1disescn8)]
r1.status = round1.t[, list(spid, r1status)]
r2 = round2.sp[, list(spid, hc2disescn8, fl2spdied)]
r2.status = round2.t[, list(spid, r2status)]
r2.status
round1.sp = data$NHATS_Round_1_SP_File
round1.sp.labels = data$NHATS_Round_1_SP_File_labels
round2.sp = data$NHATS_Round_2_SP_File_v2
round2.sp.labels = data$NHATS_Round_2_SP_File_v2_labels
round1.op = data$NHATS_Round_1_OP_File_v2
round1.op.labels = data$NHATS_Round_1_OP_File_v2_labels
round2.op = data$NHATS_Round_2_OP_File_v2
round2.op.labels = data$NHATS_Round_2_OP_File_v2_labels
round1.t = data$NHATS_Round_1_Tracker_File
round1.t.labels = data$NHATS_Round_1_Tracker_File_labels
round2.t = data$NHATS_Round_2_Tracker_File_v2
round2.t.labels = data$NHATS_Round_2_Tracker_File_v2_labels
round1.sp.labels[grep("STROKE", round1.sp.labels$varlab),]
round2.sp.labels[grep("STROKE", round2.sp.labels$varlab),]
r1 = round1.sp[, list(spid, hc1disescn8)]
r1.status = round1.t[, list(spid, r1status)]
r2 = round2.sp[, list(spid, hc2disescn8, fl2spdied)]
r2.status = round2.t[, list(spid, r2status)]
r1 = merge(r1, r1.status, all=TRUE)
r2 = merge(r2, r2.status, all=TRUE)
rounds = merge(r1, r2, all=TRUE)
rounds = rounds[order(spid),]
head(rounds)
have.round1 = grepl("Complete", rounds$r1status)
have.round1
sum(have.round1)
have.round1
data = rounds[which(have.round1), ]
head(daata)
head(data)
####################################
# Subset Round 1 for comorbidities, age, gender, marital, stroke, etc.
####################################
r1 = round1.sp[, list(spid,
r1dgender, r1d2intvrage,
hh1martlstat, rl1dracehisp,
r1dresid,
hc1disescn1, hc1disescn2,
hc1disescn3, hc1disescn4,
hc1disescn5, hc1disescn6,
hc1disescn7, hc1disescn8)]
r1.status = round1.t[, list(spid, r1status)]
####################################
# Subset Round 2 for stroke/died
# May wnat time to death
####################################
r2 = round2.sp[, list(spid,
fl2spdied,
hc2disescn1, hc2disescn2,
hc2disescn3, hc2disescn4,
hc2disescn5, hc2disescn6,
hc2disescn7, hc2disescn8)]
r2.status = round2.t[, list(spid, r2status)]
r1 = merge(r1, r1.status, all=TRUE)
r2 = merge(r2, r2.status, all=TRUE)
head(r1)
head(r2)
rounds = merge(r1, r2, all=TRUE)
rounds = rounds[order(spid),]
have.round1 = grepl("Complete", rounds$r1status)
data = rounds[which(have.round1), ]
head(data)
head(data$hc2disescn8)
table(data$hc2disescn8)
table(data$hc1disescn8)
stroke1 = data[grep("YES", data$hc1disescn8),]
stroke1
rm(list=ls())
library(plyr)
library(R.utils)
library(reshape2)
library(data.table)
homedir = path.expand("~/NHATS")
datadir = file.path(homedir, "data")
resdir = file.path(homedir, "programs")
load(file= file.path(datadir, "All_Data.Rda"))
top = function(x, n = 6L){
stopifnot(length(n) == 1L)
stopifnot(n > 0)
nc = min(ncol(x), n)
nr = min(nrow(x), n)
x = x[seq_len(nr), seq_len(nc), drop = FALSE]
x
}
# names.data = names(data)
# for (iname in names.data){
#   assign(iname, data[[iname]])
# }
round1.sp = data$NHATS_Round_1_SP_File
round1.sp.labels = data$NHATS_Round_1_SP_File_labels
round2.sp = data$NHATS_Round_2_SP_File_v2
round2.sp.labels = data$NHATS_Round_2_SP_File_v2_labels
round1.op = data$NHATS_Round_1_OP_File_v2
round1.op.labels = data$NHATS_Round_1_OP_File_v2_labels
round2.op = data$NHATS_Round_2_OP_File_v2
round2.op.labels = data$NHATS_Round_2_OP_File_v2_labels
round1.t = data$NHATS_Round_1_Tracker_File
round1.t.labels = data$NHATS_Round_1_Tracker_File_labels
round2.t = data$NHATS_Round_2_Tracker_File_v2
round2.t.labels = data$NHATS_Round_2_Tracker_File_v2_labels
####################################
# Get the variable for stroke
####################################
round1.sp.labels[grep("STROKE", round1.sp.labels$varlab),]
round2.sp.labels[grep("STROKE", round2.sp.labels$varlab),]
####################################
# Subset Round 1 for comorbidities, age, gender, marital, stroke, etc.
####################################
r1 = round1.sp[, list(spid,
r1dgender, r1d2intvrage,
hh1martlstat, rl1dracehisp,
r1dresid, el1higstschl,
hc1disescn1, hc1disescn2,
hc1disescn3, hc1disescn4,
hc1disescn5, hc1disescn6,
hc1disescn7, hc1disescn8)]
r1.status = round1.t[, list(spid, r1status)]
####################################
# Subset Round 2 for stroke/died
# May wnat time to death
####################################
r2 = round2.sp[, list(spid,
fl2spdied,
hc2disescn1, hc2disescn2,
hc2disescn3, hc2disescn4,
hc2disescn5, hc2disescn6,
hc2disescn7, hc2disescn8)]
r2.status = round2.t[, list(spid, r2status)]
r1 = merge(r1, r1.status, all=TRUE)
r2 = merge(r2, r2.status, all=TRUE)
rounds = merge(r1, r2, all=TRUE)
rounds = rounds[order(spid),]
have.round1 = grepl("Complete", rounds$r1status)
data = rounds[which(have.round1), ]
stroke1 = data[grep("YES", data$hc1disescn8),]
s1 = stroke1[,  list(spid,
r1dgender, r1d2intvrage,
hh1martlstat, rl1dracehisp,
r1dresid, el1higstschl,
hc1disescn1, hc1disescn2,
hc1disescn3, hc1disescn4,
hc1disescn5, hc1disescn6,
hc1disescn7, hc1disescn8)]
s1
table(s1$hc1disescn3)
library(fslr)
fsldir()
source('~/.active-rstudio-document', echo=TRUE)
fup_t1file
fup_t1file = file.path(datadir,
"01-Followup_T1_FSL_BiasCorrect_rigid_to_BaseT1")
fup_t1_reg = readNIfTI(fup_t1file, reorient=FALSE)
fup_t1_reg[base_t1_mask == 0] = 0
diff.img = niftiarr(base_t1_1, fup_t1_reg - base_t1_1)
dat = data.frame(fup = c(fup_t1_reg), base = c(base_t1), mask = c(base_t1_mask))
dat = dat[ dat$mask == 1, ]
dat$mask = NULL
## subsample for plotting
dat = dat[ sample(nrow(dat), 10000), ]
q = qplot(x=base, y=fup, data=dat,
xlab = "Baseline Bias-Corrected T1 Values (a.u.)",
ylab = "Followup Bias-Corrected T1 Values (a.u.)",
geom= c("point", "smooth"),
main='T1 Values: Baseline vs Followup',
se=FALSE, alpha= I(0.2)) +
geom_abline(intercept = 0, slope =1, col="red")
d = data.frame(label="C")
tsize = 16
plotx = round(max(dat$base) - 25)
q  + geom_text(data=d, x= plotx, y=25, size=20,
aes(label=label), colour="black") +
theme(legend.position = c(.5, .75),
legend.background = element_rect(fill="transparent"),
legend.key = element_rect(fill="transparent",
color="transparent"),
legend.text = element_text(size=tsize+2),
legend.title = element_text(size=tsize),
title = element_text(size=tsize),
plot.title = element_text(hjust = 0.8),
strip.text = element_text(size = tsize+4),
axis.text  = element_text(size=tsize-2))
pngname = file.path(resdir, "T1_Diff_Img.png")
png(pngname)
diff.img[base_t1_mask == 0] = NA
orthographic(diff.img, text = "A\n Difference\nT1 Image",
text.cex = 3)
dev.off()
pngname = file.path(resdir, "T1_Diff_Img_Col.png")
library(RColorBrewer)
cdiff = c(diff.img[base_t1_mask == 1])
quants = quantile(cdiff, probs = seq(0, 1, by=0.1))
cuts = cut(cdiff, breaks=quants, include.lowest = TRUE)
numcuts = as.numeric(cuts)
dimg = diff.img
dimg[base_t1_mask == 1] = numcuts
dimg = cal_img(dimg)
png(pngname)
orthographic(dimg, text = "A\n Difference\nT1 Image",
text.cex = 3, col =
rev(brewer.pal(n = 11, name = "RdBu")))
dev.off()
pngname = file.path(resdir, "T1_Diff_Hist.png")
png(pngname)
options(scipen=8)
hist(cdiff, breaks=200,
main = "Histogram of Followup - Baseline T1 Image",
xlab = "Followup - Baseline T1 Image (a.u.)", las=1)
dev.off()
base_z = base_t1_1
vals = fup_z[base_t1_mask == 1]
base_z = cal_img( (base_z - mean(vals)) / sd(vals))
fup_z = fup_t1_reg
vals = fup_z[base_t1_mask == 1]
fup_z = cal_img( (fup_z - mean(vals)) / sd(vals))
diff.z = niftiarr(base_t1_1, fup_z - base_z)
diff.z[base_t1_mask == 0] = NA
orthographic(diff.z)
base_z = base_t1_1
vals = base_z[base_t1_mask == 1]
base_z = cal_img( (base_z - mean(vals)) / sd(vals))
fup_z = fup_t1_reg
vals = fup_z[base_t1_mask == 1]
fup_z = cal_img( (fup_z - mean(vals)) / sd(vals))
diff.z = niftiarr(base_t1_1, fup_z - base_z)
diff.z[base_t1_mask == 0] = NA
orthographic(diff.z)
thresh.img = t1
thresh.img = (thresh.img - mean(thresh.img))/sd(thresh.img)
thresh.img[thresh.img < 2] = 0
thresh.img = cal_img(thresh.img)
orthographic(thresh.img)
thresh.img
hist(c(thresh.img))
smooth.thresh = fslsmooth(thresh.img, sigma = 4, retimg=TRUE)
orthographic(smooth.thresh)
smooth = fslsmooth(diff.img, sigma = 5, retimg=TRUE)
smooth[base_t1_mask == 0] = NA
orthographic(smooth)
smooth = fslsmooth(diff.img, sigma = 3, retimg=TRUE)
smooth[base_t1_mask == 0] = NA
orthographic(smooth)
cdiff = c(smooth[base_t1_mask == 1])
quants = quantile(cdiff, probs = seq(0, 1, by=0.1))
cuts = cut(cdiff, breaks=quants, include.lowest = TRUE)
numcuts = as.numeric(cuts)
dimg = smooth
dimg[base_t1_mask == 1] = numcuts
dimg = cal_img(dimg)
orthographic(dimg, text = "A\n Difference\nT1 Image",
text.cex = 3, col =
rev(brewer.pal(n = 11, name = "RdBu")))
library(ctools)
library(cttools)
ortho2
library(gplot)
library(gplots)
?gplots
?heatmap.2
?conf.int
library(binom)
binom.confint(x = 20, n = 34)
source('~/.active-rstudio-document', echo=TRUE)
voi = make_img_voi(base_MNI.img)
voi
hist(voi)
hist(voi, breaks=2000)
voi = make_img_voi(fup_MNI.img)
hist(voi, breaks=2000)
orthographic(fup_MNI.img)
img = fup_MNI.img
range(fup_MNI.file)
range(fup_MNI.img)
for (islice in 80:120) img@.Data[,,islice] = array(400, dim=dim(img)[1:2])
img = cal_img(img)
orthographic(img)
xx = c(fup_MNI.img[,,80:120])
xx
hist(xx)
hist(xx[xx > 0])
hist(xx[xx > 0], breaks = 2000)
hist(xx[xx > 5], breaks = 2000)
mean(xx)
hist(xx[xx > 19], breaks = 2000)
hist(voi, breaks = 2000)
fup.w
fup.ws = whitestripe(fup_MNI.img, type = "T1")
fup.ws
hist(voi, breaks = 2000, fill="green")
hist(voi, breaks = 2000, border="green")
hist(voi, breaks = 2000, border="green")
fup.ws$mu.whitestripe
abline(v=fup.ws$mu.whitestripe)
abline(v=fup.ws$whitestripe)
cimg = c(img)
cimg = c(fup_MNI.img)
hist(cimg[cimg > 10], breaks=2000)
orthographic(fup_MNI.img, cal_img(fup_MNI.img> 55))
orthographic(fup_MNI.img, cal_img(fup_MNI.img> 80))
fup.ws$whitestripe
orthographic(fup_MNI.img, niftiarr(fup_MNI.img, fup_MNI.img> 47.759 & fup_MNI.img<49.6))
ortho2(fup_MNI.img, niftiarr(fup_MNI.img, fup_MNI.img> 47.759 & fup_MNI.img<49.6))
library(ctools)
library(cttools)
mask.overlay(fup_MNI.img, niftiarr(fup_MNI.img, fup_MNI.img> 47.759 & fup_MNI.img<49.6))
ortho2(fup_MNI.img, niftiarr(fup_MNI.img, fup_MNI.img>30 & fup_MNI.img<40))
ortho2(fup_MNI.img, niftiarr(fup_MNI.img, fup_MNI.img>40 & fup_MNI.img<50))
voi = make_img_voi(fup_MNI.img)
hist(voi)
img = readNIfTI("/Users/johnmuschelli/Dropbox/FSLR/data/01-Followup_T1.nii.gz")
hist(c(img))
hig(img)
hist(img)
hist(img, breaks=2000)
q = quantile(c(img), probs = seq(0, 1, by=0.05))
q
q = quantile(c(img), probs = seq(0, 1, by=0.01))
q
img[img > 119] = 0
img = cal_img(img)
hist(img, breaks=2000)
hist(img, breaks=200)
hist(c(img), breaks=200)
img
cal_img
min(img)
max(img)
orthographic(img)
dim(img)
122/2
i2 = img
for (islice in 50:70) i2@.Data[,,islice] = array(200, dim=dim(img)[1:2])
i2 = cal_img(i2)
orthographic(i2)
for (islice in 50:80) i2@.Data[,,islice] = array(200, dim=dim(img)[1:2])
orthographic(i2)
voi = c(img[,,50:80])
hist(voi)
hist(voi, breaks=2000)
make_img_voi
voi = make_img_voi(img, slices = 50:80)
hist(voi)
hist(voi, breaks=2000)
img = readNIfTI("/Users/johnmuschelli/Dropbox/FSLR/data/01-Followup_T1_N3Correct.nii.gz")
voi2 = make_img_voi(img, slices = 50:80)
hist(voi2, breaks=2000)
ortho2(img)
img = cal_img(img)
ortho2(img)
?robust_window
robust_window(img)
robust_window
i2 = robust_window(img)
ortho2(i2)
voi3 = make_img_voi(i2, slices = 50:80)
hist(voi3)
hist(voi3, breaks=2000)
i2 = robust_window(img, replace = "missing")
voi3 = make_img_voi(i2, slices = 50:80)
hist(voi3, breaks=2000)
class(voi3)
ws = whitestripe(voi)
ws = whitestripe(voi3)
ws = whitestripe(voi3, type="T1")
ws
ws = whitestripe(voi3, type="T1", slices = 50:80)
library(fslr)
?invwarp
library(cttools)
?v
?invwarp
library(ANTsR)
?tempimg
tempimg
tempimg
?N3BiasFieldCorrection
?antsRegistration
library(fslr)
?onefile
onefile
setwd("~/Dropbox/Public/WordPress_Hopstat/Working_with_NIfTI_images_in_R/")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pct3
all.equal(pct3, pct2)
hist(pct2)
hist(pct3)
hist(pct)
