############################
scan_time = read.csv(file.path(datadir, "Scan_Times.csv"), as.is=TRUE)
cn = colnames(scan_time)
scan_time = scan_time[ , !cn %in% c("X", paste0("X.", 1:9))]
scan_time = rename(scan_time,
c("Patient.ID"="patientName",
"ID"="Patient_ID"
))
cn = colnames(scan_time)
keep = grep("ime|volu|atient", cn, value=TRUE)
scan_time = scan_time[, keep]
x = scan_time$Date.time.CT.EOT
bad_time = function(x){
bad = grepl(".*/.*/.*/.*", x)
x[bad ] = gsub("(.*)/(.*)", "\\1 \\2", x[bad])
ss = strsplit(x, split="/")
x = sapply(ss, function(xx){
xx = gsub("\\s{2,}", " ", xx)
xx[3] = gsub("^20", "", xx[3])
xx[3] = paste0("20", xx[3])
ss2 = strsplit(xx[3], split=" ")[[1]]
#     print(ss2)
if (nchar(ss2[2]) < 5){
ss2[2] =paste0("0", ss2[2])
}
#     ss2[2] = paste0(ss2[2], ":00")
xx[3] = paste(ss2, sep="", collapse=" ")
xx = paste(xx, sep="", collapse="/")
xx
})
x= as.POSIXct(x, format = "%m/%d/%Y %H:%M")
stopifnot(all(!is.na(x)))
x
}
scan_time$Date.time.Diagnostic.CT =bad_time(
scan_time$Date.time.Diagnostic.CT)
scan_time$Date.Time.CT.BSL = bad_time(
scan_time$Date.Time.CT.BSL)
scan_time$Date.time.CT.EOT = bad_time(
scan_time$Date.time.CT.EOT)
scan_time$Date.Time.MR.EOT = bad_time(
scan_time$Date.Time.MR.EOT)
scan_time$Date.Time.MR.BSL = bad_time(
scan_time$Date.Time.MR.BSL)
scan_time = rename(scan_time,
c("Date.time.Diagnostic.CT"="DT_Dx_CT",
"Diagnostic.CT.ICH.volume"="Vol_Dx_CT",
"Date.Time.MR.BSL"="DT_Base_MR",
"Date.Time.CT.BSL"="DT_Base_CT",
"CT.ICH.volume.BSL"="Vol_Base_CT",
"Date.Time.MR.EOT"="DT_EOT_MR",
"Date.time.CT.EOT"="DT_EOT_CT",
"CT.ICH.volume.EOT"="Vol_EOT_CT"
))
scan_time$Diff_Time_MR = scan_time$DT_EOT_MR - scan_time$DT_Base_MR
############################
# Scan Data
############################
scan_data = read.csv(file.path(datadir, "Scan_Data.csv"), as.is=TRUE)
scan_data = rename(scan_data,
c("Patient.ID"="patientName",
"ID"="Patient_ID",
"Adjudicated"="Day1_Adjudicated",
"Adjudicated.1"="Day7_Adjudicated"
))
scan_data$Day1_Average = (scan_data$Day1_Andrew + scan_data$Day1_Braeden)/2
scan_data$Day7_Average = (scan_data$Day7_Andrew + scan_data$Day7_Braeden)/2
scan_data$Diff_Andrew = scan_data$Day7_Andrew - scan_data$Day1_Andrew
scan_data$Ratio_Andrew = scan_data$Day7_Andrew / scan_data$Day1_Andrew
# scan_data$DRatio_Andrew = scan_data$Diff_Andrew / scan_data$Day1_Andrew
scan_data$Diff_Braeden = scan_data$Day7_Braeden - scan_data$Day1_Braeden
scan_data$Ratio_Braeden = scan_data$Day7_Braeden / scan_data$Day1_Braeden
# scan_data$DRatio_Braeden = scan_data$Diff_Braeden / scan_data$Day1_Braeden
scan_data$Diff_Average = scan_data$Day7_Average - scan_data$Day1_Average
scan_data$Ratio_Average = scan_data$Day7_Average / scan_data$Day1_Average
############################
# Reshaping for plotting
############################
readers = c("Andrew", "Braeden", "Average")
long = scan_data[, c("patientName",
paste0("Day1_", readers),
paste0("Day7_", readers),
paste0("Diff_", readers),
#                      paste0("DRatio_", c("Andrew", "Braeden")),
paste0("Ratio_", readers)
)]
long = melt(long, id.var="patientName")
long$day = gsub("(.*)_(.*)", "\\1", long$variable)
long$reader = gsub("(.*)_(.*)", "\\2", long$variable)
long$variable = NULL
############################
# Demographics - group and gender/age
############################
demog = read.csv(file.path(datadir, "Enrolled_Subject_All_Baseline.csv"),
as.is=TRUE)
head(demog)
cn = colnames(demog)
cn = sort(tolower(cn))
cn
grep("ns", cn)
grep("ns", cn, value=TRUE
)
source('~/Dropbox/ADC_ISC_2015/programs/Read_In_Data.R')
source('~/.active-rstudio-document', echo=TRUE)
tiems
times
wt = wilcox.test(Diff_Time_MR ~ Group_Assigned, data=times)
times$days = as.numeric(times$Diff_Time_MR)
times
times$days = as.numeric(times$Diff_Time_MR)
wt = wilcox.test(days ~ Group_Assigned, data=times)
wt
aggregate(days ~ Group_Assigned, data=times, summarise,
mean=mean(days),
median = median(days)
)
ddply(times, .(Group_Assigned), summarise,
mean=mean(days),
median = median(days)
)
times$days = as.numeric(times$Diff_Time_MR)
wt = wilcox.test(days ~ Group_Assigned, data=times)
days = ddply(times, .(Group_Assigned), summarise,
mean=mean(days),
sd = sd(days),
median = median(days),
min = min(days),
max= max(days)
)
days
rownames(days) = days$Group_Assigned
times$days = as.numeric(times$Diff_Time_MR)
wt = wilcox.test(days ~ Group_Assigned, data=times)
days = ddply(times, .(Group_Assigned), summarise,
mean=mean(days),
sd = sd(days),
median = median(days),
min = min(days),
max= max(days)
)
rownames(days) = days$Group_Assigned
days$Group_Assigned = NULL
days = round(days, 3)
days
source('~/.active-rstudio-document', echo=TRUE)
head(times$Vol_Base_CT)
wt.vol = wilcox.test(Vol_Base_CT ~ Group_Assigned, data=times)
vol = ddply(times, .(Group_Assigned), summarise,
mean=mean(Vol_Base_CT),
sd = sd(Vol_Base_CT),
median = median(Vol_Base_CT),
min = min(Vol_Base_CT),
max= max(Vol_Base_CT)
)
rownames(vol) = days$Group_Assigned
vol$Group_Assigned = NULL
vol = round(vol, 2)
wt.vol
wt.day
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
wt.vol
wt.day
vol
source('~/.active-rstudio-document', echo=TRUE)
tt.vol
tt.day
tt.vol
source('~/.active-rstudio-document', echo=TRUE)
dat
wt.vol = wilcox.test(Vol_Base_CT ~ Group_Assigned, data=times)
tt.vol = t.test(Vol_Base_CT ~ Group_Assigned, data=times)
vol = ddply(times, .(Group_Assigned), summarise,
mean=mean(Vol_Base_CT),
sd = sd(Vol_Base_CT),
median = median(Vol_Base_CT),
min = min(Vol_Base_CT),
max= max(Vol_Base_CT)
)
rownames(vol) = days$Group_Assigned
vol$Group_Assigned = NULL
vol = round(vol, 2)
vol
source('~/.active-rstudio-document', echo=TRUE)
times = merge(data[, c("patientName", "Diff_Average")], times, all.x=TRUE)
head(times)
g = ggplot(times, aes(x=days, y=Diff_Average, colour=Group_Assigned)) +
geom_point() + geom_smooth()
print(g)
makegbox
g = ggplot(times, aes(x=rate, y=Group_Assigned)) + geom_boxplot()
g
times$rate = times$Diff_Average / times$days
g = ggplot(times, aes(x=rate, y=Group_Assigned)) + geom_boxplot()
g
g = ggplot(times, aes(y=rate, x=Group_Assigned)) + geom_boxplot()
g
install.packages("CausalImpact")
library(fslr)
help(package="fslr")
fslmaths.help()
options(fsl.path="/usr/local/fsl/bin")
fslmaths.help()
options(fsl.path="/usr/local/fsl")
fslmaths.help()
fslmaths.help()
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Converting_LaTeX_to_MS_Word"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
mytitle <- gsub("_", " ", folname)
categories = c("bmorebiostats")
# categories = "rbloggers"
# categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", rmdname))
setwd(file.path(wpdir, folname))
}
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#   opts_knit$set(
#     base.url = paste0(
#       'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                 base.dir = wpdir)
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
#   input = rmdname
#   title = mytitle
#   shortcode= TRUE
#   encoding = getOption("encoding")
knit2wp(rmdname,
title = mytitle, categories = categories,
shortcode=TRUE,
publish=publish)
}
rm(list=ls())
api_key = "d90fdaff7eae3dec932ab23313c54da"
library(XML)
library(RJSONIO)
library(stringr)
service_code = "4e39a3abd3e2c20ed800001d"
u <- paste0("http://311.baltimorecity.gov/open311/v2/requests.json?api_key=", api_key,
"8&jurisdiction_id=baltimorecity.gov&service_code=", service_code)
## test data set
ff <- url(u)
#ff <- url()
x <- readLines(ff)
close(ff)
J <- fromJSON(x, asText=TRUE )
cnames <- c("service_request_id", "token", "status","service_name", "service_code",
"description", "requested_datetime", "updated_datetime", "lat", "long",
"address", "status_notes", "media_url")
J <- lapply(J, function(x) {
if (! "address" %in% names(x)) x <- c(x, address=NA)
if (! "status_notes" %in% names(x)) x <- c(x, status_notes=NA)
#	x <- x[!names(x) %in% "media_url"]
x <- x[cnames]
x
})
data <- data.frame(do.call("rbind", J), stringsAsFactors=FALSE)
colnames(data) <- cnames
for (icol in cnames) {
x <- data[, icol]
if (class(x) == "list") {
#print(icol)
x <- sapply(x, function(dd) ifelse(is.null(dd), NA, dd))
data[, icol] <- unlist(x)
}
data[,icol][data[,icol] == ""] <- NA
}
data$description <- str_trim(data$description)
data$address <- toupper(data$address)
data$description <- toupper(data$description)
#ss <- strsplit(data$)
pot <- data[grepl("OMBARD", data$address) | grepl("OLLING", data$address) |
grepl("OMBARD", data$description) | grepl("OLLING", data$description) |
grepl("ANN", data$description) | grepl("BROADWAY", data$description) |
grepl("PRATT", data$description) | grepl("BLUE", data$description) |
grepl("TRUCK", data$description) |
is.na(data$description), c("status", "description", "address", "updated_datetime",
"requested_datetime", "status_notes", "media_url")]
pot$Req_Date <- as.Date(substr(pot$requested_datetime, 1, 10), "%Y-%m-%d")
pot$Req_Year <- as.numeric(substr(pot$requested_datetime, 1, 4))
pot <- pot[!(pot$status %in% "closed"), ]
pot <- pot[!grepl("MOTORCYCLE", pot$description) | !grepl("SONATA", pot$description), ]
#pot <- pot[pot$status == "open", ]
print(pot)
#print(head(pot))
pot
rm(list=ls())
api_key = "d90fdaff7eae3dec932ab23313c54da"
library(XML)
library(RJSONIO)
library(stringr)
service_code = "4e39a3abd3e2c20ed800001d"
u <- paste0("http://311.baltimorecity.gov/open311/v2/requests.json?api_key=", api_key,
"8&jurisdiction_id=baltimorecity.gov&service_code=", service_code)
## test data set
ff <- url(u)
#ff <- url()
x <- readLines(ff)
close(ff)
J <- fromJSON(x, asText=TRUE )
cnames <- c("service_request_id", "token", "status","service_name", "service_code",
"description", "requested_datetime", "updated_datetime", "lat", "long",
"address", "status_notes", "media_url")
J <- lapply(J, function(x) {
if (! "address" %in% names(x)) x <- c(x, address=NA)
if (! "status_notes" %in% names(x)) x <- c(x, status_notes=NA)
#	x <- x[!names(x) %in% "media_url"]
x <- x[cnames]
x
})
data <- data.frame(do.call("rbind", J), stringsAsFactors=FALSE)
colnames(data) <- cnames
for (icol in cnames) {
x <- data[, icol]
if (class(x) == "list") {
#print(icol)
x <- sapply(x, function(dd) ifelse(is.null(dd), NA, dd))
data[, icol] <- unlist(x)
}
data[,icol][data[,icol] == ""] <- NA
}
data$description <- str_trim(data$description)
data$address <- toupper(data$address)
data$description <- toupper(data$description)
#ss <- strsplit(data$)
pot <- data[grepl("OMBARD", data$address) | grepl("OLLING", data$address) |
grepl("OMBARD", data$description) | grepl("OLLING", data$description) |
grepl("ANN", data$description) | grepl("BROADWAY", data$description) |
grepl("PRATT", data$description) | grepl("BLUE", data$description) |
grepl("TRUCK", data$description) |
is.na(data$description), c("status", "description", "address", "updated_datetime",
"requested_datetime", "status_notes", "media_url")]
pot$Req_Date <- as.Date(substr(pot$requested_datetime, 1, 10), "%Y-%m-%d")
pot$Req_Year <- as.numeric(substr(pot$requested_datetime, 1, 4))
pot
pot <- pot[!(pot$status %in% "closed"), ]
pot
pot["56",]
rm(list=ls())
api_key = "d90fdaff7eae3dec932ab23313c54da"
library(XML)
library(RJSONIO)
library(stringr)
service_code = "4e39a3abd3e2c20ed800001d"
u <- paste0("http://311.baltimorecity.gov/open311/v2/requests.json?api_key=", api_key,
"8&jurisdiction_id=baltimorecity.gov&service_code=", service_code)
## test data set
ff <- url(u)
#ff <- url()
x <- readLines(ff)
close(ff)
J <- fromJSON(x, asText=TRUE )
cnames <- c("service_request_id", "token", "status","service_name", "service_code",
"description", "requested_datetime", "updated_datetime", "lat", "long",
"address", "status_notes", "media_url")
J <- lapply(J, function(x) {
if (! "address" %in% names(x)) x <- c(x, address=NA)
if (! "status_notes" %in% names(x)) x <- c(x, status_notes=NA)
#	x <- x[!names(x) %in% "media_url"]
x <- x[cnames]
x
})
data <- data.frame(do.call("rbind", J), stringsAsFactors=FALSE)
colnames(data) <- cnames
for (icol in cnames) {
x <- data[, icol]
if (class(x) == "list") {
#print(icol)
x <- sapply(x, function(dd) ifelse(is.null(dd), NA, dd))
data[, icol] <- unlist(x)
}
data[,icol][data[,icol] == ""] <- NA
}
data$description <- str_trim(data$description)
data$address <- toupper(data$address)
data$description <- toupper(data$description)
#ss <- strsplit(data$)
pot <- data[grepl("OMBARD", data$address) | grepl("OLLING", data$address) |
grepl("OMBARD", data$description) | grepl("OLLING", data$description) |
grepl("ANN", data$description) | grepl("BROADWAY", data$description) |
grepl("PRATT", data$description) | grepl("BLUE", data$description) |
grepl("TRUCK", data$description) |
is.na(data$description), c("status", "description", "address", "updated_datetime",
"requested_datetime", "status_notes", "media_url")]
pot$Req_Date <- as.Date(substr(pot$requested_datetime, 1, 10), "%Y-%m-%d")
pot$Req_Year <- as.numeric(substr(pot$requested_datetime, 1, 4))
pot["56",]
source('~/.active-rstudio-document')
install.packages("packrat")
library(devtoolls)
library(devtools)
devtools::install_github("rstudio/packrat")
?install_github
library(packrat)
?install_github
source('~/Dropbox/Check_311.R')
rm(list=ls())
api_key = "d90fdaff7eae3dec932ab23313c54da"
library(XML)
library(RJSONIO)
library(stringr)
service_code = "4e39a3abd3e2c20ed800001d"
u <- paste0("http://311.baltimorecity.gov/open311/v2/requests.json?api_key=", api_key,
"8&jurisdiction_id=baltimorecity.gov&service_code=", service_code)
## test data set
ff <- url(u)
#ff <- url()
x <- readLines(ff)
close(ff)
J <- fromJSON(x, asText=TRUE )
cnames <- c("service_request_id", "token", "status","service_name", "service_code",
"description", "requested_datetime", "updated_datetime", "lat", "long",
"address", "status_notes", "media_url")
J <- lapply(J, function(x) {
if (! "address" %in% names(x)) x <- c(x, address=NA)
if (! "status_notes" %in% names(x)) x <- c(x, status_notes=NA)
#	x <- x[!names(x) %in% "media_url"]
x <- x[cnames]
x
})
data <- data.frame(do.call("rbind", J), stringsAsFactors=FALSE)
colnames(data) <- cnames
for (icol in cnames) {
x <- data[, icol]
if (class(x) == "list") {
#print(icol)
x <- sapply(x, function(dd) ifelse(is.null(dd), NA, dd))
data[, icol] <- unlist(x)
}
data[,icol][data[,icol] == ""] <- NA
}
data$description <- str_trim(data$description)
data$address <- toupper(data$address)
data$description <- toupper(data$description)
#ss <- strsplit(data$)
pot <- data[grepl("OMBARD", data$address) | grepl("OLLING", data$address) |
grepl("OMBARD", data$description) | grepl("OLLING", data$description) |
grepl("ANN", data$description) | grepl("BROADWAY", data$description) |
grepl("PRATT", data$description) | grepl("BLUE", data$description) |
grepl("TRUCK", data$description) |
is.na(data$description), c("status", "description", "address", "updated_datetime",
"requested_datetime", "status_notes", "media_url")]
pot$Req_Date <- as.Date(substr(pot$requested_datetime, 1, 10), "%Y-%m-%d")
pot$Req_Year <- as.numeric(substr(pot$requested_datetime, 1, 4))
pot <- pot[!(pot$status %in% "closed"), ]
pot <- pot[!grepl("MOTORCYCLE", pot$description) | !grepl("SONATA", pot$description), ]
#pot <- pot[pot$status == "open", ]
print(pot)
#print(head(pot))
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Statisticians in Neuroimaging Need to Learn Preprocessing"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
mytitle <- gsub("_", " ", folname)
categories = c("bmorebiostats")
# categories = "rbloggers"
# categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", rmdname))
setwd(file.path(wpdir, folname))
}
