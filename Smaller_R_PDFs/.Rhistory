system('open /Users/johnmuschelli/Library/R/3.0/library/epivizr')
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "ENAR_Over_Time"
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
}
system(sprintf("open %s", rmdname))
?png
cat(".Rprofile")
readLines(".Rprofile")
x = 1:10
y = 1:3
d = expand.grid(x=x, y=y)
d$col = rainbow(nrow(d))
d
x = 1:10
y = 1:3
d = expand.grid(x=x, y=y)
d$col = rainbow(nrow(d))
plot(x, y, pch=16, cex=10)
plot(d$x, d$y, pch=16, cex=10)
x = 1:10
y = 1:3
d = expand.grid(x=x, y=y)
d$col = rainbow(nrow(d))
plot(d$x, d$y, pch=16, cex=2)
x = 1:10
y = 1:3
d = expand.grid(x=x, y=y)
d$col = rainbow(nrow(d))
plot(d$x, d$y, pch=16, cex=3)
x = 1:10
y = 1:3
d = expand.grid(x=x, y=y)
d$col = rainbow(nrow(d))
plot(d$x, d$y, pch=16, cex=4)
x = 1:10
y = 1:3
d = expand.grid(x=x, y=y)
d$col = rainbow(nrow(d))
plot(d$x, d$y, pch=16, cex=4, col = d$col)
getOption("pdfviewer")
getOption("pngviewer")
getOption("display")
?png
library(knitr)
?opts_chunk
?pdf
file.info(pdf)
pdfname = "mypdf.pdf"
nplots = 20
pdf(file=pdfname)
for (idev in seq(nplots)){
plot(rnorm(1e6), rnorm(1e6))
}
dev.off()
file.remove(pdfname)
setwd("~/Dropbox/Public/WordPress_Hopstat/Smaller_R_PDFs/")
pdfname = "mypdf.pdf"
nplots = 20
pdf(file=pdfname)
for (idev in seq(nplots)){
plot(rnorm(1e6), rnorm(1e6))
}
dev.off()
file.info(pdf)
file.info(pdfname)
?file.info
file.info(pdfname)$size / (1024*1024)
?object.size
fsize = file.info(pdfname)$size / (1024*1024)
cat(fsize, "Mb\n")
As, we see the file is about `round(fize)`
paste0(round(fize), "Mb")
paste0(round(fsize), "Mb")
pdfname = "mypdf2.pdf"
tdir = tempdir()
mypattern= "MYTEMPPNG"
fname = paste0(mypattern, "%05d.png")
takeout = list.files(path=dir, pattern=paste0(mypattern, ".*\\.png"))
pngname = file.path(tdir, fname)
pdfname = "mypdf2.pdf"
tdir = tempdir()
mypattern= "MYTEMPPNG"
fname = paste0(mypattern, "%05d.png")
takeout = list.files(path=tdir, pattern=paste0(mypattern, ".*\\.png"))
pngname = file.path(tdir, fname)
takeout
file.remove(takeout)
pdfname = "mypdf2.pdf"
tdir = tempdir()
mypattern= "MYTEMPPNG"
fname = paste0(mypattern, "%05d.png")
gpat = paste0(mypattern, ".*\\.png")
takeout = list.files(path=tdir, pattern=gpat)
file.remove(takeout)
pngname = file.path(tdir, fname)
png(pngname)
for (idev in seq(nplots)){
plot(rnorm(1e6), rnorm(1e6))
}
dev.off()
pngs = list.files(path=tdir, pattern=gpat, full.names=TRUE)
mystr= paste(pngs, collapse=" ", sep="")
pngs
system(sprintf("convert %s %s", mystr, pdfname))
pdfname
file.exists(pdfname)
file.info(pdfname)$size/(1024*1024)
pdfname2 = "mypdf2.pdf"
pdfname2
file.exists(pdfname2)
?png
head(png)
png
png("blah.png", res=1200)
plot(rnorm(1e6), rnorm(1e6))
dev.off()
png("blah.png", res=1200)
plot(rnorm(1e6), rnorm(1e6))
dev.off()
png("blah.png", res=1200, height=5, width=5, units="in",)
png("blah.png", res=1200, height=5, width=5, units="in")
dev.off()
png("blah.png", res=1200, height=5, width=5, units="in")
dev.off()
dev.off()
dev.off()
png("blah.png", res=1200, height=5, width=5, units="in")
plot(rnorm(1e6), rnorm(1e6))
dev.off()
png("blah.png", res=600, height=5, width=5, units="in")
plot(rnorm(1e6), rnorm(1e6))
dev.off()
dev.off()
?pdf
library(knitr)
knit("Smaller_R_PDFs.Rmd")
library(knitr)
library(tools)
library(rbenchmark)
opts_chunk$set(echo=FALSE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
nplots = 20
x = matrix(rnorm(1e6*nplots), ncol=nplots)
y = matrix(rnorm(1e6*nplots), ncol=nplots)
mypdf
res = mypdf("mypdf3.pdf")
for (idev in seq(nplots)){
plot(x[,idev], y[, idev])
}
tempdir()
system(sprintf("open %s", tempdir()))
dev.off()
system(sprintf("open %s", tempdir()))
res = mypdf("mypdf3.pdf")
for (idev in seq(nplots)){
plot(x[,idev], y[, idev])
}
tempdir()
mypdf = function(pdfname, mypattern= "MYTEMPPNG", ...){
fname = paste0(mypattern, "%05d.png")
gpat = paste0(mypattern, ".*\\.png")
takeout = list.files(path=tempdir(), pattern=gpat, full.names=TRUE)
if (length(takeout) > 0) file.remove(takeout)
pngname = file.path(tempdir(), fname)
png(pngname, ...)
return(c(pdfname=pdfname, mypattern=mypattern))
}
mydev.off = function(pdfname, mypattern, copts = ""){
dev.off()
gpat = paste0(mypattern, ".*\\.png")
pngs = list.files(path=tempdir(), pattern=gpat, full.names=TRUE)
mystr = paste(pngs, collapse=" ", sep="")
system(sprintf("convert %s -quality 100 %s %s", mystr, pdfname, copts))
}
dev.off()
res = mypdf("mypdf3.pdf")
for (idev in seq(nplots)){
plot(x[,idev], y[, idev])
}
dev.off()
mypdf = function(pdfname, mypattern= "MYTEMPPNG", ...){
fname = paste0(mypattern, "%05d.png")
gpat = paste0(mypattern, ".*\\.png")
takeout = list.files(path=tempdir(), pattern=gpat, full.names=TRUE)
if (length(takeout) > 0) file.remove(takeout)
pngname = file.path(tempdir(), fname)
png(pngname, ...)
return(c(pdfname=pdfname, mypattern=mypattern))
}
mydev.off = function(pdfname, mypattern, copts = ""){
dev.off()
gpat = paste0(mypattern, ".*\\.png")
pngs = list.files(path=tempdir(), pattern=gpat, full.names=TRUE)
mystr = paste(pngs, collapse=" ", sep="")
system(sprintf("convert %s -quality 100 %s %s", mystr, pdfname, copts))
}
tm3 <- benchmark({
res = mypdf("mypdf3.pdf", res=600, height=7, width = 7, units = "in")
for (idev in seq(nplots)){
plot(x[,idev], y[, idev])
}
mydev.off(pdfname = res$pdfname, mypattern = res$mypattern)
}, replications=1)
nplots = 1
tm3 <- benchmark({
res = mypdf("mypdf3.pdf", res=600, height=7, width = 7, units = "in")
for (idev in seq(nplots)){
plot(x[,idev], y[, idev])
}
mydev.off(pdfname = res$pdfname, mypattern = res$mypattern)
}, replications=1)
res
mypdf = function(pdfname, mypattern= "MYTEMPPNG", ...){
fname = paste0(mypattern, "%05d.png")
gpat = paste0(mypattern, ".*\\.png")
takeout = list.files(path=tempdir(), pattern=gpat, full.names=TRUE)
if (length(takeout) > 0) file.remove(takeout)
pngname = file.path(tempdir(), fname)
png(pngname, ...)
return(list(pdfname=pdfname, mypattern=mypattern))
}
mydev.off = function(pdfname, mypattern, copts = ""){
dev.off()
gpat = paste0(mypattern, ".*\\.png")
pngs = list.files(path=tempdir(), pattern=gpat, full.names=TRUE)
mystr = paste(pngs, collapse=" ", sep="")
system(sprintf("convert %s -quality 100 %s %s", mystr, pdfname, copts))
}
tm3 <- benchmark({
res = mypdf("mypdf3.pdf", res=600, height=7, width = 7, units = "in")
for (idev in seq(nplots)){
plot(x[,idev], y[, idev])
}
mydev.off(pdfname = res$pdfname, mypattern = res$mypattern)
}, replications=1)
tm3
tm3$elapsed
tm3$sys.child
?wilcox.test
library(brainR)
?write4D
# rm(list=ls())
library(brainR)
### Template from MNI152 from FSL
# setwd(datadir)
#Brain Template from Copyright (C) 1993-2009 Louis Collins,
#McConnell Brain Imaging Centre,
#Montreal Neurological Institute, McGill University
#6th generation non-linear symmetric brain
##Downsampled to 8mm using FSL fslmaths -subsamp2
template <- readNIfTI(system.file("MNI152_T1_1mm_brain.nii.gz", package="brainR")
, reorient=FALSE)
dtemp <- dim(template)
### 4500 - value that empirically value that presented a brain with gyri
### lower values result in a smoother surface
brain <- contour3d(template, x=1:dtemp[1], y=1:dtemp[2],
z=1:dtemp[3], level = 4500, alpha = 0.8, draw = FALSE)
### Example data courtesy of Daniel Reich
### Each visit is a binary mask of lesions in the brain
imgs <- paste("Visit_", 1:5, "_8mm.nii.gz", sep="")
files <- sapply(imgs, system.file, package='brainR')
scene <- list(brain)
## loop through images and thresh
nimgs <- length(imgs)
cols <- rainbow(nimgs)
for (iimg in 1:nimgs) {
mask <- readNIfTI(files[iimg], reorient=FALSE)
if (length(dim(mask)) > 3) mask <- mask[,,,1]
### use 0.99 for level of mask - binary
activation <- contour3d(mask, level = c(0.99), alpha = 1,
add = TRUE, color=cols[iimg], draw=FALSE)
## add these triangles to the list
scene <- c(scene, list(activation))
}
## make output image names from image names
fnames <- c("brain.stl", gsub(".nii.gz", ".stl", imgs, fixed=TRUE))
outfile <-  "index_4D_stl.html"
write4D(scene=scene, fnames=fnames, outfile=outfile, standalone=TRUE, rescale=TRUE)
browseURL(outfile)
# rm(list=ls())
library(brainR)
### Template from MNI152 from FSL
# setwd(datadir)
#Brain Template from Copyright (C) 1993-2009 Louis Collins,
#McConnell Brain Imaging Centre,
#Montreal Neurological Institute, McGill University
#6th generation non-linear symmetric brain
##Downsampled to 8mm using FSL fslmaths -subsamp2
template <- readNIfTI(system.file("MNI152_T1_1mm_brain.nii.gz", package="brainR")
, reorient=FALSE)
dtemp <- dim(template)
### 4500 - value that empirically value that presented a brain with gyri
### lower values result in a smoother surface
brain <- contour3d(template, x=1:dtemp[1], y=1:dtemp[2],
z=1:dtemp[3], level = 4500, alpha = 0.8, draw = FALSE)
### Example data courtesy of Daniel Reich
### Each visit is a binary mask of lesions in the brain
imgs <- paste("Visit_", 1:5, "_1mm.nii.gz", sep="")
files <- sapply(imgs, system.file, package='brainR')
scene <- list(brain)
## loop through images and thresh
nimgs <- length(imgs)
cols <- rainbow(nimgs)
for (iimg in 1:nimgs) {
mask <- readNIfTI(files[iimg], reorient=FALSE)
if (length(dim(mask)) > 3) mask <- mask[,,,1]
### use 0.99 for level of mask - binary
activation <- contour3d(mask, level = c(0.99), alpha = 1,
add = TRUE, color=cols[iimg], draw=FALSE)
## add these triangles to the list
scene <- c(scene, list(activation))
}
## make output image names from image names
fnames <- c("brain.stl", gsub(".nii.gz", ".stl", imgs, fixed=TRUE))
outfile <-  "index_4D_stl.html"
write4D(scene=scene, fnames=fnames, outfile=outfile,
standalone=TRUE, rescale=TRUE)
browseURL(outfile)
# rm(list=ls())
library(brainR)
### Template from MNI152 from FSL
# setwd(datadir)
#Brain Template from Copyright (C) 1993-2009 Louis Collins,
#McConnell Brain Imaging Centre,
#Montreal Neurological Institute, McGill University
#6th generation non-linear symmetric brain
##Downsampled to 8mm using FSL fslmaths -subsamp2
template <- readNIfTI(system.file("MNI152_T1_1mm_brain.nii.gz", package="brainR")
, reorient=FALSE)
dtemp <- dim(template)
### 4500 - value that empirically value that presented a brain with gyri
### lower values result in a smoother surface
brain <- contour3d(template, x=1:dtemp[1], y=1:dtemp[2],
z=1:dtemp[3], level = 4500, alpha = 0.8, draw = FALSE)
### Example data courtesy of Daniel Reich
### Each visit is a binary mask of lesions in the brain
imgs <- paste("Visit_", 1:5, ".nii.gz", sep="")
files <- sapply(imgs, system.file, package='brainR')
scene <- list(brain)
## loop through images and thresh
nimgs <- length(imgs)
cols <- rainbow(nimgs)
for (iimg in 1:nimgs) {
mask <- readNIfTI(files[iimg], reorient=FALSE)
if (length(dim(mask)) > 3) mask <- mask[,,,1]
### use 0.99 for level of mask - binary
activation <- contour3d(mask, level = c(0.99), alpha = 1,
add = TRUE, color=cols[iimg], draw=FALSE)
## add these triangles to the list
scene <- c(scene, list(activation))
}
## make output image names from image names
fnames <- c("brain.stl", gsub(".nii.gz", ".stl", imgs, fixed=TRUE))
outfile <-  "index_4D_stl.html"
write4D(scene=scene, fnames=fnames, outfile=outfile,
standalone=TRUE, rescale=TRUE)
browseURL(outfile)
source('~/.active-rstudio-document', echo=TRUE)
x <- ifelse(require(brainR), "", {
install.packages('brainR')
}) # for knitting
x <- ifelse(require(knitr), "", {
install.packages("knitr")
}) # for knitting
?view
dev.off()
library(knitr)
knit("Smaller_R_PDFs.Rmd")
slide <- function(fname) {
require(slidify)
require(knitr)
slidify(fname)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
oknit <- function(fname, ...) {
require(knitr)
knit(fname, ...)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
oknit("Smaller_R_PDFs.Rmd")
?knit
slide <- function(fname) {
require(slidify)
require(knitr)
slidify(fname)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
oknit <- function(fname, ...) {
require(knitr)
knit2html(fname, ...)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
oknit("Smaller_R_PDFs.Rmd")
require(knitr)
fname = "Smaller_R_PDFs.Rmd"
knit2html(fname)
fname <- gsub(".Rmd", ".html", fname)
fname
?knit
slide <- function(fname) {
require(slidify)
require(knitr)
slidify(fname)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
oknit <- function(fname, ...) {
require(knitr)
knit2html(fname, envir = new.env(), ...)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
oknit("Smaller_R_PDFs.Rmd")
tempfile()
library(brainR)
?writeWebGL_split
writeWebGL_split
writeWebGL
snapshot3d
?rgl.snapshot
rgl.snapshot
rgl.snapshot
?png
PATH_MAX
Sys.getenv("PATH_MAX")
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Smaller_R_PDFs"
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'PWD'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = 'hopkinsstat'))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.url = paste0('https://dl.dropboxusercontent.com/u/600586/',
wpfol, '/'),
base.dir = wpdir)
knit2wp(rmdname,
title = 'Creating Smaller PDFs in R', categories = "rbloggers",
shortcode=TRUE)
}
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Smaller_R_PDFs"
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.url = paste0('https://dl.dropboxusercontent.com/u/600586/',
wpfol, '/'),
base.dir = wpdir)
knit2wp(rmdname,
title = 'Creating Smaller PDFs in R', categories = "rbloggers",
shortcode=TRUE)
}
