options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
iortho = function(img){
oldpar <- par(no.readonly = TRUE)
par(xpd = NA)
manipulate({
pos <- manipulatorMouseClick()
X <- nrow(img)
Y <- ncol(img)
Z <- nsli(img)
pdim = voxdim(img)
xyz <<- ceiling(c(X, Y, Z)/2)
mfunc = function(r, mval){
min(max(1, floor(r)), mval)
}
if (!is.null(pos)) {
ndcX = pos$ndcX
ndcY = pos$ndcY
x = xyz[1]
y = xyz[2]
z = xyz[3]
pd = par("din")
usr <- par("usr")
plt <- par("plt")
mfg <- par("mfg")
if (ndcX < 0.5 & ndcY >= 0.5){
#top left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*(1-ndcY)/0.5, Y),
z)
}
if (ndcX >= 0.5 & ndcY >= 0.5){
#top right
xyz = c(x,
mfunc(Y*(1-ndcX)/0.5, Y),
mfunc(Z*(1-ndcY)/0.5, Z)
)
}
if (ndcX < 0.5 & ndcY < 0.5){
#bottom left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*ndcY/0.5, Y),
z)
}
if (ndcX > 0.5 & ndcY < 0.5){
#bottom right
xyz = NULL
}
#       print(pos)
#       print(pd)
#       print(xyz)
}
orthographic(img, xyz=xyz, bg = "white")
par(oldpar)
} )
}
iortho(img)
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
iplot = function(img, plane = c("axial",
"coronal", "sagittal")){
plane = match.arg(plane, c("axial",
"coronal", "sagittal"))
ns=  switch(plane,
"axial"=dim(img)[3],
"coronal"=dim(img)[2],
"sagittal"=dim(img)[1])
manipulate({
image(img, z = z, plot.type= "single", plane = plane)
pos <- manipulatorMouseClick()
if (!is.null(pos)) {
print(pos)
}
},
z = slider(1, ns, step=1, initial = ceiling(ns/2))
)
}
iplot(img)
iortho = function(img, ...){
oldpar <- par(no.readonly = TRUE)
par(xpd = NA)
manipulate({
pos <- manipulatorMouseClick()
X <- nrow(img)
Y <- ncol(img)
Z <- nsli(img)
pdim = voxdim(img)
xyz <<- ceiling(c(X, Y, Z)/2)
mfunc = function(r, mval){
min(max(1, floor(r)), mval)
}
if (!is.null(pos)) {
ndcX = pos$ndcX
ndcY = pos$ndcY
x = xyz[1]
y = xyz[2]
z = xyz[3]
pd = par("din")
usr <- par("usr")
plt <- par("plt")
mfg <- par("mfg")
if (ndcX < 0.5 & ndcY >= 0.5){
#top left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*(1-ndcY)/0.5, Y),
z)
}
if (ndcX >= 0.5 & ndcY >= 0.5){
#top right
xyz = c(x,
mfunc(Y*(1-ndcX)/0.5, Y),
mfunc(Z*(1-ndcY)/0.5, Z)
)
}
if (ndcX < 0.5 & ndcY < 0.5){
#bottom left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*ndcY/0.5, Y),
z)
}
if (ndcX > 0.5 & ndcY < 0.5){
#bottom right
xyz = NULL
}
#       print(pos)
#       print(pd)
#       print(xyz)
}
ortho2(img, xyz=xyz, bg = "white", ...)
par(oldpar)
} )
}
iortho(img, window=c(0, 100))
library(fslr)
flirt.help()
options(fsl.path = "/usr/local/fsl/")
flirt.help()
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
iplot = function(img, plane = c("axial",
"coronal", "sagittal")){
plane = match.arg(plane, c("axial",
"coronal", "sagittal"))
ns=  switch(plane,
"axial"=dim(img)[3],
"coronal"=dim(img)[2],
"sagittal"=dim(img)[1])
manipulate({
image(img, z = z, plot.type= "single", plane = plane)
pos <- manipulatorMouseClick()
if (!is.null(pos)) {
print(pos)
}
},
z = slider(1, ns, step=1, initial = ceiling(ns/2))
)
}
iplot(img)
image
fslview(img)
?image
image
image.default
?image.nifti
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
iplot = function(img, plane = c("axial",
"coronal", "sagittal"), ...){
plane = match.arg(plane, c("axial",
"coronal", "sagittal"))
ns=  switch(plane,
"axial"=dim(img)[3],
"coronal"=dim(img)[2],
"sagittal"=dim(img)[1])
manipulate({
image(img, z = z, plot.type= "single", plane = plane, ...)
pos <- manipulatorMouseClick()
if (!is.null(pos)) {
print(pos)
}
},
z = slider(1, ns, step=1, initial = ceiling(ns/2))
)
}
iplot(img, useRaster = TRUE)
?cal_min
library(oro.nifti)
?cal_min
#####################################
# Creating Kirby21 Database
#####################################
rm(list=ls())
#####################################
# Creating Kirby21 Database
#####################################
rm(list=ls())
dl_stub = "http://www.nitrc.org/frs/downloadlink.php/"
ids = 2201:2242
dl_link = paste0(dl_stub, ids)
#####################################
# Creating Kirby21 Database
#####################################
rm(list=ls())
dl_stub = "http://www.nitrc.org/frs/downloadlink.php/"
ids = 2201:2242
dl_link = paste0(dl_stub, ids)
download.file(dl_link[1], destfile = "~/Desktop/test")
.
library(matlabr)
options(matlab.path = "/Applications/MATLAB_R2014b.app/bin")
have_matlab()
code = c("x = 10",
"y=20;",
"z=x+y",
"a = [1 2 3; 4 5 6; 7 8 10]",
"save('test.txt', 'x', 'a', 'z', '-ascii')",
"disp(pwd)",
"type('test.txt')")
res = run_matlab_code(code)
res
ls()
dir()
library(matlabr)
options(matlab.path = "/Applications/MATLAB_R2014b.app/bin")
have_matlab()
library(knitr)
wp = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "matlabr: a Package to Calling MATLAB from R with system"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = FALSE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", shQuote(rmdname)))
}
setwd(file.path(wpdir, folname))
code = c("x = 10",
"y=20;",
"z=x+y",
"a = [1 2 3; 4 5 6; 7 8 10]",
"save('test.txt', 'x', 'a', 'z', '-ascii')",
"disp(pwd)",
"type('test.txt')")
res = run_matlab_code(code)
x = readLines('/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmpl6gLz0/file2c87685f08d3.m')
x
code = c("x = 10",
"y=20;",
"z=x+y",
"a = [1 2 3; 4 5 6; 7 8 10]",
"save('test.txt', 'x', 'a', 'z', '-ascii')")
res = run_matlab_code(code)
res
code = c("x = 10",
"y=20;",
"z=x+y",
"a = [1 2 3; 4 5 6; 7 8 10]",
"save('test.txt', 'x', 'a', 'z', '-ascii')")
res = run_matlab_code(code)
x = readLines('/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//Rtmpl6gLz0/file2c87102e4a49.m')
x
file.exists("test.txt")
output = readLines(con = "test.txt")
output
library(knitr)
wp = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "matlabr: a Package to Calling MATLAB from R with system"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = FALSE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", shQuote(rmdname)))
}
setwd(file.path(wpdir, folname))
######### Send it to the Website
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'https://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#     opts_knit$set(
#       base.url = paste0(
#         'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                   base.dir = wpdir)
opts_knit$set(upload.fun = function(file) {
print("Hey")
imgur_upload(file, key = "9f3460e67f308f6")
})
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
#   input = rmdname
#   title = mytitle
#   shortcode= TRUE
#   encoding = getOption("encoding")
#   debug({
knit2wp(rmdname,
shortcode = TRUE,
action = "newPost",
title = mytitle,
categories = categories,
publish=TRUE)
#     })
#   x = knit2wp2(input = rmdname,
#           title = "Using Tables for Statistics on Large Vectors", categories = categories,
#           shortcode=c(TRUE, TRUE),
#           publish=publish)
# #
#   x$content = gsub("&gt;", ">", x$content, fixed=TRUE)
#   x$content = gsub("&lt;", "<", x$content, fixed=TRUE)
#   x$content = gsub("&quot;", '"', x$content, fixed=TRUE)
#   x$content = gsub("&#39;", "'", x$content, fixed=TRUE)
#   x$content = gsub("&rsquo;", "'", x$content, fixed=TRUE)
#   x$content = gsub("&rdquo;", '"', x$content, fixed=TRUE)
#   x$content = gsub("&ldquo;", '"', x$content, fixed=TRUE)
#   x$content = gsub("&amp;", '"', x$content, fixed=TRUE)
#
#   x$content = gsub("\\(", "ZZZZZZZ", x$content, fixed=TRUE)
#   x$content = gsub("\\)", "$", x$content, fixed=TRUE)
#   x$content = gsub("ZZZZZZZ", "$latex ",
#                    x$content, fixed=FALSE)
#
#   writeLines(text =x$content, con=gsub("[.]Rmd$", "_text.html", rmdname))
purl(rmdname)
}
```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}
library(knitr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
```
In my research, I primarily use `R`, but I try to use existing code if available.  In neuroimaging and other areas, that means calling MATLAB code.  There are some existing solutions for the problem of `R` to MATLAB: namely the [`R.matlab`](http://cran.r-project.org/web/packages/R.matlab/index.html) package and the [RMatlab](http://www.omegahat.org/RMatlab/) package (which can call `R` from MATLAB as well).  I do not use thse solutions usually though.
Previously, [Mandy Mejia wrote "THREE WAYS TO USE MATLAB FROM R"](https://mandymejia.wordpress.com/2014/08/18/three-ways-to-use-matlab-from-r/).  Option 2 is about how to use `R.matlab`, and Mandy gives and example with some cod.  She also describes in Options 1 and 3 how to use the `system` command to call MATLAB commands.
I like this strategy options because:
1. I didn't take the time to learn `R.matlab`.
2. It worked for me.
3. I wrote a package to wrap the options Mandy described: `matlabr`.
## matlabr: Wrapping together system calls to MATLAB
The [`matlabr`](https://github.com/muschellij2/matlabr) package is located in GitHub and you can install it with the following command:
```{r, eval=FALSE}
devtools::install_github("muschellij2/matlabr")
```
It has a very small set of functions and I will go through each function and describe what they do:
1.  `get_matlab`: Mostly internal command that will return a character string that will be passed to `system`.  If `matlab` is in your PATH (bash variable), and you are using R based on the terminal, the command would return `"matlab"`.  If MATLAB is not in your PATH or using a GUI-based system like RStudio, you must set `options(matlab.path='/your/path/to/matlab')`.
2.  `have_matlab`: Wrapper for `get_matlab` to return a logical if `matlab` is found.
3. `run_matlab_script`: This will pass a `.m` file to MATLAB.  It also wraps the command in a [try-catch](http://www.mathworks.com/help/matlab/ref/try.html) statement in MATLAB so that if it fails, it will print the error message.  Without this try-catch, if MATLAB errors, then running the command will remain in MATLAB and not return to `R`.
4.  `run_matlab_code`: This takes a character vector of MATLAB code, ends lines with `;`, writes it to a temporary `.m` file, and then runs `run_matlab_script` on the temporary `.m` file.
5.  `rvec_to_matlab`: Takes in a numeric `R` vector and creates a MATLAB column matrix.
6.  `rvec_to_matlabclist`: Takes in a vector from `R` (usually a character vector) and quotes these strings with single quotes and places them in a MATLAB cell using curly braces: `{` and `}`.  It then stacks these cells into a "matrix" of cells.
## Setting up `matlabr`
Let's set up the `matlab.path` as I'm running in RStudio:
```{r readin}
library(matlabr)
options(matlab.path = "/Applications/MATLAB_R2014b.app/bin")
have_matlab()
```
The result from `have_matlab()` indicates that the `matlab` command can be called.
### Let's write some code to test it
Here we will create some code to take a value for `x`, `y`, `z` (scalars) and a matrix named `a` and then save `x`, `a`, `z` to a text file:
```{r code, results='markup', message=TRUE}
code = c("x = 10",
"y=20;",
"z=x+y",
"a = [1 2 3; 4 5 6; 7 8 10]",
"save('test.txt', 'x', 'a', 'z', '-ascii')")
res = run_matlab_code(code)
```
### Output
First off, we see that `test.txt` indeed was written to disk.
```{r, results='markup'}
file.exists("test.txt")
```
We can read in the `test.txt` from using `readLines`:
```{r, results='markup'}
output = readLines(con = "test.txt")
print(output)
```
## Conclusions
`matlabr` isn't fancy and most likely has some drawbacks as using `system` can have some quirks.  However, these functions have been helpful for me to use some [SPM](http://www.fil.ion.ucl.ac.uk/spm/) routines and other MATLAB commands while remaining "within `R`".  `R.matlab` has a better framework, but it may not be as straightforward for batch processing.  Also `matlabr` has some wrappers that will do a try-catch so that you don't get stuck in MATLAB after calling `system`.
Let me know if this was helpful or if you have ideas on how to make this better.  Or better yet, give a [pull request](https://github.com/muschellij2/matlabr/pulls).
knit("matlabr__a_Package_to_Calling_MATLAB_from_R_with_system.Rmd")
knit2html("matlabr__a_Package_to_Calling_MATLAB_from_R_with_system.Rmd")
