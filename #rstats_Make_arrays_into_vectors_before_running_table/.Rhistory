dep
else {
nm[fixup] <- dep
nm
}
}
if (!missing(exclude) && is.null(exclude))
useNA <- "always"
useNA <- match.arg(useNA)
args <- list(...)
if (!length(args))
stop("nothing to tabulate")
if (length(args) == 1L && is.list(args[[1L]])) {
args <- args[[1L]]
if (length(dnn) != length(args))
dnn <- if (!is.null(argn <- names(args)))
argn
else paste(dnn[1L], seq_along(args), sep = ".")
}
bin <- 0L
lens <- NULL
dims <- integer()
pd <- 1L
dn <- NULL
for (a in args) {
if (is.null(lens)) {
lens <- length(a)
print(lens)
} else if (length(a) != lens)
stop("all arguments must have the same length")
cat <- if (is.factor(a)) {
if (any(is.na(levels(a))))
a
else {
if (is.null(exclude) && useNA != "no")
addNA(a, ifany = (useNA == "ifany"))
else {
if (useNA != "no")
a <- addNA(a, ifany = (useNA == "ifany"))
ll <- levels(a)
a <- factor(a, levels = ll[!(ll %in% exclude)],
exclude = if (useNA == "no")
NA)
}
}
} else {
print("in factor\n")
a <- factor(a, exclude = exclude)
if (useNA != "no")
addNA(a, ifany = (useNA == "ifany"))
else a
}
nl <- length(ll <- levels(cat))
dims <- c(dims, nl)
print(dims)
if (prod(dims) > .Machine$integer.max)
stop("attempt to make a table with >= 2^31 elements")
dn <- c(dn, list(ll))
print(dn)
bin <- bin + pd * (as.integer(cat) - 1L)
pd <- pd * nl
print(head(bin))
print(head(pd))
}
names(dn) <- dnn
bin <- bin[!is.na(bin)]
if (length(bin))
bin <- bin + 1L
y <- array(tabulate(bin, pd), dims, dimnames = dn)
class(y) <- "table"
y
}
tabber(arr)
arr
library(microbenchmark)
dim1 = 30
n = dim1 ^ 3
vec = rbinom(n = n, size = 15, prob = 0.5)
arr = array(vec, dim = c(dim1, dim1, dim1))
microbenchmark(table(vec), table(arr), table(c(arr)), times = 100)
tabber = function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no",
"ifany", "always"), dnn = list.names(...), deparse.level = 1)
{
list.names <- function(...) {
l <- as.list(substitute(list(...)))[-1L]
nm <- names(l)
fixup <- if (is.null(nm))
seq_along(l)
else nm == ""
dep <- vapply(l[fixup], function(x) switch(deparse.level +
1, "", if (is.symbol(x)) as.character(x) else "",
deparse(x, nlines = 1)[1L]), "")
if (is.null(nm))
dep
else {
nm[fixup] <- dep
nm
}
}
if (!missing(exclude) && is.null(exclude))
useNA <- "always"
useNA <- match.arg(useNA)
args <- list(...)
if (!length(args))
stop("nothing to tabulate")
if (length(args) == 1L && is.list(args[[1L]])) {
args <- args[[1L]]
if (length(dnn) != length(args))
dnn <- if (!is.null(argn <- names(args)))
argn
else paste(dnn[1L], seq_along(args), sep = ".")
}
bin <- 0L
lens <- NULL
dims <- integer()
pd <- 1L
dn <- NULL
for (a in args) {
if (is.null(lens)) {
lens <- length(a)
print(lens)
} else if (length(a) != lens)
stop("all arguments must have the same length")
cat <- if (is.factor(a)) {
if (any(is.na(levels(a))))
a
else {
if (is.null(exclude) && useNA != "no")
addNA(a, ifany = (useNA == "ifany"))
else {
if (useNA != "no")
a <- addNA(a, ifany = (useNA == "ifany"))
ll <- levels(a)
a <- factor(a, levels = ll[!(ll %in% exclude)],
exclude = if (useNA == "no")
NA)
}
}
} else {
print("in factor\n")
a <- factor(a, exclude = exclude)
if (useNA != "no")
addNA(a, ifany = (useNA == "ifany"))
else a
}
nl <- length(ll <- levels(cat))
dims <- c(dims, nl)
print(dims)
if (prod(dims) > .Machine$integer.max)
stop("attempt to make a table with >= 2^31 elements")
dn <- c(dn, list(ll))
print(dn)
bin <- bin + pd * (as.integer(cat) - 1L)
pd <- pd * nl
print(head(bin))
print(head(pd))
}
names(dn) <- dnn
bin <- bin[!is.na(bin)]
if (length(bin))
bin <- bin + 1L
y <- array(tabulate(bin, pd), dims, dimnames = dn)
class(y) <- "table"
y
}
tabber(arr)
arr
rm(list=ls())
library(microbenchmark)
dim1 = 30
n = dim1 ^ 3
vec = rbinom(n = n, size = 15, prob = 0.5)
arr = array(vec, dim = c(dim1, dim1, dim1))
microbenchmark(table(vec), table(arr), table(c(arr)), times = 100)
arr
tabber = function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no",
"ifany", "always"), dnn = list.names(...), deparse.level = 1)
{
list.names <- function(...) {
l <- as.list(substitute(list(...)))[-1L]
nm <- names(l)
fixup <- if (is.null(nm))
seq_along(l)
else nm == ""
dep <- vapply(l[fixup], function(x) switch(deparse.level +
1, "", if (is.symbol(x)) as.character(x) else "",
deparse(x, nlines = 1)[1L]), "")
if (is.null(nm))
dep
else {
nm[fixup] <- dep
nm
}
}
if (!missing(exclude) && is.null(exclude))
useNA <- "always"
useNA <- match.arg(useNA)
args <- list(...)
if (!length(args))
stop("nothing to tabulate")
if (length(args) == 1L && is.list(args[[1L]])) {
args <- args[[1L]]
if (length(dnn) != length(args))
dnn <- if (!is.null(argn <- names(args)))
argn
else paste(dnn[1L], seq_along(args), sep = ".")
}
bin <- 0L
lens <- NULL
dims <- integer()
pd <- 1L
dn <- NULL
for (a in args) {
if (is.null(lens)) {
lens <- length(a)
print(lens)
} else if (length(a) != lens)
stop("all arguments must have the same length")
cat <- if (is.factor(a)) {
if (any(is.na(levels(a))))
a
else {
if (is.null(exclude) && useNA != "no")
addNA(a, ifany = (useNA == "ifany"))
else {
if (useNA != "no")
a <- addNA(a, ifany = (useNA == "ifany"))
ll <- levels(a)
a <- factor(a, levels = ll[!(ll %in% exclude)],
exclude = if (useNA == "no")
NA)
}
}
} else {
print("in factor\n")
a <- factor(a, exclude = exclude)
if (useNA != "no")
addNA(a, ifany = (useNA == "ifany"))
else a
}
nl <- length(ll <- levels(cat))
dims <- c(dims, nl)
print(dims)
if (prod(dims) > .Machine$integer.max)
stop("attempt to make a table with >= 2^31 elements")
dn <- c(dn, list(ll))
print(dn)
bin <- bin + pd * (as.integer(cat) - 1L)
pd <- pd * nl
print(head(bin))
print(head(pd))
}
names(dn) <- dnn
bin <- bin[!is.na(bin)]
if (length(bin))
bin <- bin + 1L
y <- array(tabulate(bin, pd), dims, dimnames = dn)
class(y) <- "table"
y
}
tabber(arr)
arr
library(microbenchmark)
dim1 = 30
n = dim1 ^ 3
vec = rbinom(n = n, size = 15, prob = 0.5)
arr = array(vec, dim = c(dim1, dim1, dim1))
microbenchmark(table(vec), table(arr), table(c(arr)), times = 100)
tabber = function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no",
"ifany", "always"), dnn = list.names(...), deparse.level = 1)
{
list.names <- function(...) {
l <- as.list(substitute(list(...)))[-1L]
nm <- names(l)
fixup <- if (is.null(nm))
seq_along(l)
else nm == ""
dep <- vapply(l[fixup], function(x) switch(deparse.level +
1, "", if (is.symbol(x)) as.character(x) else "",
deparse(x, nlines = 1)[1L]), "")
if (is.null(nm))
dep
else {
nm[fixup] <- dep
nm
}
}
if (!missing(exclude) && is.null(exclude))
useNA <- "always"
useNA <- match.arg(useNA)
args <- list(...)
if (!length(args))
stop("nothing to tabulate")
if (length(args) == 1L && is.list(args[[1L]])) {
args <- args[[1L]]
if (length(dnn) != length(args))
dnn <- if (!is.null(argn <- names(args)))
argn
else paste(dnn[1L], seq_along(args), sep = ".")
}
bin <- 0L
lens <- NULL
dims <- integer()
pd <- 1L
dn <- NULL
for (a in args) {
if (is.null(lens)) {
lens <- length(a)
print(lens)
} else if (length(a) != lens)
stop("all arguments must have the same length")
cat <- if (is.factor(a)) {
if (any(is.na(levels(a))))
a
else {
if (is.null(exclude) && useNA != "no")
addNA(a, ifany = (useNA == "ifany"))
else {
if (useNA != "no")
a <- addNA(a, ifany = (useNA == "ifany"))
ll <- levels(a)
a <- factor(a, levels = ll[!(ll %in% exclude)],
exclude = if (useNA == "no")
NA)
}
}
} else {
print("in factor\n")
a <- factor(a, exclude = exclude)
if (useNA != "no")
addNA(a, ifany = (useNA == "ifany"))
else a
}
nl <- length(ll <- levels(cat))
dims <- c(dims, nl)
print(dims)
if (prod(dims) > .Machine$integer.max)
stop("attempt to make a table with >= 2^31 elements")
dn <- c(dn, list(ll))
print(dn)
bin <- bin + pd * (as.integer(cat) - 1L)
pd <- pd * nl
print(head(bin))
print(head(pd))
}
names(dn) <- dnn
bin <- bin[!is.na(bin)]
if (length(bin))
bin <- bin + 1L
y <- array(tabulate(bin, pd), dims, dimnames = dn)
class(y) <- "table"
y
}
myarr = arr
tab = tabber(myarr)
arr
tab
tab = tabber(myarr)
myarr
microbenchmark(table(vec), table(arr), table(c(arr), tabber(arr)), times = 100)
microbenchmark(table(vec), table(arr), table(c(arr)), tabber(arr), times = 100)
system.time(tabber(arr))
system.time(tabber(c(arr)))
library(microbenchmark)
dims = c(512, 512, 100)
n = prod(dims)
vec = rbinom(n = n, size = 15, prob = 0.5)
arr = array(vec, dim = dims)
microbenchmark(table(vec), table(arr), table(c(arr)), times = 10)
library(microbenchmark)
dims = c(512, 512, 30)
n = prod(dims)
vec = rbinom(n = n, size = 15, prob = 0.5)
arr = array(vec, dim = dims)
table(c(arr))
system.time(table(arr))
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "#rstats Make arrays into vectors before running table"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
######### Send it to the Website
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "#rstats Make arrays into vectors before running table"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
######### Send it to the Website
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
?knit2wp
