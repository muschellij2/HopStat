header <- dashboardHeader(title="CYBER Dashboard")
# No sidebar --------------------------------------------------------------
sidebar <- dashboardSidebar()
# Compose dashboard body --------------------------------------------------
body <- dashboardBody(
fluidPage(
fluidRow()
)
)
# Setup Shiny app UI components -------------------------------------------
ui <- dashboardPage(header, sidebar, body, skin="black")
# Setup Shiny app back-end components -------------------------------------
server <- function(input, output) { }
# Render Shiny app --------------------------------------------------------
shinyApp(ui, server)
source('~/.active-rstudio-document')
library(shiny)
library(shinydashboard)
library(httr)
library(jsonlite)
library(data.table)
library(dplyr)
library(rvest)
library(magrittr)
# Simple header -----------------------------------------------------------
header <- dashboardHeader(title="CYBER Dashboard")
# No sidebar --------------------------------------------------------------
sidebar <- dashboardSidebar()
# Compose dashboard body --------------------------------------------------
body <- dashboardBody(
fluidPage(
fluidRow(
a(href="http://isc.sans.org/",
target="_blank", uiOutput("infocon")),
a(href="http://www.symantec.com/security_response/threatcon/",
target="_blank", uiOutput("threatcon")),
a(href="http://webapp.iss.net/gtoc/",
target="_blank", uiOutput("alertcon"))
)
)
)
# Setup Shiny app UI components -------------------------------------------
ui <- dashboardPage(header, sidebar, body, skin="black")
# Setup Shiny app back-end components -------------------------------------
server <- function(input, output) { }
# Render Shiny app --------------------------------------------------------
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(httr)
library(jsonlite)
library(data.table)
library(dplyr)
library(rvest)
library(magrittr)
# Simple header -----------------------------------------------------------
header <- dashboardHeader(title="CYBER Dashboard")
# No sidebar --------------------------------------------------------------
sidebar <- dashboardSidebar()
# Compose dashboard body --------------------------------------------------
body <- dashboardBody(
fluidPage(
fluidRow(
a(href="http://isc.sans.org/",
target="_blank", uiOutput("infocon")),
a(href="http://www.symantec.com/security_response/threatcon/",
target="_blank", uiOutput("threatcon")),
a(href="http://webapp.iss.net/gtoc/",
target="_blank", uiOutput("alertcon"))
)
)
)
# Setup Shiny app UI components -------------------------------------------
ui <- dashboardPage(header, sidebar, body, skin="black")
# Setup Shiny app back-end components -------------------------------------
server <- function(input, output) {
output$infocon <- renderUI({
infocon_url <- "https://isc.sans.edu/api/infocon?json"
infocon <- fromJSON(content(GET(infocon_url)))
valueBox(
value="Yellow",
subtitle="SANS Infocon",
icon=icon("bullseye"),
color=ifelse(infocon$status=="test", "blue", infocon$status)
)
})
# Render Shiny app --------------------------------------------------------
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(httr)
library(jsonlite)
library(data.table)
library(dplyr)
library(rvest)
library(magrittr)
# Simple header -----------------------------------------------------------
header <- dashboardHeader(title="CYBER Dashboard")
# No sidebar --------------------------------------------------------------
sidebar <- dashboardSidebar()
# Compose dashboard body --------------------------------------------------
body <- dashboardBody(
fluidPage(
fluidRow(
a(href="http://isc.sans.org/",
target="_blank", uiOutput("infocon")),
a(href="http://www.symantec.com/security_response/threatcon/",
target="_blank", uiOutput("threatcon")),
a(href="http://webapp.iss.net/gtoc/",
target="_blank", uiOutput("alertcon"))
)
)
)
# Setup Shiny app UI components -------------------------------------------
ui <- dashboardPage(header, sidebar, body, skin="black")
# Setup Shiny app back-end components -------------------------------------
server <- function(input, output) {
output$infocon <- renderUI({
infocon_url <- "https://isc.sans.edu/api/infocon?json"
infocon <- fromJSON(content(GET(infocon_url)))
valueBox(
value="Yellow",
subtitle="SANS Infocon",
icon=icon("bullseye"),
color=ifelse(infocon$status=="test", "blue", infocon$status)
)
})
}
# Render Shiny app --------------------------------------------------------
shinyApp(ui, server)
source('~/.active-rstudio-document')
library(shiny)
library(shinydashboard)
library(httr)
library(jsonlite)
library(data.table)
library(dplyr)
library(rvest)
library(magrittr)
# Simple header -----------------------------------------------------------
header <- dashboardHeader(title="CYBER Dashboard")
# No sidebar --------------------------------------------------------------
sidebar <- dashboardSidebar()
# Compose dashboard body --------------------------------------------------
body <- dashboardBody(
fluidPage(
fluidRow(
a(href="http://isc.sans.org/",
target="_blank", uiOutput("infocon")),
a(href="http://www.symantec.com/security_response/threatcon/",
target="_blank", uiOutput("threatcon")),
a(href="http://webapp.iss.net/gtoc/",
target="_blank", uiOutput("alertcon"))
)
)
)
# Setup Shiny app UI components -------------------------------------------
ui <- dashboardPage(header, sidebar, body, skin="black")
# Setup Shiny app back-end components -------------------------------------
server <- function(input, output) {
output$infocon <- renderUI({
infocon_url <- "https://isc.sans.edu/api/infocon?json"
infocon <- fromJSON(content(GET(infocon_url)))
valueBox(
value="Yellow",
subtitle="SANS Infocon",
icon=icon("bullseye"),
color=ifelse(infocon$status=="test", "blue", infocon$status)
)
})
output$threatcon <- renderUI({
pg <- html("http://www.symantec.com/security_response/#")
pg %>%
html_nodes("div.colContentThreatCon > a") %>%
html_text() %>%
extract(1) -> threatcon_text
tcon_map <- c("green", "yellow", "orange", "red")
names(tcon_map) <- c("Level 1", "Level 2", "Level 3", "Level 4")
threatcon_color <- unname(tcon_map[gsub(":.*$", "", threatcon_text)])
threatcon_text <- gsub("^.*:", "", threatcon_text)
valueBox(
value=threatcon_text,
subtitle="Symantec ThreatCon",
icon=icon("tachometer"),
color=threatcon_color
)
})
output$alertcon <- renderUI({
pg <- html("http://xforce.iss.net/")
pg %>%
html_nodes(xpath="//td[@class='newsevents']/p") %>%
html_text() %>%
gsub(" -.*$", "", .) -> alertcon_text
acon_map <- c("green", "blue", "yellow", "red")
names(acon_map) <- c("AlertCon 1", "AlertCon 2", "AlertCon 3", "AlertCon 4")
alertcon_color <- unname(acon_map[alertcon_text])
valueBox(
value=alertcon_text,
subtitle="IBM X-Force",
icon=icon("warning"),
color=alertcon_color
)
})
}
# Render Shiny app --------------------------------------------------------
shinyApp(ui, server)
shiny::runGist("e9e941ad4e3568f98faf")
install.packages("sparkline")
devtools::install_github('htmlwidgets/sparkline')
library(devtools)
install_github('htmlwidgets/sparkline')
library(devtools)
install_github('htmlwidgets/sparkline')
shiny::runGist("e9e941ad4e3568f98faf")
install_github('ramnathv/htmlwidgets')
devtools::install_github('ramnathv/htmlwidgets')
shiny::runGist("e9e941ad4e3568f98faf")
shiny::runGist("e9e941ad4e3568f98faf")
## ----label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE----
library(knitr)
library(dplyr)
library(tidyr)
knit_hooks$set(webgl = hook_webgl)
opts_chunk$set(echo=FALSE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
## ----label=setup, echo=FALSE---------------------------------------------
rm(list=ls())
library(plyr)
library(reshape2)
library(ggplot2)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
paperdir = file.path(basedir, "Skull_Strip_Paper")
figdir = file.path(paperdir, "figure")
progdir = file.path(basedir, "programs")
fname = file.path(resdir, "AM_Overlap_Statistics.Rda")
load(fname)
ddf = ddf[ !grepl("refill", ddf$ssimg), ]
cs =  sapply(ddf, class) == "list"
cs = names(cs)[cs]
for (icol in cs){
ddf[, icol] = unlist(ddf[, icol])
}
d = ddf
d$truevol = d$estvol = NULL
makeint = function(data){
data$scen = gsub(".*_SS_(.*)_Mask.*", "\\1", data$ssimg )
data$smooth = !grepl("nopresmooth", data$scen)
data$smooth = revalue(as.character(data$smooth),
c("TRUE"="Smoothed", "FALSE"="Unsmoothed"))
data$int = gsub("_nopresmooth", "", data$scen)
data
}
ddf = makeint(ddf)
ddf$diffvol = (ddf$truevol - ddf$estvol) / 1000
ddf$absdiff = abs(ddf$diffvol)
long = melt(d, id.vars = c("pid", "id", "img", "rimg",
"ssimg", "hdr"))
long = makeint(long)
long$id = as.numeric(factor(long$id))
runcols =  c("dice", "jaccard", "sens", "spec", "accur", "absdiff")
rc = runcols[ !runcols %in% c("absdiff")]
d = ddf[ ddf$int %in% c(0.01, 0.1) & ddf$smooth == "Smoothed", ]
t.test(sens ~ factor(int), data=d, paired=TRUE)
s = spread(d[, c("id", "int", "sens")], key=int, value=sens)
s$diff = s$`0.01` - s$`0.1`
t.test(s$diff)
s = spread(d[, c("id", "int", "accur")], key=int, value=accur)
s$diff = s$`0.01` - s$`0.1`
t.test(s$diff)
s = spread(d[, c("id", "int", "dice")], key=int, value=dice)
s$diff = s$`0.01` - s$`0.1`
t.test(s$diff)
nospec = long[ long$variable %in% c("accur", "sens"),]
long = long[ long$variable != "jaccard", ]
long$variable = revalue(long$variable, c("sens" = "Sensitivity",
"spec" = "Specificity",
"accur" = "Accuracy",
"dice" = "Dice Similarity Index"))
## ----figcap_CT_Skull_Stripping_Figure2-----------------------------------
CT_Skull_Stripping_Figure2 = paste0("{\\bf Performance Metric Distribution for Different Pipelines.} ",
"Panel~\\protect\\subref*{unsmoothed} displays the boxplots for performance measures when running the pipeline with a different fractional intensity (FI), using smoothed data (top) or unsmoothed data (bottom).  Panel~\\protect\\subref*{smoothed} presents the smoothed data only, rescaled to show discrimination between the different FI.", " Overall, FI of $0.01$ and $0.1$ perform better than $0.35$ in all categories other than specificity.  Using smoothed data improves performance in all performance metrics, markedly when an FI of $0.35$ is used.  Panel~\\protect\\subref*{smoothed} demonstrates that using an FI of $0.01$ on smoothed data has high performance on all measures.  " )
## ----CT_Skull_Stripping_Figure2, fig.height=7, fig.width=7, dpi = 600, fig.dev="png", fig.cap=CT_Skull_Stripping_Figure2----
#g = qplot(x = id, y = value, facets = smooth ~ variable , data = long,
#  colour=int)
#g
long$v2 = long$variable
long$v2 = revalue(long$v2, c("Dice Similarity Index" = "Dice Similarity\nIndex"))
tsize = 16
pngname = file.path(figdir, "AM_CT_Skull_Stripping_Figure2.png")
png(pngname, res=600, units = "in", height=7, width=7)
g = qplot(x = v2, y = value, data = long, facets = smooth~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("Fractional Intensity") +
ggtitle("Performance Metric Distribution for Different Pipelines") +
theme(legend.position = c(.5, .75),
legend.background = element_rect(fill="transparent"),
legend.key = element_rect(fill="transparent",
color="transparent"),
legend.text = element_text(size=tsize+2),
legend.title = element_text(size=tsize),
title = element_text(size=tsize),
strip.text = element_text(size = tsize+4),
axis.text  = element_text(size=tsize-2))
d = data.frame(label="A", smooth="Unsmoothed")
g = g + geom_text(data=d, x = 4, y = 0.2, size=20,
aes(label=label), colour="black")
print(g)
dev.off()
pngname = file.path(figdir, "AM_CT_Skull_Stripping_Figure2b.png")
png(pngname, res=600, units = "in", height=7, width=7)
stopifnot(all(long[ long$smooth == "Smoothed","value"] > 0.95))
g2 = qplot(x = v2, y = value, data =long[ long$smooth == "Smoothed",],
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("Fractional Intensity") +
ggtitle("Performance Metric Distribution for Smoothed Pipelines") +
theme(legend.position = c(.68, .65),
legend.background = element_rect(fill="transparent"),
legend.key = element_rect(fill="transparent",
color="transparent"),
legend.text = element_text(size=tsize),
legend.title = element_text(size=tsize),
title = element_text(size=tsize),
plot.title = element_text(hjust = 0.8),
strip.text = element_text(size = tsize + 4),
axis.text  = element_text(size=tsize)) +
scale_y_continuous(limits=c(.94, 1))
d = data.frame(label="B", smooth="Unsmoothed")
g2 = g2 + geom_text(data=d, x = 4, y = 0.953, size=20,
aes(label=label), colour="black")
print(g2)
dev.off()
pngname = file.path(figdir, "AM_CT_Skull_Stripping_Figure2b.png")
png(pngname, res=600, units = "in", height=7, width=7)
stopifnot(all(long[ long$smooth == "Smoothed","value"] > 0.95))
g2 = qplot(x = v2, y = value, data =long[ long$smooth == "Smoothed",],
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("Fractional Intensity") +
ggtitle("Performance Metric Distribution for Smoothed Pipelines") +
theme(legend.position = c(.68, .65),
legend.background = element_rect(fill="transparent"),
legend.key = element_rect(fill="transparent",
color="transparent"),
legend.text = element_text(size=tsize),
legend.title = element_text(size=tsize),
title = element_text(size=tsize),
plot.title = element_text(hjust = 0.8),
strip.text = element_text(size = tsize + 4),
axis.text  = element_text(size=tsize)) +
scale_y_continuous(limits=c(.95, 1))
d = data.frame(label="B", smooth="Unsmoothed")
g2 = g2 + geom_text(data=d, x = 4, y = 0.953, size=20,
aes(label=label), colour="black")
print(g2)
dev.off()
ddf$avg = (ddf$am_vol + ddf$nat_vol)/2
ddf$diff = (ddf$am_vol - ddf$nat_vol)
ddf$ratio = ddf$am_vol / ddf$nat_vol
qplot(y=diff, x=avg, data=ddf, geom=c("point", "smooth"), se=FALSE)
qplot(y=am_vol, x=nat_vol, data=ddf, geom=c("point", "smooth"),
se=FALSE) + geom_abline(aes(intercept=0, slope = 1))
long = ddf %>%
select(id, dice, sens, spec, accur, ratio) %>%
gather(key=measure, value=value, dice,
sens, spec, accur, ratio)
ests = ddply(long, .(measure), summarise,
mean=mean(value),
lower = t.test(value)$conf.int[1],
upper = t.test(value)$conf.int[2],
sd=sd(value),
median=median(value)
)
rm(list=ls())
library(ggplot2)
library(reshape2)
library(tidyr)
library(dplyr)
library(plyr)
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
basedir = file.path(rootdir, "Final_Brain_Seg")
am_dir <- file.path(basedir, "AM_ROI_images")
nat_dir <- file.path(basedir, "ROI_images")
resdir = file.path(basedir, "results")
load(file=file.path(resdir, "AM_NU_Overlap_Statistics.Rda"))
ddf$avg = (ddf$am_vol + ddf$nat_vol)/2
ddf$diff = (ddf$am_vol - ddf$nat_vol)
ddf$ratio = ddf$am_vol / ddf$nat_vol
qplot(y=diff, x=avg, data=ddf, geom=c("point", "smooth"), se=FALSE)
qplot(y=am_vol, x=nat_vol, data=ddf, geom=c("point", "smooth"),
se=FALSE) + geom_abline(aes(intercept=0, slope = 1))
long = ddf %>%
select(id, dice, sens, spec, accur, ratio) %>%
gather(key=measure, value=value, dice,
sens, spec, accur, ratio)
ests = ddply(long, .(measure), summarise,
mean=mean(value),
lower = t.test(value)$conf.int[1],
upper = t.test(value)$conf.int[2],
sd=sd(value),
median=median(value)
)
ests
source('~/.active-rstudio-document', echo=TRUE)
ests
fname = file.path(resdir, "AM_NU_Overlap_Statistics.Rda")
load(fname)
ddf$avg = (ddf$am_vol + ddf$nat_vol)/2
ddf$diff = (ddf$am_vol - ddf$nat_vol)
ddf$ratio = ddf$am_vol / ddf$nat_vol
long = ddf %>%
select(id, dice, sens, spec, accur, ratio) %>%
gather(key=measure, value=value, dice,
sens, spec, accur, ratio)
ests = ddply(long, .(measure), summarise,
mean= round(mean(value), 3),
lower = round(t.test(value)$conf.int[1], 3),
upper = round(t.test(value)$conf.int[2], 3),
sd= round(sd(value),3),
median=round(median(value), 3)
)
rownames(ests) = ests$measure
ests$measure = NULL
library(admipro)
library(‘adimpro’)
library(adimpro'')
library('adimpro')
?read.image
demo(io)
demo(io)
demo
?demo
?io
system.file("demo", "io.R", package = "adimpro")
system('open "/Library/Frameworks/R.framework/Versions/3.1/Resources/library/adimpro/demo/io.R"')
img <- read.raw(system.file("img/rawimage.png",package="adimpro"))
img
class(img)
edges
?sobel
adimpro:::sobel
edges
adimpro:::sobel
?adimpro.options
img
names(img)
help(topic = "adimpro-class")
help(topic = "adimpro")
help(package= "adimpro")
edges
sobel
adimpro:::sobel
library(knitr)
wp = TRUE
knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
encoding = getOption("encoding"), publish = TRUE)
{
out = knit(input, encoding = encoding)
on.exit(unlink(out))
con = file(out, encoding = encoding)
on.exit(close(con), add = TRUE)
content = knitr:::native_encode(readLines(con, warn = FALSE))
content = paste(content, collapse = "\n")
content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
shortcode = rep(shortcode, length.out = 2L)
if (shortcode[1]) {
content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
"[sourcecode language=\"\\1\"]\\2[/sourcecode]",
content)
}
content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
if (shortcode[2])
"[sourcecode]\\2[/sourcecode]"
else "<pre>\\2</pre>", content)
content = knitr:::native_encode(content, "UTF-8")
title = knitr:::native_encode(title, "UTF-8")
return(list(content = content, title=title))
}
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
mytitle <- folname <- "Simple Arithmetic with Integer Tables"
# mytitle <- folname <- "A small introduction to ROCR"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
publish = FALSE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=FALSE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
system(sprintf("open %s", shQuote(rmdname)))
}
setwd(file.path(wpdir, folname))
