all(mask %in% c(0, 1))
################
# Whitestripe Normalization of David Data
################
# Clear the workspace
rm(list=ls())
library(fslr)
library(WhiteStripe)
library(scales) # need alpha function
datadir = "~/Downloads/David_Data"
datadir = path.expand(datadir)
###############
# Reading in T1 Data
###############
mods = c("T1", "T1KM", "FLAIR")
files = file.path(datadir,
paste0(mods,
"_mutualinfo2_warped_1mm_inmask.nii.gz"))
mask = file.path(datadir,
"T1_mutualinfo2_bet_mask_warped_1mm_inmask.nii.gz")
names(files) = mods
t1 = readNIfTI(files["T1"], reorient = FALSE)
# After Warping, Mask is not binary
mask = readNIfTI(mask, reorient = FALSE)
all(mask %in% c(0, 1))
mask = mask > 0.99
ortho2(t1, mask, col.y = alpha("red", 0.5))
brain_t1 = mask_img(t1, mask)
ws_ss = whitestripe(brain_t1, type = "T1")
ortho2(brain_t1, ws_ss$mask.img, col.y = alpha("red", 0.5))
ws_full = whitestripe(t1, type = "T1")
ortho2(t1, ws_full$mask.img, col.y = alpha("red", 0.5),
text = "WhiteStripe from Full Image")
brain_t1 = mask_img(t1, mask)
ws_ss = whitestripe(brain_t1, type = "T1")
ortho2(t1, ws_ss$mask.img, col.y = alpha("red", 0.5),
text = "WhiteStripe from Brain")
ws_full$mu.whitestripe
ws_ss$mu.whitestripe
ws_full$sig.whitestripe
ws_full$sig.whitestripe
ortho2(brain_t1)
ortho2(brain_t1)
################
# Whitestripe Normalization of David Data
################
# Clear the workspace
rm(list=ls())
library(fslr)
library(WhiteStripe)
library(scales) # need alpha function
datadir = "~/Downloads/David_Data"
datadir = path.expand(datadir)
###############
# Reading in T1 Data
###############
mods = c("T1", "T1KM", "FLAIR")
files = file.path(datadir,
paste0(mods,
"_mutualinfo2_warped_1mm_inmask.nii.gz"))
mask = file.path(datadir,
"T1_mutualinfo2_bet_mask_warped_1mm_inmask.nii.gz")
names(files) = mods
t1 = readNIfTI(files["T1"], reorient = FALSE)
# After Warping, Mask is not binary
mask = readNIfTI(mask, reorient = FALSE)
all(mask %in% c(0, 1))
# making binary with a conservative threshold
mask = mask > 0.99
ortho2(t1, mask, col.y = alpha("red", 0.5))
ws_full = whitestripe(t1, type = "T1")
ortho2(t1, ws_full$mask.img, col.y = alpha("red", 0.5),
text = "WhiteStripe from Full Image")
brain_t1 = mask_img(t1, mask)
ws_ss = whitestripe(brain_t1, type = "T1")
ortho2(t1, ws_ss$mask.img, col.y = alpha("red", 0.5),
text = "WhiteStripe from Brain")
ws_full$mu.whitestripe
ws_ss$mu.whitestripe
ws_full$sig.whitestripe
ws_full$sig.whitestripe
ws_full$sig.whitestripe
ws_ssl$sig.whitestripe
ws_ss$sig.whitestripe
ws_full$sig.whitestripe
ws_ss$sig.whitestripe
ws_full$mu.whitestripe
ws_ss$mu.whitestripe
##################
# SDs are similar, but not exact
#################
ws_full$sig.whitestripe
ws_ss$sig.whitestripe
################
# Whitestripe Normalization of David Data
################
# Clear the workspace
rm(list=ls())
library(fslr)
library(WhiteStripe)
library(scales) # need alpha function
datadir = "~/Downloads/David_Data"
datadir = path.expand(datadir)
###############
# Reading in T1 Data
###############
mods = c("T1", "T1KM", "FLAIR")
files = file.path(datadir,
paste0(mods,
"_mutualinfo2_warped_1mm_inmask.nii.gz"))
mask = file.path(datadir,
"T1_mutualinfo2_bet_mask_warped_1mm_inmask.nii.gz")
names(files) = mods
t1 = readNIfTI(files["T1"], reorient = FALSE)
# After Warping, Mask is not binary
mask = readNIfTI(mask, reorient = FALSE)
all(mask %in% c(0, 1))
# making binary with a conservative threshold
mask = mask > 0.99
ortho2(t1, mask, col.y = alpha("red", 0.5))
dev.off()
brain_t1 = mask_img(t1, mask)
ws_ss = whitestripe(brain_t1, type = "T1")
ortho2(t1, ws_ss$mask.img, col.y = alpha("red", 0.5),
text = "WhiteStripe from Brain")
dev.off()
ws_full = whitestripe(t1, type = "T1")
ortho2(t1, ws_full$mask.img, col.y = alpha("red", 0.5),
text = "WhiteStripe from Full Image")
ws_full$mu.whitestripe
ws_ss$mu.whitestripe
##################
# SDs are similar, but not exact
#################
ws_full$sig.whitestripe
ws_ss$sig.whitestripe
dev.off()
x = sample(c("Carol", "john", "John"), 1000, replace = TRUE)
x = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = x(), x2 = x())
head(df)
for (icol in seq(ncol(df))){
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
icol = 1
# for (icol in seq(ncol(df))){
x = df[, icol]
# }
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
icol = 1
x = df[, icol]
x
x = as.character(x)
ncx = nchar(x)
ncx
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
lim = 100
icol = 1
# for (icol in seq(ncol(df))){
x = df[, icol]
x = as.character(x)
ncx = nchar(x)
add_how_much = lim - ncx
# }
aadd_how_much
add_how_much
rep(" ", add_how_much)
l = 3
y = rep(" ", l)
y
paste(y)
y = rep(" ", l)
y = paste(y, collapse = "")
y
nchar(y)
add_to_x = sapply(add_how_much, function(l)
y = rep(" ", l)
y = paste(y, collapse = "")
}
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
lim = 100
icol = 1
# for (icol in seq(ncol(df))){
x = df[, icol]
x = as.character(x)
ncx = nchar(x)
add_how_much = lim - ncx
add_to_x = sapply(add_how_much, function(l) {
y = rep(" ", l)
y = paste(y, collapse = "")
}
)
head(x)
head(add_to_x)
head(nchar(x))
head(nchar(add_to_x))
paste(x, add_to_x)
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
lim = 100
icol = 1
for (icol in seq(ncol(df))){
x = df[, icol]
x = as.character(x)
ncx = nchar(x)
add_how_much = lim - ncx
add_to_x = sapply(add_how_much, function(l) {
y = rep(" ", l)
y = paste(y, collapse = "")
})
x = paste(x, add_to_x)
df[, icol] = x
}
head(df)
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
lim = 100
icol = 1
for (icol in seq(ncol(df))){
x = df[, icol]
x = as.character(x)
ncx = nchar(x)
add_how_much = lim - ncx
add_to_x = sapply(add_how_much, function(l) {
y = rep(" ", l)
y = paste(y, collapse = "")
})
x = paste(x, add_to_x)
df[, icol] = x
}
writeLines(df, con = "~/Downloads/Example_fwf.txt")
?writeLines
??write.fwf
library(gdata)
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
lim = 100
write.fwf(df, file = "~/Downloads/Example_fwf.txt", width = lim)
library(gdata)
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
lim = 100
write.fwf(df, file = "~/Downloads/Example_fwf.txt",
width = rep(lim, ncol(df)))
library(gdata)
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
lim = 10
write.fwf(df, file = "~/Downloads/Example_fwf.txt",
width = rep(lim, ncol(df)))
library(gdata)
func = function() {
sample(c("Carol", "john", "John"), 1000, replace = TRUE)
}
df = data.frame(x1 = func(), x2 = func())
lim = 10
write.fwf(df, file = "~/Downloads/Example_fwf.txt",
width = rep(lim, ncol(df)), sep = "")
latex = "$Y = X\\beta + \\varepsilon$"
library(knitr)
library(Hmisc)
# crop_latex = function(latex){
# latex = latexTranslate(latex)
mystr = c("\\documentclass{article}\n",
"\\begin{document}",
"\\thispagestyle{empty}",
latex, "\\end{document}")
stub = tempfile(fileext = "")
infile = paste0(stub, ".tex")
writeLines(mystr, con = infile)
# system(sprintf("open %s", infile))
outfile = paste0(stub, ".pdf")
system(sprintf("pdflatex %s %s", infile, outfile))
dir()
latex = "$Y = X\\beta + \\varepsilon$"
library(knitr)
library(Hmisc)
# crop_latex = function(latex){
# latex = latexTranslate(latex)
mystr = c("\\documentclass{article}\n",
"\\begin{document}",
"\\thispagestyle{empty}",
latex, "\\end{document}")
stub = tempfile(fileext = "")
stub
latex = "$Y = X\\beta + \\varepsilon$"
library(knitr)
library(Hmisc)
# crop_latex = function(latex){
# latex = latexTranslate(latex)
mystr = c("\\documentclass{article}\n",
"\\begin{document}",
"\\thispagestyle{empty}",
latex, "\\end{document}")
stub = tempfile(fileext = "")
infile = paste0(stub, ".tex")
writeLines(mystr, con = infile)
# system(sprintf("open %s", infile))
outfile = paste0(stub, ".pdf")
cwd = getwd()
setwd(tempdir())
system(sprintf("pdflatex %s", basename(infile)))
setwd(cwd)
plot_crop(outfile)
system(sprintf("open %s", "/var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//RtmpbMozFh/fileba887d161dfd.pdf")
)
library(papayar)
?download.file
source('~/Dropbox/Packages/Github_Markdown_LaTeX/Github_LaTeX.R')
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "#rstats Make arrays into vectors before running table"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
######### Send it to the Website
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'https://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = file.path(wpdir, folname))
#     opts_knit$set(
#       base.url = paste0(
#         'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                   base.dir = wpdir)
opts_knit$set(upload.fun = function(file) {
print("Hey")
imgur_upload(file, key = "9f3460e67f308f6")
})
knit2wp(rmdname,
shortcode = TRUE,
action = "newPost",
title = mytitle,
categories = categories,
publish=publish)
#     })
table
?table
library(microbenchmark)
dim1 = 30
n = dim1 ^ 3
vec = rbinom(n = n, size = 15, prob = 0.5)
arr = array(vec, dim = c(dim1, dim1, dim1))
microbenchmark(table(vec), table(arr), table(c(arr)), times = 100)
all.equal(table(arr), table(vec))
table(arr)
table(vec)
all.equal(table(arr), table(arr = vec))
all.equal(table(vec = c(arr)), table(arr = vec))
all.equal(table(vec = c(arr)), table(vec))
factor()
factor(
factor
library(microbenchmark)
dim1 = 30
n = dim1 ^ 3
vec = rbinom(n = n, size = 15, prob = 0.5)
arr = array(vec, dim = c(dim1, dim1, dim1))
microbenchmark(table(vec), table(arr), table(c(arr)), times = 100)
microbenchmark(quantile(vec), quantile(arr), quantile(c(arr)), times = 100)
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "Rendering LaTeX Math Equations in GitHub Markdown"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
library(latexreadme)
?parse_latex
args(parse_latex)
?png_latex
