t2wsfiles = t2wsfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
t2ws.outfile = file.path(homedir, "T2_WS_Mask.nii.gz")
!all(file.exists(c(t2wsfiles, t2ws.outfile)))
results = reg_whitestripe(t2 = outfiles["base_t2"],
register = TRUE,
native = TRUE,
t2.outfile = t2wsfiles["base_t2"],
other.files = outfiles[c("base_t1",
"base_pd", "base_flair")],
other.outfiles = t2wsfiles[c("base_t1",
"base_pd", "base_flair")],
ws.outfile = t2ws.outfile,
mask = file.path(homedir, "Brain_Mask.nii.gz"))
?reg_whitestripe
results = reg_whitestripe(t1 = outfiles["base_t1"],
type = "T2",
t2 = outfiles["base_t2"],
register = TRUE,
native = TRUE,
t2.outfile = t2wsfiles["base_t2"],
other.files = outfiles[c("base_t1",
"base_pd", "base_flair")],
other.outfiles = t2wsfiles[c("base_t1",
"base_pd", "base_flair")],
ws.outfile = t2ws.outfile,
mask = file.path(homedir, "Brain_Mask.nii.gz"))
tempfile(fileext = ".nii.gz")
results = reg_whitestripe(t1 = outfiles["base_t1"],
type = "T2",
t1.outfile = tempfile(fileext = ".nii.gz"),
t2 = outfiles["base_t2"],
register = TRUE,
native = TRUE,
t2.outfile = t2wsfiles["base_t2"],
other.files = outfiles[c("base_t1",
"base_pd", "base_flair")],
other.outfiles = t2wsfiles[c("base_t1",
"base_pd", "base_flair")],
ws.outfile = t2ws.outfile,
mask = file.path(homedir, "Brain_Mask.nii.gz"))
gd = getwd()
library(knitr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=TRUE, warning=TRUE, comment="", cache = TRUE)
library(fslr)
options(fsl.path="/usr/local/fsl")
options(fsl.outputtype = "NIFTI_GZ")
files = c(base_t1="01-Baseline_T1.nii.gz",
base_t2="01-Baseline_T2.nii.gz",
base_pd="01-Baseline_PD.nii.gz",
base_flair="01-Baseline_FLAIR.nii.gz",
f_t1= "01-Followup_T1.nii.gz",
f_t2= "01-Followup_T2.nii.gz",
f_pd = "01-Followup_PD.nii.gz",
f_flair="01-Followup_FLAIR.nii.gz")
fn = names(files)
homedir = path.expand("~/Dropbox/Presentations/structural_talk/")
files = file.path(homedir, files)
names(files) = fn
# setwd(homedir)
library(oro.nifti)
library(ANTsR)
library(extrantsr)
library(WhiteStripe)
t2wsfiles = gsub("[.]nii", "_N3_reg_whitestripe_t2.nii", files)
t2wsfiles = t2wsfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
t2ws.outfile = file.path(homedir, "T2_WS_Mask.nii.gz")
t2ws.outfile
results = reg_whitestripe(t1 = outfiles["base_t1"],
type = "T2",
t1.outfile = tempfile(fileext = ".nii.gz"),
t2 = outfiles["base_t2"],
register = TRUE,
native = TRUE,
t2.outfile = t2wsfiles["base_t2"],
other.files = outfiles[c("base_t1",
"base_pd", "base_flair")],
other.outfiles = t2wsfiles[c("base_t1",
"base_pd", "base_flair")],
ws.outfile = t2ws.outfile,
mask = file.path(homedir, "Brain_Mask.nii.gz"))
outfiles = gsub("[.]nii", "_N3_reg.nii", files)
results = reg_whitestripe(t1 = outfiles["base_t1"],
type = "T2",
t1.outfile = tempfile(fileext = ".nii.gz"),
t2 = outfiles["base_t2"],
register = TRUE,
native = TRUE,
t2.outfile = t2wsfiles["base_t2"],
other.files = outfiles[c("base_t1",
"base_pd", "base_flair")],
other.outfiles = t2wsfiles[c("base_t1",
"base_pd", "base_flair")],
ws.outfile = t2ws.outfile,
mask = file.path(homedir, "Brain_Mask.nii.gz"))
outfiles
t2wsfiles
t2wsfiles = gsub("[.]nii", "_N3_reg_whitestripe_t2.nii", files)
t2wsfiles = t2wsfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
t2ws.outfile = file.path(homedir, "T2_WS_Mask.nii.gz")
results = reg_whitestripe(t1 = outfiles["base_t1"],
type = "T2",
t1.outfile = tempfile(fileext = ".nii.gz"),
t2 = outfiles["base_t2"],
register = TRUE,
native = TRUE,
t2.outfile = t2wsfiles["base_t2"],
other.files = outfiles[c("base_t1",
"base_pd", "base_flair")],
other.outfiles = t2wsfiles[c("base_t1",
"base_pd", "base_flair")],
ws.outfile = t2ws.outfile,
mask = file.path(homedir, "Brain_Mask.nii.gz"))
outifles
outfiles
outfiles["base_t2"]
t2wsfiles["base_t2"]
outfiles["base_t2"],
outfiles["base_t2"]
file.exists(outfiles["base_t2"])
t2wsfiles = gsub("[.]nii", "_N3_reg_whitestripe_t2.nii", files)
t2wsfiles = t2wsfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
t2ws.outfile = file.path(homedir, "T2_WS_Mask.nii.gz")
files
outfiles
files
results = reg_whitestripe(
t1 = outfiles["base_t1"],
type = "T2",
t1.outfile = tempfile(fileext = ".nii.gz"),
t2 = outfiles["base_t2"],
register = TRUE,
native = TRUE,
t2.outfile = t2wsfiles["base_t2"],
other.files = outfiles[c("base_t1",
"base_pd", "base_flair")],
other.outfiles = t2wsfiles[c("base_t1",
"base_pd", "base_flair")],
ws.outfile = t2ws.outfile,
mask = file.path(homedir, "Brain_Mask.nii.gz"))
n4_t1 = bias_correct(file = base_t1, correction = "N4", retimg=TRUE)
library(oro.nifti)
base_t1 = readNIfTI(files["base_t1"])
n4_t1 = bias_correct(file = base_t1, correction = "N4", retimg=TRUE)
gd = getwd()
library(knitr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=TRUE, warning=TRUE, comment="", cache = TRUE)
library(fslr)
options(fsl.path="/usr/local/fsl")
options(fsl.outputtype = "NIFTI_GZ")
files = c(base_t1="01-Baseline_T1.nii.gz",
base_t2="01-Baseline_T2.nii.gz",
base_pd="01-Baseline_PD.nii.gz",
base_flair="01-Baseline_FLAIR.nii.gz",
f_t1= "01-Followup_T1.nii.gz",
f_t2= "01-Followup_T2.nii.gz",
f_pd = "01-Followup_PD.nii.gz",
f_flair="01-Followup_FLAIR.nii.gz")
fn = names(files)
homedir = path.expand("~/Dropbox/Presentations/structural_talk/")
files = file.path(homedir, files)
names(files) = fn
library(oro.nifti)
base_t1 = readNIfTI(files["base_t1"])
library(ANTsR)
library(extrantsr)
n4_t1 = bias_correct(file = base_t1, correction = "N4", retimg=TRUE)
ss_t1 = fslbet(n4_t1, retimg = TRUE, opts = "-v",
betcmd = "bet2",
outfile = file.path(homedir, "SS_Image"))
fslbin(file = file.path(homedir, "SS_Image"),
outfile = file.path(homedir, "Brain_Mask"))
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
ofiles = outfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
proc_images = preprocess_mri_within(
files = files[c("base_t1", "base_t2", "base_pd", "base_flair")],
outfiles = ofiles,
correct = TRUE,
correction = "N4",
retimg = TRUE, maskfile = file.path(homedir, "Brain_Mask.nii.gz"))
wsfiles = gsub("[.]nii", "_N4_reg_whitestripe.nii", files)
wsfiles = wsfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
ws.outfile = file.path(homedir, "WS_Mask.nii.gz")
fslhd(file.path(homedir, "Brain_Mask.nii.gz"))
reg_whitestripe
results = reg_whitestripe(t1 = outfiles["base_t1"],
register = TRUE,
native = TRUE,
t1.outfile = wsfiles["base_t1"],
other.files = outfiles[c("base_t2",
"base_pd", "base_flair")],
other.outfiles = wsfiles[c("base_t2",
"base_pd", "base_flair")],
ws.outfile = ws.outfile,
mask = file.path(homedir, "Brain_Mask.nii.gz"))
gd = getwd()
library(knitr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=TRUE, warning=TRUE, comment="", cache = TRUE)
library(fslr)
options(fsl.path="/usr/local/fsl")
options(fsl.outputtype = "NIFTI_GZ")
files = c(base_t1="01-Baseline_T1.nii.gz",
base_t2="01-Baseline_T2.nii.gz",
base_pd="01-Baseline_PD.nii.gz",
base_flair="01-Baseline_FLAIR.nii.gz",
f_t1= "01-Followup_T1.nii.gz",
f_t2= "01-Followup_T2.nii.gz",
f_pd = "01-Followup_PD.nii.gz",
f_flair="01-Followup_FLAIR.nii.gz")
```
fn = names(files)
homedir = path.expand("~/Dropbox/Presentations/structural_talk/")
files = file.path(homedir, files)
names(files) = fn
library(oro.nifti)
base_t1 = readNIfTI(files["base_t1"])
library(ANTsR)
library(extrantsr)
n4_t1 = bias_correct(file = base_t1, correction = "N4", retimg=TRUE)
ss_t1 = fslbet(n4_t1, retimg = TRUE, opts = "-v",
betcmd = "bet2",
outfile = file.path(homedir, "SS_Image"))
fslbin(file = file.path(homedir, "SS_Image"),
outfile = file.path(homedir, "Brain_Mask"))
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
ofiles = outfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
proc_images = preprocess_mri_within(
files = files[c("base_t1", "base_t2", "base_pd", "base_flair")],
outfiles = ofiles,
correct = TRUE,
correction = "N4",
retimg = TRUE, maskfile = file.path(homedir, "Brain_Mask.nii.gz"))
wsfiles = gsub("[.]nii", "_N4_reg_whitestripe.nii", files)
wsfiles = wsfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
ws.outfile = file.path(homedir, "WS_Mask.nii.gz")
if (!all(file.exists(c(wsfiles, ws.outfile)))){
results = reg_whitestripe(t1 = outfiles["base_t1"],
register = TRUE,
native = TRUE,
t1.outfile = wsfiles["base_t1"],
other.files = outfiles[c("base_t2",
"base_pd", "base_flair")],
other.outfiles = wsfiles[c("base_t2",
"base_pd", "base_flair")],
ws.outfile = ws.outfile,
mask = file.path(homedir, "Brain_Mask.nii.gz"))
}
f_t1 = readNIfTI(files["f_t1"])
n4_t1 = bias_correct(file = f_t1, correction = "N4", retimg=TRUE)
f_ss_t1 = fslbet(n4_t1, retimg = TRUE, opts = "-v",
betcmd = "bet2", outfile = file.path(homedir, "F_SS_Image"))
fslbin(file = file.path(homedir, "F_SS_Image"), outfile = file.path(homedir, "F_Brain_Mask"))
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
infiles = files[c("f_t1", "f_t2", "f_pd", "f_flair")]
ofiles = outfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
if (!all(file.exists(ofiles))){
proc_images = preprocess_mri_within(
files = infiles,
outfiles = ofiles,
correct = TRUE,
correction = "N4",
retimg = TRUE, maskfile = file.path(homedir, "F_Brain_Mask.nii.gz"))
}
wsfiles = gsub("[.]nii", "_N4_reg_whitestripe.nii", files)
f_wsfiles = wsfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
ws.outfile = file.path(homedir, "F_WS_Mask.nii.gz")
if (!all(file.exists(c(wsfiles, ws.outfile)))){
results = reg_whitestripe(t1 = outfiles["f_t1"],
register = TRUE,
native = TRUE,
t1.outfile = f_wsfiles["f_t1"],
other.files = outfiles[c("f_t2",
"f_pd", "f_flair")],
other.outfiles = wsfiles[c("f_t2",
"f_pd", "f_flair")],
ws.outfile = ws.outfile,
mask = file.path(homedir, "F_Brain_Mask.nii.gz"))
}
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
wsfiles = gsub("[.]nii", "_N4_reg_whitestripe.nii", files)
f_ws.mask = file.path(homedir, "F_WS_Mask.nii.gz")
f_ws.maskout = file.path(homedir, "F_WS_Mask_tobase.nii.gz")
f_wsfiles = wsfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
f_wsfiles.out = gsub("[.]nii", "_tobase.nii", f_wsfiles)
f_outfiles = outfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
f_outfiles.out = gsub("[.]nii", "_tobase.nii", f_outfiles)
if (!all(file.exists(c(f_wsfiles.out, f_outfiles.out, f_ws.maskout)))){
res = ants_regwrite(filename = outfiles["f_t1"],
outfile = NULL,
template.file = outfiles["base_t1"],
typeofTransform = "Rigid",
interpolator = "LanczosWindowedSinc",
other.files = c(f_wsfiles,
f_outfiles, f_ws.mask),
other.outfiles = c(f_wsfiles.out,
f_outfiles.out, f_ws.maskout),
skull_strip = FALSE,
correct = FALSE,
retimg = TRUE,
remove.warp = TRUE)
}
fslthresh(file = f_ws.maskout, outfile = f_ws.maskout,
thresh = 0.5)
fslbin(file = f_ws.maskout, outfile = f_ws.maskout)
library(WhiteStripe)
joint = file.path(homedir, "Joint_WS_Mask.nii.gz")
ws.base = file.path(homedir, "WS_Mask.nii.gz")
ws.fup = file.path(homedir, "F_WS_Mask_tobase.nii.gz")
joint = fslmask(file = ws.base,
mask = ws.fup,
outfile = joint, retimg = TRUE)
indices = which(joint > 0)
wsfiles = gsub("[.]nii", "_N4_reg_whitestripe.nii", files)
wsfiles[c("f_t1", "f_t2", "f_pd", "f_flair")] = gsub("[.]nii", "_tobase.nii", wsfiles[c("f_t1", "f_t2", "f_pd", "f_flair")])
joint.ws = gsub("[.]nii", "_joint.nii", wsfiles)
runfiles = outfiles
runfiles[c("f_t1", "f_t2", "f_pd", "f_flair")] = f_outfiles.out
brainmask = readNIfTI(file.path(homedir, "Brain_Mask.nii.gz"),
reorient=FALSE)
dtype = function(img){
img = drop_img_dim(img)
img = datatype(img,
datatype= convert.datatype()$FLOAT32,
bitpix= convert.bitpix()$FLOAT32)
img = cal_img(img)
return(img)
}
ifile = 1
for (ifile in seq_along(runfiles)){
if (!file.exists(joint.ws[ifile])){
img = readNIfTI(runfiles[ifile], reorient = FALSE)
img = whitestripe_norm(img, indices)
img = mask_img(img, brainmask)
img = dtype(img)
writeNIfTI(nim = img, filename = nii.stub(joint.ws[ifile]))
}
print(ifile)
}
df = data.frame(type = c("t1", "t2", "pd", "flair"), stringsAsFactors = FALSE)
df$base = joint.ws[paste0("base_", df$type)]
df$f = joint.ws[paste0("f_", df$type)]
rownames(df) = df$type
df$type = NULL
itype = "t1"
base = readNIfTI(df[itype, "base"], reorient = FALSE)
f = readNIfTI(df[itype, "f"], reorient = FALSE)
d = niftiarr(base, base - f)
?mask_img
ortho2(d)
ortho2(robust_window(d))
ortho2(d)
hist(c(d[d!=0]))
df = data.frame(type = c("t1", "t2", "pd", "flair"), stringsAsFactors = FALSE)
df$base = joint.ws[paste0("base_", df$type)]
df$f = joint.ws[paste0("f_", df$type)]
rownames(df) = df$type
df$type = NULL
brainmask = readNIfTI(file.path(homedir, "Brain_Mask.nii.gz"),
reorient=FALSE)
itype = "t1"
base = readNIfTI(df[itype, "base"], reorient = FALSE)
f = readNIfTI(df[itype, "f"], reorient = FALSE)
d = niftiarr(base, base - f)
df = data.frame(type = c("t1", "t2", "pd", "flair"), stringsAsFactors = FALSE)
df$base = joint.ws[paste0("base_", df$type)]
df$f = joint.ws[paste0("f_", df$type)]
rownames(df) = df$type
df$type = NULL
brainmask = readNIfTI(file.path(homedir, "Brain_Mask.nii.gz"),
reorient=FALSE)
brainmask[brainmask == 0] = NA
itype = "t1"
base = readNIfTI(df[itype, "base"], reorient = FALSE)
f = readNIfTI(df[itype, "f"], reorient = FALSE)
d = niftiarr(base, base - f)
d = mask_img(d, mask = brainmask)
hist(c(d[d!=0]))
df = data.frame(type = c("t1", "t2", "pd", "flair"), stringsAsFactors = FALSE)
df$base = joint.ws[paste0("base_", df$type)]
df$f = joint.ws[paste0("f_", df$type)]
rownames(df) = df$type
df$type = NULL
brainmask = readNIfTI(file.path(homedir, "Brain_Mask.nii.gz"),
reorient=FALSE)
brainmask[brainmask == 0] = NA
itype = "t1"
base = readNIfTI(df[itype, "base"], reorient = FALSE)
f = readNIfTI(df[itype, "f"], reorient = FALSE)
ddf = data.frame(base = c(base), fup = c(f))
ddf = ddf[ brainmask %in% 1, ]
head(ddf)
samp = ddf[ sample(nrow(ddf), size=1e5), ]
plot(samp)
abline(a=0, b=1)
itype = "t2"
base = readNIfTI(df[itype, "base"], reorient = FALSE)
f = readNIfTI(df[itype, "f"], reorient = FALSE)
ddf = data.frame(base = c(base), fup = c(f))
ddf = ddf[ brainmask %in% 1, ]
samp = ddf[ sample(nrow(ddf), size=1e5), ]
plot(samp)
plot(samp, pch=".")
abline(a=0, b=1, col = "red")
head(samp)
mod = lm(fup ~ base, data=ddf)
summary(mod)
ortho2(d)
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
f_outfiles = outfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
f_outfiles.out = gsub("[.]nii", "_tobase.nii", f_outfiles)
f_outfiles.out
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
f_outfiles = outfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
f_outfiles.out = gsub("[.]nii", "_tobase.nii", f_outfiles)
b_outfiles = outfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
f_outfiles = outfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
f_outfiles = gsub("[.]nii", "_tobase.nii", f_outfiles)
b_outfiles = outfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
f_outfiles = outfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
f_outfiles = gsub("[.]nii", "_tobase.nii", f_outfiles)
b_outfiles = outfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
df = data.frame(type = c("t1", "t2", "pd", "flair"), stringsAsFactors = FALSE)
df$base = b_outfiles[paste0("base_", df$type)]
df$f = f_outfiles[paste0("f_", df$type)]
rownames(df) = df$type
head(df)
df$type = NULL
brainmask = readNIfTI(file.path(homedir, "Brain_Mask.nii.gz"),
reorient=FALSE)
brainmask[brainmask == 0] = NA
itype = "t2"
base = readNIfTI(df[itype, "base"], reorient = FALSE)
f = readNIfTI(df[itype, "f"], reorient = FALSE)
ddf = data.frame(base = c(base), fup = c(f))
ddf = ddf[ brainmask %in% 1, ]
samp = ddf[ sample(nrow(ddf), size=1e5), ]
plot(samp)
ortho2(d)
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
f_outfiles = outfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
f_outfiles = gsub("[.]nii", "_tobase.nii", f_outfiles)
b_outfiles = outfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
df = data.frame(type = c("t1", "t2", "pd", "flair"), stringsAsFactors = FALSE)
df$base = b_outfiles[paste0("base_", df$type)]
df$f = f_outfiles[paste0("f_", df$type)]
rownames(df) = df$type
df$type = NULL
brainmask = readNIfTI(file.path(homedir, "Brain_Mask.nii.gz"),
reorient=FALSE)
brainmask[brainmask == 0] = NA
itype = "t2"
base = readNIfTI(df[itype, "base"], reorient = FALSE)
f = readNIfTI(df[itype, "f"], reorient = FALSE)
ddf = data.frame(base = c(base), fup = c(f))
ddf = ddf[ brainmask %in% 1, ]
samp = ddf[ sample(nrow(ddf), size=1e5), ]
d = niftiarr(base, base - f)
d = mask_img(d, mask = brainmask)
ortho2(d)
hist(c(d[d!= 0]))
base = zscore_img(base, mask = brainmask, margin = NULL)
zscore_img
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
f_outfiles = outfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
f_outfiles = gsub("[.]nii", "_tobase.nii", f_outfiles)
b_outfiles = outfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
df = data.frame(type = c("t1", "t2", "pd", "flair"), stringsAsFactors = FALSE)
df$base = b_outfiles[paste0("base_", df$type)]
df$f = f_outfiles[paste0("f_", df$type)]
rownames(df) = df$type
df$type = NULL
brainmask = readNIfTI(file.path(homedir, "Brain_Mask.nii.gz"),
reorient=FALSE)
itype = "t2"
base = readNIfTI(df[itype, "base"], reorient = FALSE)
zbase = zscore_img(base, mask = brainmask, margin = NULL)
f = readNIfTI(df[itype, "f"], reorient = FALSE)
zf = zscore_img(f, mask = brainmask, margin = NULL)
ortho2(zbase)
ortho2(zf)
hist(c(zf))
hist(c(zf[zf!= 0]))
ortho2(zf, cal_img(zf == 0), NA.y=TRUE, col.y="red")
ddf = data.frame(base = c(zbase), fup = c(zf))
ddf = ddf[ brainmask %in% 1, ]
samp = ddf[ sample(nrow(ddf), size=1e5), ]
rm(list=c('zf', "zbase"))
outfiles = gsub("[.]nii", "_N4_reg.nii", files)
f_outfiles = outfiles[c("f_t1", "f_t2", "f_pd", "f_flair")]
f_outfiles = gsub("[.]nii", "_tobase.nii", f_outfiles)
b_outfiles = outfiles[c("base_t1", "base_t2", "base_pd", "base_flair")]
df = data.frame(type = c("t1", "t2", "pd", "flair"), stringsAsFactors = FALSE)
df$base = b_outfiles[paste0("base_", df$type)]
df$f = f_outfiles[paste0("f_", df$type)]
rownames(df) = df$type
df$type = NULL
brainmask = readNIfTI(file.path(homedir, "Brain_Mask.nii.gz"),
reorient=FALSE)
itype = "t2"
base = readNIfTI(df[itype, "base"], reorient = FALSE)
base = zscore_img(base, mask = brainmask, margin = NULL)
f = readNIfTI(df[itype, "f"], reorient = FALSE)
f = zscore_img(base, f = brainmask, margin = NULL)
f = zscore_img(f, mask = brainmask, margin = NULL)
ddf = data.frame(base = c(base), fup = c(f))
ddf = ddf[ brainmask %in% 1, ]
samp = ddf[ sample(nrow(ddf), size=1e5), ]
d = niftiarr(base, base - f)
d = mask_img(d, mask = brainmask)
ortho2(d)
plot(samp)
