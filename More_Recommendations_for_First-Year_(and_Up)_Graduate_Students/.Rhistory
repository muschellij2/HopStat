rm(list=ls())
library(ROAuth)
library(twitteR)
load("my_oauth")
rm(list=ls())
#install the necessary packages
library("ROAuth")
library("twitteR")
library("wordcloud")
library("tm")
#necessary step for Windows
x = load_twitter_oauth("~/twitter_authentication.Rda")
searchString= "#Rstats"
x = load_twitter_oauth("~/twitter_authentication.Rda")
?setup_twitter_oauth
setup_twitter_oauth("xphVcJdPKAuJVEILs3IDiA", "mHGFPrD4FI7frlGBzAHGj47AYaesYwo6K9HCAU4lmg"
)
setwd("~/")
setup_twitter_oauth("xphVcJdPKAuJVEILs3IDiA", "mHGFPrD4FI7frlGBzAHGj47AYaesYwo6K9HCAU4lmg",
)
library(twitteR)
setup_twitter_oauth("xphVcJdPKAuJVEILs3IDiA",
"mHGFPrD4FI7frlGBzAHGj47AYaesYwo6K9HCAU4lmg"),
setup_twitter_oauth("xphVcJdPKAuJVEILs3IDiA",
"mHGFPrD4FI7frlGBzAHGj47AYaesYwo6K9HCAU4lmg")
library(twitteR)
setup_twitter_oauth("xphVcJdPKAuJVEILs3IDiA",
"mHGFPrD4FI7frlGBzAHGj47AYaesYwo6K9HCAU4lmg",
"501890850-YlIbVmI1OKAnbYfl5bN4GHEeY4Muher3SWLgYPQT",
"MaB5hczgVIMoxRAxkrL4ombNUMkOnrc4UyMR2qaHu7ex3")
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
twitter
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
setup_twitter_oauth(twitter[1], twitter[2], twitter[3], twitter[4])
#                      credentials_file = "~/twitter_authentication.Rda")
help(package = "twitteR")
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
setup_twitter_oauth(twitter[1], twitter[2], twitter[3], twitter[4])
run_user = "strictlystat"
favs = favorites(user = run_user, n = 100)
favs
favorites()
favorites
rm( list = ls() )
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
setup_twitter_oauth(twitter[1], twitter[2], twitter[3], twitter[4])
user = "strictlystat"
uParams = parseUsers(user)
uParams = twitteR:::parseUsers(user)
cmd = "favorites/list"
params = buildCommonArgs(max_id = max_id, since_id = since_id)
favs
rm( list = ls() )
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
setup_twitter_oauth(twitter[1], twitter[2], twitter[3], twitter[4])
user = "strictlystat"
favs = favorites(user = user, n = 100)
favs
favs[[1
]]
class(favs[[1]])
getUser(favs[[1]])
?getUser
?status
favs[[1]]$screenName
sapply(favs, `[`, "screenName")
sapply(favs, `[[`, "screenName")
sns = sapply(favs, `[[`, "screenName")
sns
find_user = "kwbroman"
sns = sapply(favs, `[[`, "screenName")
find_user_favs = favs[sns %in% find_user]
find_user
find_user_favs
help(package = "twitteR")
?searchTwitter()
?search_twitter_and_store
help(package = "twitteR")
ss = searchTwitter("@kwbroman+@strictlystat")
ss
searchTwitter()
searchTwitter
favorites
?searchTwitteR
?statusBase
twitteR:::statusBase
?searchTwitteR
favorites
uParams = parseUsers(user)
uParams = twitteR:::parseUsers(user)
uParams
ss = searchTwitter("@kwbroman", screen_name = "strictlystat")
user = NULL
uParams = twitteR:::parseUsers(user)
uParams
favorites()
favorites
searchString = "@kwbroman"
searchString = "@kwbroman"
n = 25; lang = NULL; since = NULL; until = NULL;
locale = NULL; geocode = NULL; sinceID = NULL; maxID = NULL;
resultType = NULL; retryOnRateLimit = 120;
if (nchar(searchString) > 1000) {
stop("searchString can only be up to 1000 characters")
}
if (n <= 0)
stop("n must be positive")
n <- as.integer(n)
if (is.null(since)) {
since_date = NULL
}
else {
since_date = strsplit(since, " ")[[1]][1]
}
if (is.null(until)) {
until_date = NULL
}
else {
until_date = strsplit(until, " ")[[1]][1]
if (until_date == since_date) {
until_date = as.Date(since_date) + 1
}
}
rm( list = ls() )
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
setup_twitter_oauth(twitter[1], twitter[2], twitter[3], twitter[4])
searchString = "@kwbroman"
n = 25; lang = NULL; since = NULL; until = NULL;
locale = NULL; geocode = NULL; sinceID = NULL; maxID = NULL;
resultType = NULL; retryOnRateLimit = 120;
if (nchar(searchString) > 1000) {
stop("searchString can only be up to 1000 characters")
}
if (n <= 0)
stop("n must be positive")
n <- as.integer(n)
if (is.null(since)) {
since_date = NULL
}  else {
since_date = strsplit(since, " ")[[1]][1]
}
if (is.null(until)) {
until_date = NULL
}  else {
until_date = strsplit(until, " ")[[1]][1]
if (until_date == since_date) {
until_date = as.Date(since_date) + 1
}
}
if (!is.null(geocode)) {
geocheck = strsplit(geocode[[1]], ",")[[1]]
lat = as.numeric(geocheck[1])
lon = as.numeric(geocheck[2])
if ((lon > 180) || (lon < -180)) {
stop("Longitude need to be in range [180,-180].")
}
if ((lat > 90) || (lat < -90)) {
stop("Latitude need to be in range [90.0,-90.0].")
}
}
params <- buildCommonArgs(lang = lang, locale = locale, since = since_date,
until = until_date, geocode = geocode, since_id = sinceID,
max_id = maxID, result_type = resultType)
params[["q"]] <- searchString
rm( list = ls() )
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
setup_twitter_oauth(twitter[1], twitter[2], twitter[3], twitter[4])
searchString = "@kwbroman"
n = 25; lang = NULL; since = NULL; until = NULL;
locale = NULL; geocode = NULL; sinceID = NULL; maxID = NULL;
resultType = NULL; retryOnRateLimit = 120;
rm( list = ls() )
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
setup_twitter_oauth(twitter[1], twitter[2], twitter[3], twitter[4])
searchString = "@kwbroman"
user = "strictlystat"
n = 25; lang = NULL; since = NULL; until = NULL;
locale = NULL; geocode = NULL; sinceID = NULL; maxID = NULL;
resultType = NULL; retryOnRateLimit = 120;
if (nchar(searchString) > 1000) {
stop("searchString can only be up to 1000 characters")
}
if (n <= 0)
stop("n must be positive")
n <- as.integer(n)
if (is.null(since)) {
since_date = NULL
}  else {
since_date = strsplit(since, " ")[[1]][1]
}
if (is.null(until)) {
until_date = NULL
}  else {
until_date = strsplit(until, " ")[[1]][1]
if (until_date == since_date) {
until_date = as.Date(since_date) + 1
}
}
if (!is.null(geocode)) {
geocheck = strsplit(geocode[[1]], ",")[[1]]
lat = as.numeric(geocheck[1])
lon = as.numeric(geocheck[2])
if ((lon > 180) || (lon < -180)) {
stop("Longitude need to be in range [180,-180].")
}
if ((lat > 90) || (lat < -90)) {
stop("Latitude need to be in range [90.0,-90.0].")
}
}
params <- twitteR:::buildCommonArgs(lang = lang, locale = locale, since = since_date,
until = until_date, geocode = geocode, since_id = sinceID,
max_id = maxID, result_type = resultType)
params[["q"]] <- searchString
params[["include_entities"]] = TRUE
if (!is.null(user)){
uParams = twitteR:::parseUsers(user)
params[["user_id"]] = uParams[["user_id"]]
params[["screen_name"]] = uParams[["screen_name"]]
}
doRppAPICall
jsonList <- twitteR:::doRppAPICall("search/tweets", n, params = params,
retryOnRateLimit = retryOnRateLimit
)()
jsonList <- twitteR:::doRppAPICall("search/tweets", n, params = params,
retryOnRateLimit = retryOnRateLimit
)
statuses = import_statuses(jsonList)
datetimes = sapply(statuses, function(x) x$getCreated())
if (is.null(since)) {
since_statuses = seq_along(statuses)
} else {
since_statuses = which(datetimes >= as.numeric(as.POSIXct(since,
tz = "UTC")))
}
if (is.null(until)) {
until_statuses = seq_along(statuses)
} else {
until_statuses = which(datetimes <= as.numeric(as.POSIXct(until,
tz = "UTC")))
}
good_statuses = intersect(since_statuses, until_statuses)
good_statuses
statuses[good_statuses]
params
uParams
getSlots
statuses
?statuses
?status
rm( list = ls() )
library(twitteR)
api_file = "~/Dropbox/Twitter_API_Key.txt"
twitter = readLines(api_file)
setup_twitter_oauth(twitter[1], twitter[2], twitter[3], twitter[4])
##############################
# Get favorited tweets by a certain user
##############################
user = "strictlystat"
favs = favorites(user = user, n = 100)
find_user = "kwbroman"
sns = sapply(favs, `[[`, "screenName")
find_user_favs = favs[sns %in% find_user]
find_user = "kwbroman"
sns = sapply(favs, `[[`, "screenName")
find_user_favs = favs[sns %in% find_user]
find_user_favs
?mentions
mentions
ss = searchTwitter("@kwbroman -from:@strictlystat")
ss
ss = searchTwitter("@kwbroman+from:@strictlystat")
ss
ss = searchTwitter("@kwbroman+from:strictlystat")
ss
ss = searchTwitter("kwbroman+from:strictlystat")
ss
searchTwitter()
searchTwitter
ss = searchTwitter("@kwbroman+from:@strictlystat")
searchTwitter()
searchTwitter
searchTwitter()
searchTwitter
?searchTwitter
source('~/Dropbox/Twitter_Example.R')
ss
?searchTwitteR
library("knitcitations")
?cleanbib
?NoCite
library("knitcitations")
library(RefManageR)
bib = RefManageR::ReadBib("Steph.bib")
setwd("~/Desktop")
library("knitcitations")
library(RefManageR)
bib = RefManageR::ReadBib("Steph.bib")
library("knitcitations")
library(RefManageR)
bib = RefManageR::ReadBib("Steph.bib")
NoCite(bib)
bibliography()
?bibliography
bibliography
PrintBibliography()
?PrintBibliography
bibs <- get_bib()
bib
bibs
?get_bib
knitcitations:::get_bib
get_bib_list()
knitcitations:::get_bib_list()
bib
bib = RefManageR::ReadBib("Steph.bib")
bib
bib$`Chisholm-BurnsSchwinghammerWellsMaloneDiPiro201302`
sapply(bib, author)
sapply(bib, `[`, author)
sapply(bib, `[[`, author)
bib[[1]]$`Chisholm-BurnsSchwinghammerWellsMaloneDiPiro201302`
bib[[1]]
x = bib[[1]]
x$`Chisholm-BurnsSchwinghammerWellsMaloneDiPiro201302`
names(x)
class(x)
unlist(x)
author(x)
help(package = "RefManageR")
x['author']
x[['author']]
x$author
x
sapply(bib, function(x) x$key)
xx = sapply(bib, function(x) x$key)
cat(paste0("@", xx, sep= ",")
)
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "More Recommendations for First-Year (and Up) Graduate Students"
categories = c("bmorebiostats")
# categories = "rbloggers"
# categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
