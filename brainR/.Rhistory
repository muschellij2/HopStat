f_imgs = lapply(f_files, readNIfTI)
nawm_file =  system.file("01/FollowUp/nawm.nii.gz", package="SuBLIME")
nawm_mask =  readNIfTI(nawm_file, reorient=FALSE)
dim(nawm_mask) <- dim(nawm_mask)[1:3]
dim(nawm_file)
dim(nawm_mask)
modals = paste0(c("FLAIR", "PD", "T2", "VolumetricT1"), "norm.nii.gz")
base_files = system.file(file.path("01/Baseline", modals), package="SuBLIME")
base_imgs = lapply(base_files, readNIfTI, reorient=FALSE)
f_files = system.file(file.path("01/FollowUp", modals), package="SuBLIME")
f_imgs = lapply(f_files, readNIfTI)
nawm_file =  system.file("01/FollowUp/nawm.nii.gz", package="SuBLIME")
nawm_mask =  readNIfTI(nawm_file, reorient=FALSE)
modals = paste0(c("FLAIR", "PD", "T2", "VolumetricT1"), "norm.nii.gz")
base_files = system.file(file.path("01/Baseline", modals), package="SuBLIME")
base_imgs = lapply(base_files, readNIfTI, reorient=FALSE)
f_files = system.file(file.path("01/FollowUp", modals), package="SuBLIME")
f_imgs = lapply(f_files, readNIfTI, reorient=FALSE)
nawm_file =  system.file("01/FollowUp/nawm.nii.gz", package="SuBLIME")
nawm_mask =  readNIfTI(nawm_file, reorient=FALSE)
orthographic(nawm_mask)
orthographic(f_imags[[1]])
orthographic(f_imgs[[1]])
orthographic(f_imags[[1]])
orthographic(nawm_mask)
names(base_imgs)
base_imgs
modes = c("FLAIR", "PD", "T2", "VolumetricT1")
modals = paste0(modes, "norm.nii.gz")
base_files = system.file(file.path("01/Baseline", modals), package="SuBLIME")
base_imgs = lapply(base_files, readNIfTI, reorient=FALSE)
f_files = system.file(file.path("01/FollowUp", modals), package="SuBLIME")
f_imgs = lapply(f_files, readNIfTI, reorient=FALSE)
names(base_imgs) = names(f_imgs) = modes
nawm_file =  system.file("01/FollowUp/nawm.nii.gz", package="SuBLIME")
nawm_mask =  readNIfTI(nawm_file, reorient=FALSE)
brain_file =  system.file("01/duramask.nii.gz", package="SuBLIME")
brain_mask =  readNIfTI(brain_file, reorient=FALSE)
outimg = SuBLIME_prediction(base_imgs[["FLAIR"]],
f_imgs[["FLAIR"]], base_imgs[["PD"]], f_imgs[["PD"]],
base_imgs[["T2"]], f_imgs[["T2"]],
base_imgs[["VolumetricT1"]], f_imgs[["VolumetricT1"]],
time_diff = 1,
nawm_mask = nawm_mask,
brain_mask = brain_mask)
baseline_flair = base_imgs[["FLAIR"]]
modes = c("FLAIR", "PD", "T2", "VolumetricT1")
modals = paste0(modes, "norm.nii.gz")
base_files = system.file(file.path("01/Baseline", modals), package="SuBLIME")
base_imgs = lapply(base_files, readNIfTI, reorient=FALSE)
f_files = system.file(file.path("01/FollowUp", modals), package="SuBLIME")
f_imgs = lapply(f_files, readNIfTI, reorient=FALSE)
names(base_imgs) = names(f_imgs) = modes
nawm_file =  system.file("01/FollowUp/nawm.nii.gz", package="SuBLIME")
nawm_mask =  readNIfTI(nawm_file, reorient=FALSE)
brain_file =  system.file("01/duramask.nii.gz", package="SuBLIME")
brain_mask =  readNIfTI(brain_file, reorient=FALSE)
outimg = SuBLIME_prediction(
baseline_flair = base_imgs[["FLAIR"]],
follow_up_flair= f_imgs[["FLAIR"]],
baseline_pd = base_imgs[["PD"]],
follow_up_pd = f_imgs[["PD"]],
baseline_t2 = base_imgs[["T2"]],
follow_up_t2 = f_imgs[["T2"]],
baseline_t1 = base_imgs[["VolumetricT1"]],
follow_up_t1 = f_imgs[["VolumetricT1"]],
time_diff = 1,
nawm_mask = nawm_mask,
brain_mask = brain_mask)
baseline_flair = base_imgs[["FLAIR"]]
follow_up_flair= f_imgs[["FLAIR"]]
baseline_pd = base_imgs[["PD"]]
follow_up_pd = f_imgs[["PD"]]
baseline_t2 = base_imgs[["T2"]]
follow_up_t2 = f_imgs[["T2"]]
baseline_t1 = base_imgs[["VolumetricT1"]]
follow_up_t1 = f_imgs[["VolumetricT1"]]
time_diff = 1
nawm_mask = nawm_mask
brain_mask = brain_mask
smooth.using = c("GaussSmoothArray")
smooth.using = smooth.using[1]
makec = function(arr){
return(c(arr))
}
nm = nawm_mask[1]
if (!inherits(nm, "logical")){
nawm_mask = nawm_mask > 0
}
bm = brain_mask[1]
if (!inherits(bm, "logical")){
brain_mask = brain_mask > 0
}
img.dim = dim(baseline_flair)[1:3]
time_diff = array(time_diff,dim=img.dim)
l.imgs = list(baseline_flair = baseline_flair,
follow_up_flair = follow_up_flair,
baseline_pd = baseline_pd,
follow_up_pd = follow_up_pd,
baseline_t2 = baseline_t2,
follow_up_t2 = follow_up_t2,
baseline_t1 = baseline_t1,
follow_up_t1 = follow_up_t1
)
sapply(l.imgs, function(x){
stopifnot(all.equal(dim(x)[1:3], img.dim))
})
norm.imgs = lapply(l.imgs, function(image){
x = normalize(image= image, mask = nawm_mask)
})
?v
?normalize
nawm_mask
l.imgs[[1]]
image = l.imgs[[1]]
nawm_mask
x = normalize(image = image, mask = nawm_mask)
normalize
mask = nawm_mask
norm.imgs = lapply(l.imgs, function(image){
library(SubLIME)
library(SuBLIME)
modes = c("FLAIR", "PD", "T2", "VolumetricT1")
modals = paste0(modes, "norm.nii.gz")
base_files = system.file(file.path("01/Baseline", modals), package="SuBLIME")
base_imgs = lapply(base_files, readNIfTI, reorient=FALSE)
f_files = system.file(file.path("01/FollowUp", modals), package="SuBLIME")
f_imgs = lapply(f_files, readNIfTI, reorient=FALSE)
names(base_imgs) = names(f_imgs) = modes
nawm_file =  system.file("01/FollowUp/nawm.nii.gz", package="SuBLIME")
nawm_mask =  readNIfTI(nawm_file, reorient=FALSE)
brain_file =  system.file("01/duramask.nii.gz", package="SuBLIME")
brain_mask =  readNIfTI(brain_file, reorient=FALSE)
model = c("(Intercept)" =-7.7420, FLAIR =0.7412, PD =0.4099, T2=-0.3226,
T1= 0.7807, FLAIR_diff =  0.1841, PD_diff= 0.5383,
T2_diff = 0.8546, T1_diff = -0.9016)
baseline_flair = base_imgs[["FLAIR"]]
follow_up_flair= f_imgs[["FLAIR"]]
baseline_pd = base_imgs[["PD"]]
baseline_pd = base_imgs[["PD"]],
follow_up_pd = f_imgs[["PD"]]
follow_up_pd = f_imgs[["PD"]]
baseline_t2 = base_imgs[["T2"]]
baseline_t2 = base_imgs[["T2"]],
follow_up_t2 = f_imgs[["T2"]]
follow_up_t2 = f_imgs[["T2"]]
baseline_t1 = base_imgs[["VolumetricT1"]]
follow_up_t1 = f_imgs[["VolumetricT1"]]
time_diff = 1
nawm_mask = nawm_mask
##requires the package AnalyzeFMRI for volume smoothing##
smooth.using = smooth.using[1]
makec = function(arr){
return(c(arr))
}
nm = nawm_mask[1]
if (!inherits(nm, "logical")){
nawm_mask = nawm_mask > 0
}
bm = brain_mask[1]
if (!inherits(bm, "logical")){
brain_mask = brain_mask > 0
}
#### Get image dimension
img.dim = dim(baseline_flair)[1:3]
##create an image with the time difference between scans##
time_diff = array(time_diff,dim=img.dim)
l.imgs = list(baseline_flair = baseline_flair,
follow_up_flair = follow_up_flair,
baseline_pd = baseline_pd,
follow_up_pd = follow_up_pd,
baseline_t2 = baseline_t2,
follow_up_t2 = follow_up_t2,
baseline_t1 = baseline_t1,
follow_up_t1 = follow_up_t1
)
#### check image dimensions
sapply(l.imgs, function(x){
stopifnot(all.equal(dim(x)[1:3], img.dim))
})
if (verbose){
cat("Intensity-Normalizing Images\n")
}
##normalize all images and string them out##
norm.imgs = lapply(l.imgs, function(image){
x = normalize(image = image, mask = nawm_mask)
})
names(norm.imgs) = paste0('normalized_', names(norm.imgs))
modes = c("flair", "pd", "t2", "t1")
### cleanup
#   rm(list=paste0("baseline_", modes))
if (verbose){
cat("Creating Data Matrix\n")
}
##create dataframe with images for prediction##
SuBLIME_data <- data.frame(
FLAIR = c(norm.imgs$normalized_follow_up_flair),
PD = c(norm.imgs$normalized_follow_up_pd),
T2 = c(norm.imgs$normalized_follow_up_t2),
T1 = c(norm.imgs$normalized_follow_up_t1),
FLAIR_diff = c(norm.imgs$normalized_follow_up_flair - norm.imgs$normalized_baseline_flair),
PD_diff = c(norm.imgs$normalized_follow_up_pd - norm.imgs$normalized_baseline_pd),
T2_diff = c(norm.imgs$normalized_follow_up_t2 - norm.imgs$normalized_baseline_t2),
T1_diff = c(norm.imgs$normalized_follow_up_t1 - norm.imgs$normalized_baseline_t1),
time_diff = c(time_diff))
if (verbose){
cat("Making Predictions\n")
}
verbose = TRUE
inherits(model, "lm")
inherits(model, "matrix")
model = t(t(model))
model
rn = rownames(model)
rn = rn[!(rn %in% c("(Intercept)"))]
cn = colnames(SuBLIME_data)
cn
rn
all(rn %in% cn)
c(model)
rn
SuBLIME_data <- data.frame(
FLAIR = c(norm.imgs$normalized_follow_up_flair),
PD = c(norm.imgs$normalized_follow_up_pd),
T2 = c(norm.imgs$normalized_follow_up_t2),
T1 = c(norm.imgs$normalized_follow_up_t1),
FLAIR_diff = c(norm.imgs$normalized_follow_up_flair - norm.imgs$normalized_baseline_flair),
PD_diff = c(norm.imgs$normalized_follow_up_pd - norm.imgs$normalized_baseline_pd),
T2_diff = c(norm.imgs$normalized_follow_up_t2 - norm.imgs$normalized_baseline_t2),
T1_diff = c(norm.imgs$normalized_follow_up_t1 - norm.imgs$normalized_baseline_t1),
time_diff = c(time_diff),
"(Intercept)" = 1)
rn = rownames(model)
cn = colnames(SuBLIME_data)
rn
model
preds = SuBLIME_data %*% rn
rn = rownames(model)
cn = colnames(SuBLIME_data)
stopifnot(all(rn %in% cn))
SuBLIME_data = SuBLIME_data[, rn]
rn
cn
##create dataframe with images for prediction##
SuBLIME_data <- data.frame(
FLAIR = c(norm.imgs$normalized_follow_up_flair),
PD = c(norm.imgs$normalized_follow_up_pd),
T2 = c(norm.imgs$normalized_follow_up_t2),
T1 = c(norm.imgs$normalized_follow_up_t1),
FLAIR_diff = c(norm.imgs$normalized_follow_up_flair - norm.imgs$normalized_baseline_flair),
PD_diff = c(norm.imgs$normalized_follow_up_pd - norm.imgs$normalized_baseline_pd),
T2_diff = c(norm.imgs$normalized_follow_up_t2 - norm.imgs$normalized_baseline_t2),
T1_diff = c(norm.imgs$normalized_follow_up_t1 - norm.imgs$normalized_baseline_t1),
time_diff = c(time_diff))
SuBLIME_data$"(Intercept)" = 1
rn = rownames(model)
cn = colnames(SuBLIME_data)
stopifnot(all(rn %in% cn))
SuBLIME_data = SuBLIME_data[, rn]
preds = SuBLIME_data %*% rn
preds = SuBLIME_data %*% model
dim(model)
dim(SuBLIME_data)
SuBLIME_data = as.matrix(SuBLIME_data[, rn])
preds = SuBLIME_data %*% model
preds
hist(preds)
?glm
df = data.frame(x= rbinom(100, size=1))
df = data.frame(x= rbinom(100, size=1, prob=.5), y=rnorm(100))
df
model = glm(x ~ y, family=binomial())
model = glm(x ~ y, data=df, family=binomial())
model
model$family
model$family()
model$family$linkinv
model$family$link
model$family$linkfun
rn = rownames(model)
cn = colnames(SuBLIME_data)
stopifnot(all(rn %in% cn))
SuBLIME_data = as.matrix(SuBLIME_data[, rn])
preds = SuBLIME_data %*% model
preds = 1/(1+exp(-preds))
library(animate)
library(animation)
help(pacakge="animation")
help(package="animation")
install.packages("shiny")
install.packages("devtools")
install.packages("bit")
install.packages("nnet")
install.packages("nnet")
install.packages("swirl")
library(swirl)
swirl()
swirl()
exit
q('no')
is.finite
?is.finite
library(knitr)
opts_chunk$set(echo=FALSE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
library(knitcitations)
library(brainR)
help(package="brainR")
?writeWebGL
citation("SuBLIME")
x = citation("SuBLIME")
x
x
?write.bibtex
library(knitcitations)
?write.bibtex
library(oro.nifti)
img = readNIfTI("~/Desktop/scratch/VolumetricT1.nii.gz")
img = readNIfTI("~/Desktop/scratch/VolumetricT1.nii.gz", reorient=FALSE)
library(WhiteStripe)
x = whitestripe(oimg)
x = whitestripe(img)
x
?whitestripe_norm
library(WhiteStripe)
img = readNIfTI("~/Desktop/scratch/")
img = readNIfTI("~/Desktop/scratch/VolumetricT1.nii.gz", reorient=FALSE)
x = whitestripe(img)
?whitestripe_norm
help(package="WhiteStripe")
norm.img = whitestripe(img, indices = x$whitestripe.ind)
hist(norm.img)
class(norm.img)
norm.img = whitestripe_norm(img, indices = x$whitestripe.ind)
hist(norm.img)
orthographic(norm.img)
orthographic(norm.img + min(norm.img))
image(norm.img)
image(norm.img, z= 80)
?image.nifti
image(norm.img, z= 80, plot.type="single")
xx = norm.img
xx@cal_max = max(norm.img)
xx@cal_min = min(norm.img)
image(xx, z= 80, plot.type="single")
library(SuBLIME)
modes = c("FLAIR", "PD", "T2", "VolumetricT1")
modals = paste0(modes, "norm.nii.gz")
base_files = system.file(file.path("01/Baseline", modals), package="SuBLIME")
base_imgs = lapply(base_files, readNIfTI, reorient=FALSE)
f_files = system.file(file.path("01/FollowUp", modals), package="SuBLIME")
f_imgs = lapply(f_files, readNIfTI, reorient=FALSE)
names(base_imgs) = names(f_imgs) = modes
baseline_nawm_file =  system.file("01/Baseline/nawm.nii.gz", package="SuBLIME")
baseline_nawm_mask =  readNIfTI(baseline_nawm_file, reorient=FALSE)
baseline_nawm_mask = drop(baseline_nawm_mask)
follow_up_nawm_file =  system.file("01/FollowUp/nawm.nii.gz", package="SuBLIME")
follow_up_nawm_mask =  readNIfTI(follow_up_nawm_file, reorient=FALSE)
brain_file =  system.file("01/duramask.nii.gz", package="SuBLIME")
brain_mask =  readNIfTI(brain_file, reorient=FALSE)
load("~/Downloads/SubModel.Rda")
model=SuBLIME_model
model
outimg = SuBLIME_prediction(
baseline_flair = base_imgs[["FLAIR"]],
follow_up_flair= f_imgs[["FLAIR"]],
baseline_pd = base_imgs[["PD"]],
follow_up_pd = f_imgs[["PD"]],
baseline_t2 = base_imgs[["T2"]],
follow_up_t2 = f_imgs[["T2"]],
baseline_t1 = base_imgs[["VolumetricT1"]],
follow_up_t1 = f_imgs[["VolumetricT1"]],
time_diff = 1,
baseline_nawm_mask = baseline_nawm_mask,
brain_mask = brain_mask,
model = model
)
library(SuBLIME)
modes = c("FLAIR", "PD", "T2", "VolumetricT1")
modals = paste0(modes, "norm.nii.gz")
base_files = system.file(file.path("01/Baseline", modals), package="SuBLIME")
base_imgs = lapply(base_files, readNIfTI, reorient=FALSE)
f_files = system.file(file.path("01/FollowUp", modals), package="SuBLIME")
f_imgs = lapply(f_files, readNIfTI, reorient=FALSE)
names(base_imgs) = names(f_imgs) = modes
baseline_nawm_file =  system.file("01/Baseline/nawm.nii.gz", package="SuBLIME")
baseline_nawm_mask =  readNIfTI(baseline_nawm_file, reorient=FALSE)
baseline_nawm_mask = drop(baseline_nawm_mask)
follow_up_nawm_file =  system.file("01/FollowUp/nawm.nii.gz", package="SuBLIME")
follow_up_nawm_mask =  readNIfTI(follow_up_nawm_file, reorient=FALSE)
brain_file =  system.file("01/duramask.nii.gz", package="SuBLIME")
brain_mask =  readNIfTI(brain_file, reorient=FALSE)
brain_mask = drop(brain_mask)
bm = brain_mask
bm[bm==0] = NA
?overlay
?orthographic
library(scales); orthographic(f_imgs$FLAIR, bm, col.y = alpha("red", .5))
modes = c("FLAIR", "PD", "T2", "VolumetricT1")
modals = paste0(modes, "norm.nii.gz")
base_files = system.file(file.path("01/Baseline", modals), package="SuBLIME")
base_imgs = lapply(base_files, readNIfTI, reorient=FALSE)
f_files = system.file(file.path("01/FollowUp", modals), package="SuBLIME")
f_imgs = lapply(f_files, readNIfTI, reorient=FALSE)
names(base_imgs) = names(f_imgs) = modes
baseline_nawm_file =  system.file("01/Baseline/nawm.nii.gz", package="SuBLIME")
baseline_nawm_mask =  readNIfTI(baseline_nawm_file, reorient=FALSE)
baseline_nawm_mask = drop(baseline_nawm_mask)
follow_up_nawm_file =  system.file("01/FollowUp/nawm.nii.gz", package="SuBLIME")
follow_up_nawm_mask =  readNIfTI(follow_up_nawm_file, reorient=FALSE)
brain_file =  system.file("01/duramask.nii.gz", package="SuBLIME")
brain_mask =  readNIfTI(brain_file, reorient=FALSE)
brain_mask = drop(brain_mask)
follow_up_nawm_mask = NULL
baseline_nawm_mask = NULL
smooth.using = "GaussSmoothArray"
verbose = TRUE
time_diff = 10
voxsel = FALSE
model = SuBLIME_model
voxsel.sigma = s.sigma =diag(3,3)
s.ksize = 3
voxsel.ksize = 5
outimg = SuBLIME_prediction(
baseline_flair = base_imgs[["FLAIR"]],
follow_up_flair= f_imgs[["FLAIR"]],
baseline_pd = base_imgs[["PD"]],
follow_up_pd = f_imgs[["PD"]],
baseline_t2 = base_imgs[["T2"]],
follow_up_t2 = f_imgs[["T2"]],
baseline_t1 = base_imgs[["VolumetricT1"]],
follow_up_t1 = f_imgs[["VolumetricT1"]],
time_diff = time_diff,
baseline_nawm_mask = baseline_nawm_mask,
brain_mask = brain_mask,
voxsel = voxsel,
model = model
)
voxsel = TRUE
model = SuBLIME_model
voxsel.sigma = s.sigma =diag(3,3)
s.ksize = 3
voxsel.ksize = 5
outimg = SuBLIME_prediction(
baseline_flair = base_imgs[["FLAIR"]],
follow_up_flair= f_imgs[["FLAIR"]],
baseline_pd = base_imgs[["PD"]],
follow_up_pd = f_imgs[["PD"]],
baseline_t2 = base_imgs[["T2"]],
follow_up_t2 = f_imgs[["T2"]],
baseline_t1 = base_imgs[["VolumetricT1"]],
follow_up_t1 = f_imgs[["VolumetricT1"]],
time_diff = time_diff,
baseline_nawm_mask = baseline_nawm_mask,
brain_mask = brain_mask,
voxsel = voxsel,
model = model
)
library(knitcitations)
?write.bibtex
?bibentry
setwd("~/Dropbox/Public/WordPress_Hopstat/")
setwd("brainR/")
dir(
)
nonR = read.bibtex("nonR.bib")
nonR
nonR["sublime"]
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "brainR"
mytitle <- 'brainR: Put your brain on the Cloud!'
categories = c("rbloggers", "bmorebiostats")
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
######### Send it to the Website
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#   opts_knit$set(
#     base.url = paste0(
#       'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                 base.dir = wpdir)
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
knit2wp(rmdname,
title = mytitle, categories = categories,
shortcode=TRUE, post_date_gmt = "20140430T11:11:04Z",
publish=publish)
}
