df
select(df, -x)
df = select(df, -x)
select(df, -c("y", "z"))
-c("y", "z")
select(df, -y, yz
select(df, -y, -z)
select(df, -c(y, z))
select(df, c(-y, -z))
df[, -c("y", "z")]
df[, -c(y, z)]
## ---- echo = FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(comment = "")
## ------------------------------------------------------------------------
x = c(1, 4, 2, 8, 10)
x[2]
## ------------------------------------------------------------------------
x = c(1, 2, 4, 8, 10)
x[5]
x[c(2,5)]
## ----negativeIndex-------------------------------------------------------
x[-2] # all but the second
## ----negativeIndex2------------------------------------------------------
x[-c(1,2,3)] # drop first 3
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
## ------------------------------------------------------------------------
x
x > 2
x[ x > 2 ]
## ------------------------------------------------------------------------
x[ x > 2 & x < 5 ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
which(x > 5 | x == 2) # returns index
x[ which(x > 5 | x == 2) ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
set.seed(2016) # reproducbility
df = data.frame(x = c(1, 2, 4, 10, 10),
x2 = rpois(5, 10),
y = rnorm(5),
z = rpois(5, 6)
)
## ------------------------------------------------------------------------
colnames(df) = c("x", "X", "y", "z")
head(df)
colnames(df) = c("x", "x2", "y", "z") #reset
df
cn =colnames(df)
c("z", cn[ cn!="z"])
c("z", colnames(df)[ colnames(df)!="z"])
c("z", cn[ cn!="z"])
select(df, everything(), x)
select(df, everything(), y)
?select
select(df, -matches("x"))
select(df, -matches("x"), matches('x'))
select(df, -one_of("x"), one_of('x'))
help("select")
help("filter")
?filter
library(dplyr)
?filter
?select
## ---- echo = FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(comment = "")
## ------------------------------------------------------------------------
x = c(1, 4, 2, 8, 10)
x[2]
## ------------------------------------------------------------------------
x = c(1, 2, 4, 8, 10)
x[5]
x[c(2,5)]
## ----negativeIndex-------------------------------------------------------
x[-2] # all but the second
## ----negativeIndex2------------------------------------------------------
x[-c(1,2,3)] # drop first 3
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
## ------------------------------------------------------------------------
x
x > 2
x[ x > 2 ]
## ------------------------------------------------------------------------
x[ x > 2 & x < 5 ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
which(x > 5 | x == 2) # returns index
x[ which(x > 5 | x == 2) ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
set.seed(2016) # reproducbility
df = data.frame(x = c(1, 2, 4, 10, 10),
x2 = rpois(5, 10),
y = rnorm(5),
z = rpois(5, 6)
)
## ------------------------------------------------------------------------
colnames(df) = c("x", "X", "y", "z")
head(df)
colnames(df) = c("x", "x2", "y", "z") #reset
df
df[ order(df$y),]
arrange(df, x
)
arrange(df, x, z)
)
arrange(df, x)
arrange(df, x, z)
arrange(df, desc(x))
arrange(df, desc(x), z)
filter(df, x == 1)
filter(df, x != 1)
?sample_frac()
Inf . 2
Inf > 2
NaN > 2
mystr = c("Hey", "", "ho", "let's", "go")
is.na(mystr)
mystr[ mystr == ""] = NA
is.na(mystr)
mystr
factor(mystr)
NA & TRUE
NA & FALSE
NA | TRUE
NA & TRUE
?table
tab <- table(c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3),
useNA = "always")
tab
tab <- table(x = c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
y = c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3),
useNA = "always")
tab
x = c(0, 1, 2, 3, 2, 3, 3, 2,2, 3);
y = c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3)
x
y
table(x, y)
table(x)
table(y)
table(x, y)
prop.table(table(x, y), 1)
prop.table(table(x, y), 2)
prop.table(table(x))
library(car, quietly = TRUE)
x = rep(c("Male", "M", "m", "f", "Female", "female" ),
each = 3)
x
unique(x)
table(x)
sort(table(x))
sample(x)
sample(x, , size = 10replace = FALSE)
sample(x, , size = 10,replace = FALSE)
table(sample(x, , size = 10,replace = FALS)E)
table(sample(x, , size = 10,replace = FALSE))
tab  = table(sample(x, , size = 10,replace = FALSE))
sort(tab)
sort(tab, decreasing = TRUE)
tab[tab > 1]
duplicated(x)
x
table(x)
tab = table(x)
tab  = table(sample(x, , size = 10,replace = FALSE))
tab
tab[ tab > 1]
names(tab[ tab > 1])
x = c("hey", 'ho')
x
x = c("hey", "Let's go")
paste("Visit", 1:5)
paste0("Visit", 1:5)
strsplit("I.like.strings", ".")
strsplit("I.like.strings", ".", fixed = TRUE)
?str_detect
library(stringr)
?str_detect
?str_split
?str_extract
?modifiers
cbind(rep("Monday", 3), c("orangeAlightings", "orangeAverage", "orangeBoardings"))
cbind(rep("Monday", 3), rep("orange", 3), Average = rnorm(3), Alightings = rnorm(3), Boardings = rnorm(3))
data.frame(rep("Monday", 3), rep("orange", 3), Average = rnorm(3), Alightings = rnorm(3), Boardings = rnorm(3))
cbind(rep("Monday", 3), c("orangeAlightings", "orangeAverage", "orangeBoardings"))
library(lubridate)
mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
?as.Date
mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
dmy(c("01-06-2016", "01-06/2016", "01/06/2016"))
mydays = mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
day(mydays)
month(mydays)
year(mydays)
?year
?month
mydays - 1
?period
mydays - period(1, "day")
?difftime
mydays = mdy(c("01-06-2016", "01-06/2016", "01/06/2016", "01-08-2016", "01-01-2016"))
mydays
?difftime
difftime(mydays, mydays[1])
difftime(mydays, mydays[1], units = "days")
dt = difftime(mydays, mydays[1], units = "days")
class(dt)
as.numeric(dt)
mydays
cbind(mydays, 0:length(mydays))
cbind(mydays, 0:length(mydays)-1)
cbind(mydays, 0:(length(mydays)-1))
data.frame(mydays, 0:(length(mydays)-1))
data.frame(mydays, days_from_baseline = 0:(length(mydays)-1))
mat = matrix(c("0", "No Stroke Symptoms",
"1-4", "Minor Stroke",
"5-15", "Moderate Stroke",
"16-20", "Moderate to Severe Stroke",
"21-42", "Severe Stroke"), byrow = TRUE, ncol = 5)
colnames(mat) = c("NIHSS Score", "Stroke Severity")
mat
mat = matrix(c("0", "No Stroke Symptoms",
"1-4", "Minor Stroke",
"5-15", "Moderate Stroke",
"16-20", "Moderate to Severe Stroke",
"21-42", "Severe Stroke"), byrow = TRUE, ncol = 2)
colnames(mat) = c("NIHSS Score", "Stroke Severity")
mat
pander(mat)
library(pander)
pander(mat)
mat = data.frame(mat, stringsAsFactors = FALSE)
pander(mat)
library(rms)
tmpfun <- function(n, beta0, beta1, beta2) {
x <- runif(n, 0, 10)
eta1 <- beta0 + beta1*x
eta2 <- eta1 + beta2
p1 <- exp(eta1)/(1+exp(eta1))
p2 <- exp(eta2)/(1+exp(eta2))
tmp <- runif(n)
y <- (tmp < p1) + (tmp < p2)
fit <- lrm(y~x)
fit$stats[5]
}
out <- replicate(1000, tmpfun(100, -1/2, 1/4, 1/4))
mean( out < 0.05 )
source('~/.active-rstudio-document', echo=TRUE)
install.packages("~/Downloads/ANTsR_0.3.2.tgz", repos = NULL, type = .Platform$pkgType)
rm(list=ls())
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "How I build up a ggplot2 figure"
categories = c("bmorebiostats", "rbloggers")
# categories = "rbloggers"
# categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("---\n",
paste0('title: "', mytitle, '"\n'),
'author: "John Muschelli"\n',
"date: '`r Sys.Date()`'\n", "output: html_document\n", "---\n")
addtxt = paste0(addtxt,
"```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file = rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
ggplot() + geom_point(data=quakes,aes(x=lat,y=long,colour=stations))
library(ggplot2)
ggplot() + geom_point(data=quakes,aes(x=lat,y=long,colour=stations))
g = ggplot() + geom_point(data=quakes,aes(x=lat,y=long,colour=stations))
g
?element_text
?theme
?element_text
g + theme(text = element_text(size = 15))
g + theme(text = element_text(size = 20))
g + theme(axis.text = element_text(size = 15),
axis.title = element_text(size = 20),
legend.text = element_text(size = 10))
g + theme(axis.text = element_text(size = 15),
axis.title = element_text(size = 20),
legend.text = element_text(size = 10),
legend.title = element_text(size = 15))
?theme
g + theme(axis.text = element_text(size = 15),
axis.title = element_text(size = 20),
legend.text = element_text(size = 10),
legend.title = element_text(size = 15))
```
g + theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 10),
legend.title = element_text(size = 15))
gbig = gbig + xlab("Latitude") + ylab("Longitude")
gbig = g + theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 10),
legend.title = element_text(size = 15))
gbig
gbig = gbig + xlab("Latitude") + ylab("Longitude")
gbig
?main
gbig + ggtile("Spatial Distribution of Stations")
gbig + ggtitle("Spatial Distribution of Stations")
?theme
gbig +
ggtitle("Spatial Distribution of Stations") +
theme(title = element_text(size = 25))
?guides
?guide_colorbar
gbigleg = gbig + guides(colour = guide_colorbar(title = "Number of Statiosn"))
gbigleg
gbigleg = gbig + guides(colour = guide_colorbar(title = "Number\nof\nStations"))
gbigleg
?guide_colorbar
source('~/.active-rstudio-document', echo=TRUE)
library(knitr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
source("How_I_build_up_a_ggplot2_figure.Rmd")
library(knitr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
ggplot(data = quakes, aes(x = lat,y = long,colour = stations)) + geom_point()
library(knitr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
ggplot(data = quakes, aes(x = lat,y = long,colour = stations)) + geom_point()
source('~/.active-rstudio-document', echo=TRUE)
?guides
?guide_colorbar
guides(colour = guide_colorbar(title = "Number\nof\nStations",
title.hjust = "center"))
gbigleg = gbigleg +
guides(colour = guide_colorbar(title = "Number\nof\nStations",
title.hjust = "center"))
gbigleg
?guide_colorbar
```{r leg_adjust}
gbigleg = gbigleg +
guides(colour = guide_colorbar(title = "Number\nof\nStations",
title.hjust =0.5))
gbigleg
gbigleg +
theme(legend.position = c(0.3, 0.5))
source('~/.active-rstudio-document', echo=TRUE)
gbigleg +
theme(legend.position = c(0.3, 0.35))
?xlim
source('~/.active-rstudio-document', echo=TRUE)
gbigleg_orig = gbig +
guides(colour = guide_colorbar(title = "Number of Stations Reporting",
title.hjust = 0.5))
gbigleg_orig +
theme(legend.position = c(0.3, 0.35)) +
transparent_legend
gbigleg_orig = gbig +
guides(colour = guide_colorbar(title = "Number of Stations Reporting",
title.hjust = 0.5,
title.vjust = 0.5))
gbigleg_orig +
theme(legend.position = c(0.3, 0.35)) +
transparent_legend
source('~/.active-rstudio-document', echo=TRUE)
?guide_colorbar
gbigleg_orig = gbig +
guides(colour = guide_colorbar(title = "Number of Stations Reporting",
title.hjust = 1,
title.vjust = 0.5))
gbigleg_orig +
theme(legend.position = c(0.3, 0.35)) +
transparent_legend
gbigleg_orig = gbig +
guides(colour = guide_colorbar(title = "Number of Stations Reporting",
title.hjust = 1,
title.vjust = 1))
gbigleg_orig +
theme(legend.position = c(0.3, 0.35)) +
transparent_legend
gbig
?guide_colorbar
source('~/.active-rstudio-document', echo=TRUE)
gtrans_leg + guides(colour = guide_colorbar(title.position = "left"))
source('~/.active-rstudio-document', echo=TRUE)
gtrans_leg$guides
gtrans_leg$guides$colour
gtrans_leg$guides$colour$title.position
show(g)
gbigleg +
theme(legend.position = c(0.3, 0.35)) +
ylim(c(160, max(quakes$long)))
```
theme_classic()
source('~/.active-rstudio-document', echo=TRUE)
gtrans_leg + theme_classic()
gtrans_leg + theme_bw()
g
g + theme_dark()
g + theme_minimal()
g + theme_void()
?Indometh
Indometh
?data
help(package = "data")
help(package = "datasets")
cars
mtcars
g = ggplot(aes(y = am), data = df) +
geom_point() +
geom_smooth(method = "glm", family = binomial, se = FALSE) +
geom_boxplot()
g = ggplot(aes(y = am), data = mtcars) +
geom_point() +
geom_smooth(method = "glm", family = binomial, se = FALSE) +
geom_boxplot()
?geom_smooth
g = ggplot(aes(y = am), data = mtcars) +
geom_point() +
geom_smooth(method = "glm", family = binomial(), se = FALSE) +
geom_boxplot()
g = ggplot(aes(y = am), data = mtcars) +
geom_point() +
geom_smooth(method = "gam", family = binomial(), se = FALSE) +
geom_boxplot()
g = ggplot(aes(y = am), data = mtcars) +
geom_point() +
geom_smooth(method = "gam", family = "binomial", se = FALSE) +
geom_boxplot()
geom_smooth(se = FALSE,
family = binomial())
?geom_smooth
?binomial_smooth
??binomial_smooth
?geom_smooth
g = ggplot(aes(y = am), data = mtcars) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
geom_boxplot()
g + aes(x = mpg)
g = ggplot(aes(y = am), data = mtcars) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE)
g + aes(x = mpg)
g = ggplot(aes(y = am), data = mtcars) +
geom_point() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"), se = FALSE) +
geom_smooth(se = FALSE, col = "red")
g
g + aes(x = mpg)
g = ggplot(aes(y = am), data = mtcars) +
geom_point(position = position_jitter(height = 0.2)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"), se = FALSE) +
geom_smooth(se = FALSE, col = "red")
g
names(mtcars)
g + aes(x =carb)
head(mtcars)
g + aes(x =drat)
g + aes(x = qsec)
source('~/Dropbox/My_Website/WordPresser.R')
