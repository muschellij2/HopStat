xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*(1-ndcY)/0.5, Y),
z)
}
if (ndcX >= 0.5 & ndcY >= 0.5){
#top right
xyz = c(x,
mfunc(Y*(1-ndcX)/0.5, Y),
mfunc(Z*(1-ndcY)/0.5, Z)
)
}
if (ndcX < 0.5 & ndcY < 0.5){
#bottom left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*ndcY/0.5, Y),
z)
}
if (ndcX > 0.5 & ndcY < 0.5){
#bottom right
xyz = NULL
}
print(pos)
print(pd)
#       print(xyz)
}
par(mai=rep(0, 4), outer=FALSE)
orthographic(img, xyz=xyz, bg = "white", xaxs = "i", yaxs="i")
par(oldpar)
} )
}
iortho(img)
iortho = function(img){
oldpar <- par(no.readonly = TRUE)
par(xpd = NA)
manipulate({
pos <- manipulatorMouseClick()
X <- nrow(img)
Y <- ncol(img)
Z <- nsli(img)
pdim = voxdim(img)
xyz <<- ceiling(c(X, Y, Z)/2)
mfunc = function(r, mval){
min(max(1, floor(r)), mval)
}
if (!is.null(pos)) {
ndcX = pos$ndcX
ndcY = pos$ndcY
x = xyz[1]
y = xyz[2]
z = xyz[3]
pd = par("din")
usr <- par("usr")
plt <- par("plt")
mfg <- par("mfg")
if (ndcX < 0.5 & ndcY >= 0.5){
#top left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*(1-ndcY)/0.5, Y),
z)
}
if (ndcX >= 0.5 & ndcY >= 0.5){
#top right
xyz = c(x,
mfunc(Y*(1-ndcX)/0.5, Y),
mfunc(Z*(1-ndcY)/0.5, Z)
)
}
if (ndcX < 0.5 & ndcY < 0.5){
#bottom left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*ndcY/0.5, Y),
z)
}
if (ndcX > 0.5 & ndcY < 0.5){
#bottom right
xyz = NULL
}
print(pos)
print(pd)
#       print(xyz)
}
orthographic(img, xyz=xyz, bg = "white")
par(oldpar)
} )
}
iortho(img)
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
iortho = function(img){
oldpar <- par(no.readonly = TRUE)
par(xpd = NA)
manipulate({
pos <- manipulatorMouseClick()
X <- nrow(img)
Y <- ncol(img)
Z <- nsli(img)
pdim = voxdim(img)
xyz <<- ceiling(c(X, Y, Z)/2)
mfunc = function(r, mval){
min(max(1, floor(r)), mval)
}
if (!is.null(pos)) {
ndcX = pos$ndcX
ndcY = pos$ndcY
x = xyz[1]
y = xyz[2]
z = xyz[3]
pd = par("din")
usr <- par("usr")
plt <- par("plt")
mfg <- par("mfg")
if (ndcX < 0.5 & ndcY >= 0.5){
#top left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*(1-ndcY)/0.5, Y),
z)
}
if (ndcX >= 0.5 & ndcY >= 0.5){
#top right
xyz = c(x,
mfunc(Y*(1-ndcX)/0.5, Y),
mfunc(Z*(1-ndcY)/0.5, Z)
)
}
if (ndcX < 0.5 & ndcY < 0.5){
#bottom left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*ndcY/0.5, Y),
z)
}
if (ndcX > 0.5 & ndcY < 0.5){
#bottom right
xyz = NULL
}
print(pos)
print(pd)
#       print(xyz)
}
orthographic(img, xyz=xyz, bg = "white")
par(oldpar)
} )
}
iortho(img)
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
iortho = function(img){
oldpar <- par(no.readonly = TRUE)
par(xpd = NA)
manipulate({
pos <- manipulatorMouseClick()
X <- nrow(img)
Y <- ncol(img)
Z <- nsli(img)
pdim = voxdim(img)
xyz <<- ceiling(c(X, Y, Z)/2)
mfunc = function(r, mval){
min(max(1, floor(r)), mval)
}
if (!is.null(pos)) {
ndcX = pos$ndcX
ndcY = pos$ndcY
x = xyz[1]
y = xyz[2]
z = xyz[3]
pd = par("din")
usr <- par("usr")
plt <- par("plt")
mfg <- par("mfg")
if (ndcX < 0.5 & ndcY >= 0.5){
#top left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*(1-ndcY)/0.5, Y),
z)
}
if (ndcX >= 0.5 & ndcY >= 0.5){
#top right
xyz = c(x,
mfunc(Y*(1-ndcX)/0.5, Y),
mfunc(Z*(1-ndcY)/0.5, Z)
)
}
if (ndcX < 0.5 & ndcY < 0.5){
#bottom left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*ndcY/0.5, Y),
z)
}
if (ndcX > 0.5 & ndcY < 0.5){
#bottom right
xyz = NULL
}
#       print(pos)
#       print(pd)
#       print(xyz)
}
orthographic(img, xyz=xyz, bg = "white")
par(oldpar)
} )
}
iortho(img)
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
iplot = function(img, plane = c("axial",
"coronal", "sagittal")){
plane = match.arg(plane, c("axial",
"coronal", "sagittal"))
ns=  switch(plane,
"axial"=dim(img)[3],
"coronal"=dim(img)[2],
"sagittal"=dim(img)[1])
manipulate({
image(img, z = z, plot.type= "single", plane = plane)
pos <- manipulatorMouseClick()
if (!is.null(pos)) {
print(pos)
}
},
z = slider(1, ns, step=1, initial = ceiling(ns/2))
)
}
iplot(img)
iortho = function(img, ...){
oldpar <- par(no.readonly = TRUE)
par(xpd = NA)
manipulate({
pos <- manipulatorMouseClick()
X <- nrow(img)
Y <- ncol(img)
Z <- nsli(img)
pdim = voxdim(img)
xyz <<- ceiling(c(X, Y, Z)/2)
mfunc = function(r, mval){
min(max(1, floor(r)), mval)
}
if (!is.null(pos)) {
ndcX = pos$ndcX
ndcY = pos$ndcY
x = xyz[1]
y = xyz[2]
z = xyz[3]
pd = par("din")
usr <- par("usr")
plt <- par("plt")
mfg <- par("mfg")
if (ndcX < 0.5 & ndcY >= 0.5){
#top left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*(1-ndcY)/0.5, Y),
z)
}
if (ndcX >= 0.5 & ndcY >= 0.5){
#top right
xyz = c(x,
mfunc(Y*(1-ndcX)/0.5, Y),
mfunc(Z*(1-ndcY)/0.5, Z)
)
}
if (ndcX < 0.5 & ndcY < 0.5){
#bottom left
xyz = c(mfunc(X*ndcX/0.5, X),
mfunc(Y*ndcY/0.5, Y),
z)
}
if (ndcX > 0.5 & ndcY < 0.5){
#bottom right
xyz = NULL
}
#       print(pos)
#       print(pd)
#       print(xyz)
}
ortho2(img, xyz=xyz, bg = "white", ...)
par(oldpar)
} )
}
iortho(img, window=c(0, 100))
library(fslr)
flirt.help()
options(fsl.path = "/usr/local/fsl/")
flirt.help()
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
iplot = function(img, plane = c("axial",
"coronal", "sagittal")){
plane = match.arg(plane, c("axial",
"coronal", "sagittal"))
ns=  switch(plane,
"axial"=dim(img)[3],
"coronal"=dim(img)[2],
"sagittal"=dim(img)[1])
manipulate({
image(img, z = z, plot.type= "single", plane = plane)
pos <- manipulatorMouseClick()
if (!is.null(pos)) {
print(pos)
}
},
z = slider(1, ns, step=1, initial = ceiling(ns/2))
)
}
iplot(img)
image
fslview(img)
?image
image
image.default
?image.nifti
rm(list=ls())
library(manipulate)
library(fslr)
options(fsl.path='/usr/local/fsl')
template = file.path(fsldir(), "data/standard",
"MNI152_T1_1mm_brain.nii.gz")
img = readNIfTI("~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-.nii.gz")
# img = readNIfTI(template)
iplot = function(img, plane = c("axial",
"coronal", "sagittal"), ...){
plane = match.arg(plane, c("axial",
"coronal", "sagittal"))
ns=  switch(plane,
"axial"=dim(img)[3],
"coronal"=dim(img)[2],
"sagittal"=dim(img)[1])
manipulate({
image(img, z = z, plot.type= "single", plane = plane, ...)
pos <- manipulatorMouseClick()
if (!is.null(pos)) {
print(pos)
}
},
z = slider(1, ns, step=1, initial = ceiling(ns/2))
)
}
iplot(img, useRaster = TRUE)
?cal_min
library(oro.nifti)
?cal_min
#####################################
# Creating Kirby21 Database
#####################################
rm(list=ls())
#####################################
# Creating Kirby21 Database
#####################################
rm(list=ls())
dl_stub = "http://www.nitrc.org/frs/downloadlink.php/"
ids = 2201:2242
dl_link = paste0(dl_stub, ids)
#####################################
# Creating Kirby21 Database
#####################################
rm(list=ls())
dl_stub = "http://www.nitrc.org/frs/downloadlink.php/"
ids = 2201:2242
dl_link = paste0(dl_stub, ids)
download.file(dl_link[1], destfile = "~/Desktop/test")
.
library(matlabr)
options(matlab.path = "/Applications/MATLAB_R2014b.app/bin")
have_matlab()
code = c("x = 10",
"y=20;",
"z=x+y",
"a = [1 2 3; 4 5 6; 7 8 10]",
"save('test.txt', 'x', 'a', 'z', '-ascii')",
"disp(pwd)",
"type('test.txt')")
res = run_matlab_code(code)
res
ls()
dir()
citation("EBImage")
library(fslr)
pixdim
showMethods("pixdim")
showMethods("pixdim", "character")
getMethods("pixdim", "character")
getMethod("pixdim", "character")
getMethod("voxdim", "character")
voxdim
?attributes
file = "~/Desktop/scratch/100-318_20070723_0957_CT_3_CT_Head-_SyN_ROI.nii.gz"
file = checkimg(file)
opts = "-M -V"
res = fslstats(file, opts= opts
)
options(fsl.path="/usr/local/fsl/")
res = fslstats(file, opts= opts)
res
res = fslsum(file, opts= opts)
?fslsub
?fslsum
paste0("", NULL)
paste("", NULL)
.libPaths()
update.packages(ask=FALSE, checkBuilt = TRUE)
.libPaths()
ip <- installed.packages(lib.loc=.libPaths()[1])
install.packages(ip["Package"], type="source")
ip
ip["Package"]
ip[,"Package"]
ip <- installed.packages(lib.loc=.libPaths()[1])
.libPaths()
ip <- installed.packages(lib.loc='/Library/Frameworks/R.framework/Versions/3.1/Resources/library'
)
ip
install.packages(ip[,"Package"])
install.packages(ip[,"Package"], source = TRUE)
install.packages(ip[,"Package"], source = TRUE, ask = FALSE)
install.packages(ip[,"Package"], type="soruce")
install.packages(ip[,"Package"], type="source")
library(fslr0)
library(fslr)
fsl_biascorrect
library(fslr)
?setTimeLimit
.Machine$double.eps
sqrt(.Machine$double.eps)
getwd()
?optim
library(optimx)
?optimx
library(knitr)
wp = TRUE
publish = TRUE
# knit2wp2 = function (input, title = "A post from knitr", ..., shortcode = FALSE,
#                      encoding = getOption("encoding"), publish = TRUE)
# {
#   out = knit(input, encoding = encoding)
#   on.exit(unlink(out))
#   con = file(out, encoding = encoding)
#   on.exit(close(con), add = TRUE)
#   content = knitr:::native_encode(readLines(con, warn = FALSE))
#   content = paste(content, collapse = "\n")
#   content = markdown::markdownToHTML(text = content, fragment.only = TRUE)
#   shortcode = rep(shortcode, length.out = 2L)
#   if (shortcode[1]) {
#     content = gsub("<pre><code class=\"([[:alpha:]]+)\">(.+?)</code></pre>",
#                    "[sourcecode language=\"\\1\"]\\2[/sourcecode]",
#                    content)
#   }
#   content = gsub("<pre><code( class=\"no-highlight\"|)>(.+?)</code></pre>",
#                  if (shortcode[2])
#                    "[sourcecode]\\2[/sourcecode]"
#                  else "<pre>\\2</pre>", content)
#   content = knitr:::native_encode(content, "UTF-8")
#   title = knitr:::native_encode(title, "UTF-8")
#   return(list(content = content, title=title))
# }
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
# mytitle <- folname <- "A full structural MRI processing pipeline in R"
mytitle <- folname <- "Updating R Packages for a New Version"
# folname <- "Converting LaTeX to MS Word"
folname = gsub(" ", "_", folname)
folname = gsub(",", "_", folname)
folname = gsub("'", "_", folname)
folname = gsub(":", "_", folname)
folname = gsub(";", "_", folname)
# categories = c("bmorebiostats")
# categories = "rbloggers"
categories = c("rbloggers", "bmorebiostats")
#"bmorebiostats"
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
addtxt = paste0("```{r label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE}",
"\n", "library(knitr)\n", "opts_chunk$set(echo=TRUE, ",
"prompt=FALSE, message=FALSE, warning=FALSE, ",
'comment="", ', "results='hide')\n", "```")
cat(addtxt, file=rmdname)
}
system(sprintf("open %s", shQuote(rmdname)))
setwd(file.path(wpdir, folname))
